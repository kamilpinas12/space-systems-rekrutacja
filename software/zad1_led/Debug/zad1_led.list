
zad1_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080038f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080038f8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be46  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f53  00000000  00000000  0002bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f7  00000000  00000000  0002eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d7c  00000000  00000000  0002f517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f033  00000000  00000000  00055293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f46e2  00000000  00000000  000642c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003548  00000000  00000000  001589a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0015bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080038bc 	.word	0x080038bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080038bc 	.word	0x080038bc

08000218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <MX_DMA_Init+0x50>)
 8000220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000222:	4a11      	ldr	r2, [pc, #68]	; (8000268 <MX_DMA_Init+0x50>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6493      	str	r3, [r2, #72]	; 0x48
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_DMA_Init+0x50>)
 800022c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_DMA_Init+0x50>)
 8000238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <MX_DMA_Init+0x50>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6493      	str	r3, [r2, #72]	; 0x48
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_DMA_Init+0x50>)
 8000244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	200b      	movs	r0, #11
 8000254:	f000 fcf1 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000258:	200b      	movs	r0, #11
 800025a:	f000 fd08 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <MX_GPIO_Init+0x7c>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000286:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <MX_GPIO_Init+0x7c>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_GPIO_Init+0x7c>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_GPIO_Init+0x7c>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_GPIO_Init+0x7c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_GPIO_Init+0x7c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_BUTTON_Pin;
 80002b2:	2301      	movs	r3, #1
 80002b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLINK_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4619      	mov	r1, r3
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 ff5d 	bl	8001188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2100      	movs	r1, #0
 80002d2:	2006      	movs	r0, #6
 80002d4:	f000 fcb1 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002d8:	2006      	movs	r0, #6
 80002da:	f000 fcc8 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 80002de:	bf00      	nop
 80002e0:	3720      	adds	r7, #32
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

bool blink_button_flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BLINK_BUTTON_Pin) {
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d102      	bne.n	8000302 <HAL_GPIO_EXTI_Callback+0x16>
	  blink_button_flag = 1;
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <HAL_GPIO_EXTI_Callback+0x24>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
  }
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000028 	.word	0x20000028

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fb42 	bl	80009a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f87f 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f7ff ffa3 	bl	800026c <MX_GPIO_Init>
  MX_DMA_Init();
 8000326:	f7ff ff77 	bl	8000218 <MX_DMA_Init>
  MX_TIM1_Init();
 800032a:	f000 f93d 	bl	80005a8 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  ws2812b_init();
 800032e:	f000 fa9b 	bl	8000868 <ws2812b_init>



  // red, green variables
  unsigned long prev_time = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  int blink_counter = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  int red_val = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  int green_val = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]



  //blue led variables
  int blue_val = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  int blue_led_prev_blink = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  int num_blinks_left = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]


  while (1)
  {
	  //start blinking after button press
	  if(blink_button_flag){
 800034e:	4b32      	ldr	r3, [pc, #200]	; (8000418 <main+0x104>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d006      	beq.n	8000364 <main+0x50>
		  num_blinks_left = NUM_BLUE_BLINKS * 2;  // *2 because state change are counted
 8000356:	2306      	movs	r3, #6
 8000358:	607b      	str	r3, [r7, #4]
		  blue_led_prev_blink = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
		  blink_button_flag = 0;
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <main+0x104>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
	  }

	  // blue led blink
	  if(num_blinks_left && (HAL_GetTick() - blue_led_prev_blink) > BLUE_LED_BLINK_PERIOD/2){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d021      	beq.n	80003ae <main+0x9a>
 800036a:	f000 fb7f 	bl	8000a6c <HAL_GetTick>
 800036e:	4602      	mov	r2, r0
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000378:	d919      	bls.n	80003ae <main+0x9a>
		  if(blue_val) blue_val = 0;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <main+0x72>
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e001      	b.n	800038a <main+0x76>
		  else blue_val = 100;
 8000386:	2364      	movs	r3, #100	; 0x64
 8000388:	60fb      	str	r3, [r7, #12]
		  ws2812b_set_color(0, red_val, green_val, blue_val);
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	b2d9      	uxtb	r1, r3
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2000      	movs	r0, #0
 8000398:	f000 faa4 	bl	80008e4 <ws2812b_set_color>
		  ws2812b_update();
 800039c:	f000 fa94 	bl	80008c8 <ws2812b_update>
		  num_blinks_left -= 1;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
		  blue_led_prev_blink = HAL_GetTick();
 80003a6:	f000 fb61 	bl	8000a6c <HAL_GetTick>
 80003aa:	4603      	mov	r3, r0
 80003ac:	60bb      	str	r3, [r7, #8]
	  }

	  // control red, green
	  if((HAL_GetTick() - prev_time) > BLINK_PERIOD / RESOLUTION){
 80003ae:	f000 fb5d 	bl	8000a6c <HAL_GetTick>
 80003b2:	4602      	mov	r2, r0
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	2b1e      	cmp	r3, #30
 80003ba:	d9c8      	bls.n	800034e <main+0x3a>
		  if(blink_counter <= BLINK_PERIOD){
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80003c2:	4293      	cmp	r3, r2
 80003c4:	dc16      	bgt.n	80003f4 <main+0xe0>
			  if(blink_counter > BLINK_PERIOD/2) red_val = 100;
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80003cc:	4293      	cmp	r3, r2
 80003ce:	dd02      	ble.n	80003d6 <main+0xc2>
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e001      	b.n	80003da <main+0xc6>
			  else red_val = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
			  green_val = ((blink_counter * 100)/BLINK_PERIOD);
 80003da:	69bb      	ldr	r3, [r7, #24]
 80003dc:	4a0f      	ldr	r2, [pc, #60]	; (800041c <main+0x108>)
 80003de:	fb82 1203 	smull	r1, r2, r2, r3
 80003e2:	441a      	add	r2, r3
 80003e4:	1112      	asrs	r2, r2, #4
 80003e6:	17db      	asrs	r3, r3, #31
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	613b      	str	r3, [r7, #16]
			  blink_counter += BLINK_PERIOD / RESOLUTION;
 80003ec:	69bb      	ldr	r3, [r7, #24]
 80003ee:	331e      	adds	r3, #30
 80003f0:	61bb      	str	r3, [r7, #24]
 80003f2:	e001      	b.n	80003f8 <main+0xe4>
		  }
		  else{
			  blink_counter = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
		  }
		  ws2812b_set_color(0, red_val, green_val, blue_val);
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	b2d9      	uxtb	r1, r3
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	2000      	movs	r0, #0
 8000406:	f000 fa6d 	bl	80008e4 <ws2812b_set_color>
		  ws2812b_update();
 800040a:	f000 fa5d 	bl	80008c8 <ws2812b_update>
		  prev_time = HAL_GetTick();
 800040e:	f000 fb2d 	bl	8000a6c <HAL_GetTick>
 8000412:	61f8      	str	r0, [r7, #28]
	  if(blink_button_flag){
 8000414:	e79b      	b.n	800034e <main+0x3a>
 8000416:	bf00      	nop
 8000418:	20000028 	.word	0x20000028
 800041c:	88888889 	.word	0x88888889

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b094      	sub	sp, #80	; 0x50
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2238      	movs	r2, #56	; 0x38
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fa18 	bl	8003864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000442:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000446:	f001 f839 	bl	80014bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2340      	movs	r3, #64	; 0x40
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2302      	movs	r3, #2
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	2302      	movs	r3, #2
 800045e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000460:	2304      	movs	r3, #4
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000464:	234b      	movs	r3, #75	; 0x4b
 8000466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000468:	2302      	movs	r3, #2
 800046a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800046c:	2302      	movs	r3, #2
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f001 f8c3 	bl	8001604 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000484:	f000 f818 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2303      	movs	r3, #3
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2104      	movs	r1, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fbc1 	bl	8001c28 <HAL_RCC_ClockConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004ac:	f000 f804 	bl	80004b8 <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3750      	adds	r7, #80	; 0x50
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 fa76 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLINK_BUTTON_Pin);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 ff91 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <DMA1_Channel1_IRQHandler+0x10>)
 8000576:	f000 fcb8 	bl	8000eea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000078 	.word	0x20000078

08000584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]
 80005da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f93e 	bl	8003864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <MX_TIM1_Init+0x158>)
 80005ea:	4a46      	ldr	r2, [pc, #280]	; (8000704 <MX_TIM1_Init+0x15c>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <MX_TIM1_Init+0x158>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <MX_TIM1_Init+0x158>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 188;
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <MX_TIM1_Init+0x158>)
 80005fc:	22bc      	movs	r2, #188	; 0xbc
 80005fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <MX_TIM1_Init+0x158>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <MX_TIM1_Init+0x158>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <MX_TIM1_Init+0x158>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000612:	483b      	ldr	r0, [pc, #236]	; (8000700 <MX_TIM1_Init+0x158>)
 8000614:	f001 fcec 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800061e:	f7ff ff4b 	bl	80004b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000628:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800062c:	4619      	mov	r1, r3
 800062e:	4834      	ldr	r0, [pc, #208]	; (8000700 <MX_TIM1_Init+0x158>)
 8000630:	f002 f948 	bl	80028c4 <HAL_TIM_ConfigClockSource>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800063a:	f7ff ff3d 	bl	80004b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800063e:	4830      	ldr	r0, [pc, #192]	; (8000700 <MX_TIM1_Init+0x158>)
 8000640:	f001 fd9e 	bl	8002180 <HAL_TIM_PWM_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800064a:	f7ff ff35 	bl	80004b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800065a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065e:	4619      	mov	r1, r3
 8000660:	4827      	ldr	r0, [pc, #156]	; (8000700 <MX_TIM1_Init+0x158>)
 8000662:	f002 ffd5 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800066c:	f7ff ff24 	bl	80004b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800067c:	2300      	movs	r3, #0
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <MX_TIM1_Init+0x158>)
 8000696:	f002 f801 	bl	800269c <HAL_TIM_PWM_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80006a0:	f7ff ff0a 	bl	80004b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM1_Init+0x158>)
 80006e2:	f003 f82b 	bl	800373c <HAL_TIMEx_ConfigBreakDeadTime>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80006ec:	f7ff fee4 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_TIM1_Init+0x158>)
 80006f2:	f000 f855 	bl	80007a0 <HAL_TIM_MspPostInit>

}
 80006f6:	bf00      	nop
 80006f8:	3770      	adds	r7, #112	; 0x70
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000002c 	.word	0x2000002c
 8000704:	40012c00 	.word	0x40012c00

08000708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <HAL_TIM_Base_MspInit+0x88>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d135      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000724:	6613      	str	r3, [r2, #96]	; 0x60
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_TIM_Base_MspInit+0x8c>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_TIM_Base_MspInit+0x94>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 800073a:	222a      	movs	r2, #42	; 0x2a
 800073c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000740:	2210      	movs	r2, #16
 8000742:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000756:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 800076c:	f000 fa9a 	bl	8000ca4 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000776:	f7ff fe9f 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_TIM_Base_MspInit+0x90>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000
 8000798:	20000078 	.word	0x20000078
 800079c:	40020008 	.word	0x40020008

080007a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_TIM_MspPostInit+0x64>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d11b      	bne.n	80007fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_TIM_MspPostInit+0x68>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_TIM_MspPostInit+0x68>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_TIM_MspPostInit+0x68>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_TIM_MspPostInit+0x6c>)
 80007f6:	f000 fcc7 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40012c00 	.word	0x40012c00
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <set_byte>:

static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];


static void set_byte(uint32_t pos, uint8_t value)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e016      	b.n	8000850 <set_byte+0x40>
    if (value & 0x80) {
 8000822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	da06      	bge.n	8000838 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <set_byte+0x54>)
 8000832:	2178      	movs	r1, #120	; 0x78
 8000834:	54d1      	strb	r1, [r2, r3]
 8000836:	e005      	b.n	8000844 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <set_byte+0x54>)
 8000840:	213c      	movs	r1, #60	; 0x3c
 8000842:	54d1      	strb	r1, [r2, r3]
    }
    value <<= 1;
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b07      	cmp	r3, #7
 8000854:	dde5      	ble.n	8000822 <set_byte+0x12>
  }
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	200000d8 	.word	0x200000d8

08000868 <ws2812b_init>:


void ws2812b_init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	e007      	b.n	8000884 <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <ws2812b_init+0x58>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b2c      	cmp	r3, #44	; 0x2c
 8000888:	ddf4      	ble.n	8000874 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e007      	b.n	80008a0 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	332d      	adds	r3, #45	; 0x2d
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <ws2812b_init+0x58>)
 8000896:	213c      	movs	r1, #60	; 0x3c
 8000898:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b17      	cmp	r3, #23
 80008a4:	ddf4      	ble.n	8000890 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 0;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <ws2812b_init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  HAL_TIM_Base_Start(&htim1);
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <ws2812b_init+0x5c>)
 80008b0:	f001 fbf6 	bl	80020a0 <HAL_TIM_Base_Start>
  ws2812b_update();
 80008b4:	f000 f808 	bl	80008c8 <ws2812b_update>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	2000002c 	.word	0x2000002c

080008c8 <ws2812b_update>:


void ws2812b_update(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 80008cc:	2346      	movs	r3, #70	; 0x46
 80008ce:	4a03      	ldr	r2, [pc, #12]	; (80008dc <ws2812b_update+0x14>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <ws2812b_update+0x18>)
 80008d4:	f001 fcb6 	bl	8002244 <HAL_TIM_PWM_Start_DMA>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	2000002c 	.word	0x2000002c

080008e4 <ws2812b_set_color>:


void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70bb      	strb	r3, [r7, #2]
 80008fa:	4613      	mov	r3, r2
 80008fc:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d120      	bne.n	8000946 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	332d      	adds	r3, #45	; 0x2d
 8000910:	78ba      	ldrb	r2, [r7, #2]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff7b 	bl	8000810 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	3335      	adds	r3, #53	; 0x35
 8000926:	78fa      	ldrb	r2, [r7, #3]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff70 	bl	8000810 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	333d      	adds	r3, #61	; 0x3d
 800093c:	787a      	ldrb	r2, [r7, #1]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff65 	bl	8000810 <set_byte>
	}
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff fe16 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 ff79 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fcc7 	bl	8000314 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000994:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 8000998:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800099c:	20000124 	.word	0x20000124

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>

080009a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f939 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f80e 	bl	80009d4 <HAL_InitTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e001      	b.n	80009c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c4:	f7ff fd7e 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c8:	79fb      	ldrb	r3, [r7, #7]

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_InitTick+0x68>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d022      	beq.n	8000a2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_InitTick+0x6c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_InitTick+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f944 	bl	8000c8a <HAL_SYSTICK_Config>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10f      	bne.n	8000a28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d809      	bhi.n	8000a22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	f04f 30ff 	mov.w	r0, #4294967295
 8000a16:	f000 f910 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_InitTick+0x70>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e007      	b.n	8000a32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e004      	b.n	8000a32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e001      	b.n	8000a32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a58:	6013      	str	r3, [r2, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20000120 	.word	0x20000120
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000120 	.word	0x20000120

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff40 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff33 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa4 	bl	8000be0 <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e08d      	b.n	8000dd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <HAL_DMA_Init+0x138>)
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d80f      	bhi.n	8000ce2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <HAL_DMA_Init+0x13c>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a45      	ldr	r2, [pc, #276]	; (8000de4 <HAL_DMA_Init+0x140>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	009a      	lsls	r2, r3, #2
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a42      	ldr	r2, [pc, #264]	; (8000de8 <HAL_DMA_Init+0x144>)
 8000cde:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce0:	e00e      	b.n	8000d00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_DMA_Init+0x148>)
 8000cea:	4413      	add	r3, r2
 8000cec:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <HAL_DMA_Init+0x140>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	009a      	lsls	r2, r3, #2
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a3c      	ldr	r2, [pc, #240]	; (8000df0 <HAL_DMA_Init+0x14c>)
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2202      	movs	r2, #2
 8000d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f9b6 	bl	80010c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d60:	d102      	bne.n	8000d68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d010      	beq.n	8000da8 <HAL_DMA_Init+0x104>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d80c      	bhi.n	8000da8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f9d6 	bl	8001140 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	e008      	b.n	8000dba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40020407 	.word	0x40020407
 8000de0:	bffdfff8 	.word	0xbffdfff8
 8000de4:	cccccccd 	.word	0xcccccccd
 8000de8:	40020000 	.word	0x40020000
 8000dec:	bffdfbf8 	.word	0xbffdfbf8
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Start_IT+0x20>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e066      	b.n	8000ee2 <HAL_DMA_Start_IT+0xee>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d155      	bne.n	8000ed4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f8fb 	bl	8001048 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 020e 	orr.w	r2, r2, #14
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e00f      	b.n	8000e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0204 	bic.w	r2, r2, #4
 8000e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 020a 	orr.w	r2, r2, #10
 8000e8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ea8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0201 	orr.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e005      	b.n	8000ee0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000edc:	2302      	movs	r3, #2
 8000ede:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d026      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x7a>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d021      	beq.n	8000f64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0204 	bic.w	r2, r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 021f 	and.w	r2, r3, #31
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d071      	beq.n	800103e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f62:	e06c      	b.n	800103e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d02e      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d029      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020a 	bic.w	r2, r2, #10
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d038      	beq.n	800103e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000fd4:	e033      	b.n	800103e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2208      	movs	r2, #8
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d02a      	beq.n	8001040 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d025      	beq.n	8001040 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020e 	bic.w	r2, r2, #14
 8001002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800103e:	bf00      	nop
 8001040:	bf00      	nop
}
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800105e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001070:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 021f 	and.w	r2, r3, #31
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d108      	bne.n	80010a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010a6:	e007      	b.n	80010b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d802      	bhi.n	80010de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e001      	b.n	80010e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80010e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3b08      	subs	r3, #8
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	009a      	lsls	r2, r3, #2
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800110e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2201      	movs	r2, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40020407 	.word	0x40020407
 8001130:	40020800 	.word	0x40020800
 8001134:	40020820 	.word	0x40020820
 8001138:	cccccccd 	.word	0xcccccccd
 800113c:	40020880 	.word	0x40020880

08001140 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001162:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3b01      	subs	r3, #1
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	2201      	movs	r2, #1
 800116e:	409a      	lsls	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	1000823f 	.word	0x1000823f
 8001184:	40020940 	.word	0x40020940

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001196:	e15a      	b.n	800144e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 814c 	beq.w	8001448 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80a6 	beq.w	8001448 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_GPIO_Init+0x2e4>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_GPIO_Init+0x2e4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6613      	str	r3, [r2, #96]	; 0x60
 8001308:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_GPIO_Init+0x2e4>)
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x2e8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d01f      	beq.n	8001380 <HAL_GPIO_Init+0x1f8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <HAL_GPIO_Init+0x2ec>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d019      	beq.n	800137c <HAL_GPIO_Init+0x1f4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d013      	beq.n	8001378 <HAL_GPIO_Init+0x1f0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_GPIO_Init+0x2f4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00d      	beq.n	8001374 <HAL_GPIO_Init+0x1ec>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_GPIO_Init+0x2f8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x1e8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a48      	ldr	r2, [pc, #288]	; (8001484 <HAL_GPIO_Init+0x2fc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_GPIO_Init+0x1e4>
 8001368:	2305      	movs	r3, #5
 800136a:	e00a      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 800136c:	2306      	movs	r3, #6
 800136e:	e008      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001370:	2304      	movs	r3, #4
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001374:	2303      	movs	r3, #3
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001378:	2302      	movs	r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1fa>
 8001380:	2300      	movs	r3, #0
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001392:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_GPIO_Init+0x2e8>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c4:	4a30      	ldr	r2, [pc, #192]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ee:	4a26      	ldr	r2, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_GPIO_Init+0x300>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x300>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_GPIO_Init+0x300>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f ae9d 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48001000 	.word	0x48001000
 8001484:	48001400 	.word	0x48001400
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ff1e 	bl	80002ec <HAL_GPIO_EXTI_Callback>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d141      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d131      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d8:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014de:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f0:	4a41      	ldr	r2, [pc, #260]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2232      	movs	r2, #50	; 0x32
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150e:	e002      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d102      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f2      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d158      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e057      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800154c:	e04d      	b.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001554:	d141      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d131      	bne.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157c:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2232      	movs	r2, #50	; 0x32
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3301      	adds	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159a:	e002      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3b01      	subs	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	d102      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d112      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e011      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015d8:	e007      	b.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40007000 	.word	0x40007000
 80015fc:	20000000 	.word	0x20000000
 8001600:	431bde83 	.word	0x431bde83

08001604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e2fe      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d075      	beq.n	800170e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001622:	4b97      	ldr	r3, [pc, #604]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162c:	4b94      	ldr	r3, [pc, #592]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x3e>
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d002      	beq.n	8001648 <HAL_RCC_OscConfig+0x44>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b8d      	ldr	r3, [pc, #564]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d05b      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d157      	bne.n	800170c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e2d9      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x74>
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a84      	ldr	r2, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x98>
 8001682:	4b7f      	ldr	r3, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7e      	ldr	r2, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f9d6 	bl	8000a6c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f9d2 	bl	8000a6c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e29e      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xc0>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff f9c2 	bl	8000a6c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff f9be 	bl	8000a6c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e28a      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fe:	4b60      	ldr	r3, [pc, #384]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0xe8>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d075      	beq.n	8001806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171a:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d102      	bne.n	800173a <HAL_RCC_OscConfig+0x136>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d002      	beq.n	8001740 <HAL_RCC_OscConfig+0x13c>
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d11f      	bne.n	8001780 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_OscConfig+0x154>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e25d      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	4946      	ldr	r1, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800176c:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f92f 	bl	80009d4 <HAL_InitTick>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d043      	beq.n	8001804 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e249      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f96a 	bl	8000a6c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff f966 	bl	8000a6c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e232      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	061b      	lsls	r3, r3, #24
 80017c8:	492d      	ldr	r1, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e01a      	b.n	8001806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f946 	bl	8000a6c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff f942 	bl	8000a6c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e20e      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1e0>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d041      	beq.n	8001896 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01c      	beq.n	8001854 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff f91f 	bl	8000a6c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff f91b 	bl	8000a6c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1e7      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ef      	beq.n	8001832 <HAL_RCC_OscConfig+0x22e>
 8001852:	e020      	b.n	8001896 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f902 	bl	8000a6c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186a:	e00d      	b.n	8001888 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff f8fe 	bl	8000a6c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d906      	bls.n	8001888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1ca      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001888:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ea      	bne.n	800186c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80a6 	beq.w	80019f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018a8:	4b84      	ldr	r3, [pc, #528]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2b4>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x2b6>
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00d      	beq.n	80018da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b7f      	ldr	r3, [pc, #508]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a7e      	ldr	r2, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ca:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a75      	ldr	r2, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f8bb 	bl	8000a6c <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7ff f8b7 	bl	8000a6c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e183      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x4bc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <HAL_RCC_OscConfig+0x32e>
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	4a65      	ldr	r2, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001930:	e024      	b.n	800197c <HAL_RCC_OscConfig+0x378>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d110      	bne.n	800195c <HAL_RCC_OscConfig+0x358>
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194a:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800195a:	e00f      	b.n	800197c <HAL_RCC_OscConfig+0x378>
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a52      	ldr	r2, [pc, #328]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f872 	bl	8000a6c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f86e 	bl	8000a6c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e138      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ed      	beq.n	800198c <HAL_RCC_OscConfig+0x388>
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff f85b 	bl	8000a6c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff f857 	bl	8000a6c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e121      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ed      	bne.n	80019ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a34      	ldr	r2, [pc, #208]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff f82a 	bl	8000a6c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a1c:	f7ff f826 	bl	8000a6c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e0f2      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ef      	beq.n	8001a1c <HAL_RCC_OscConfig+0x418>
 8001a3c:	e01b      	b.n	8001a76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f80d 	bl	8000a6c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a56:	f7ff f809 	bl	8000a6c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0d5      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ef      	bne.n	8001a56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80c9 	beq.w	8001c12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	f000 8083 	beq.w	8001b94 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d15e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x4b8>)
 8001a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7fe ffe3 	bl	8000a6c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	e00c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe ffdf 	bl	8000a6c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d905      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e0ab      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b55      	ldr	r3, [pc, #340]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ec      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x61c>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6a11      	ldr	r1, [r2, #32]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001aea:	0212      	lsls	r2, r2, #8
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001af2:	0852      	lsrs	r2, r2, #1
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0552      	lsls	r2, r2, #21
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0652      	lsls	r2, r2, #25
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b0a:	06d2      	lsls	r2, r2, #27
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	4943      	ldr	r1, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b20:	4b3e      	ldr	r3, [pc, #248]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a3d      	ldr	r2, [pc, #244]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7fe ff9e 	bl	8000a6c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7fe ff9a 	bl	8000a6c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e066      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x530>
 8001b52:	e05e      	b.n	8001c12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7fe ff84 	bl	8000a6c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe ff80 	bl	8000a6c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04c      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4924      	ldr	r1, [pc, #144]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60cb      	str	r3, [r1, #12]
 8001b92:	e03e      	b.n	8001c12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e039      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_RCC_OscConfig+0x618>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d12c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d123      	bne.n	8001c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d113      	bne.n	8001c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	019f800c 	.word	0x019f800c
 8001c24:	feeefffc 	.word	0xfeeefffc

08001c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e11e      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b8e      	ldr	r3, [pc, #568]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	498c      	ldr	r1, [pc, #560]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e106      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d073      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d129      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0f4      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c94:	f000 f966 	bl	8001f64 <RCC_GetSysClockFreqFromPLLSource>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4a7c      	ldr	r2, [pc, #496]	; (8001e90 <HAL_RCC_ClockConfig+0x268>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d93f      	bls.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d033      	beq.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12f      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cca:	4a70      	ldr	r2, [pc, #448]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e024      	b.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0c6      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0be      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d00:	f000 f8ce 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4a61      	ldr	r2, [pc, #388]	; (8001e90 <HAL_RCC_ClockConfig+0x268>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d909      	bls.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d16:	4a5d      	ldr	r2, [pc, #372]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4957      	ldr	r1, [pc, #348]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d34:	f7fe fe9a 	bl	8000a6c <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7fe fe96 	bl	8000a6c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e095      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d023      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a42      	ldr	r2, [pc, #264]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d94:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
 8001db6:	e008      	b.n	8001dca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b80      	cmp	r3, #128	; 0x80
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d21d      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 020f 	bic.w	r2, r3, #15
 8001de0:	4929      	ldr	r1, [pc, #164]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de8:	f7fe fe40 	bl	8000a6c <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe fe3c 	bl	8000a6c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e03b      	b.n	8001e7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1ed      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4917      	ldr	r1, [pc, #92]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e52:	f000 f825 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490c      	ldr	r1, [pc, #48]	; (8001e94 <HAL_RCC_ClockConfig+0x26c>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x270>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RCC_ClockConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fdac 	bl	80009d4 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	04c4b400 	.word	0x04c4b400
 8001e94:	080038d4 	.word	0x080038d4
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e047      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	e03e      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d136      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3301      	adds	r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efe:	68d2      	ldr	r2, [r2, #12]
 8001f00:	0a12      	lsrs	r2, r2, #8
 8001f02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e00c      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f18:	68d2      	ldr	r2, [r2, #12]
 8001f1a:	0a12      	lsrs	r2, r2, #8
 8001f1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
      break;
 8001f26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0e5b      	lsrs	r3, r3, #25
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e001      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f48:	693b      	ldr	r3, [r7, #16]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d10c      	bne.n	8001fa2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f92:	68d2      	ldr	r2, [r2, #12]
 8001f94:	0a12      	lsrs	r2, r2, #8
 8001f96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
    break;
 8001fa0:	e00c      	b.n	8001fbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	0a12      	lsrs	r2, r2, #8
 8001fb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    break;
 8001fba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0e5b      	lsrs	r3, r3, #25
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	00f42400 	.word	0x00f42400

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e049      	b.n	8002096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fb76 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 fe4e 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d001      	beq.n	80020b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e04c      	b.n	8002152 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_TIM_Base_Start+0xc0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d022      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d2:	d01d      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <HAL_TIM_Base_Start+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d018      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_TIM_Base_Start+0xc8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_TIM_Base_Start+0xcc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00e      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_TIM_Base_Start+0xd0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d009      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_TIM_Base_Start+0xd4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_Base_Start+0x70>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_TIM_Base_Start+0xd8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d115      	bne.n	800213c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_TIM_Base_Start+0xdc>)
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d015      	beq.n	800214e <HAL_TIM_Base_Start+0xae>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d011      	beq.n	800214e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	e008      	b.n	800214e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e000      	b.n	8002150 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40000400 	.word	0x40000400
 8002168:	40000800 	.word	0x40000800
 800216c:	40000c00 	.word	0x40000c00
 8002170:	40013400 	.word	0x40013400
 8002174:	40014000 	.word	0x40014000
 8002178:	40015000 	.word	0x40015000
 800217c:	00010007 	.word	0x00010007

08002180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e049      	b.n	8002226 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f841 	bl	800222e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fd86 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_TIM_PWM_Start_DMA+0x2c>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e03c      	b.n	80022ea <HAL_TIM_PWM_Start_DMA+0xa6>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d109      	bne.n	800228a <HAL_TIM_PWM_Start_DMA+0x46>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	e02f      	b.n	80022ea <HAL_TIM_PWM_Start_DMA+0xa6>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d109      	bne.n	80022a4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e022      	b.n	80022ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d109      	bne.n	80022be <HAL_TIM_PWM_Start_DMA+0x7a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e015      	b.n	80022ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d109      	bne.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x94>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e008      	b.n	80022ea <HAL_TIM_PWM_Start_DMA+0xa6>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
 80022f0:	e1b5      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_TIM_PWM_Start_DMA+0xc8>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e03c      	b.n	8002386 <HAL_TIM_PWM_Start_DMA+0x142>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d109      	bne.n	8002326 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	e02f      	b.n	8002386 <HAL_TIM_PWM_Start_DMA+0x142>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d109      	bne.n	8002340 <HAL_TIM_PWM_Start_DMA+0xfc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e022      	b.n	8002386 <HAL_TIM_PWM_Start_DMA+0x142>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d109      	bne.n	800235a <HAL_TIM_PWM_Start_DMA+0x116>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e015      	b.n	8002386 <HAL_TIM_PWM_Start_DMA+0x142>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d109      	bne.n	8002374 <HAL_TIM_PWM_Start_DMA+0x130>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e008      	b.n	8002386 <HAL_TIM_PWM_Start_DMA+0x142>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d034      	beq.n	80023f4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_TIM_PWM_Start_DMA+0x152>
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e161      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start_DMA+0x166>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a8:	e026      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start_DMA+0x176>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b8:	e01e      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start_DMA+0x186>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	e016      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start_DMA+0x196>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023d8:	e00e      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Start_DMA+0x1a6>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e8:	e006      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f2:	e001      	b.n	80023f8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e132      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	f200 80ae 	bhi.w	800255c <HAL_TIM_PWM_Start_DMA+0x318>
 8002400:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800255d 	.word	0x0800255d
 8002410:	0800255d 	.word	0x0800255d
 8002414:	0800255d 	.word	0x0800255d
 8002418:	08002485 	.word	0x08002485
 800241c:	0800255d 	.word	0x0800255d
 8002420:	0800255d 	.word	0x0800255d
 8002424:	0800255d 	.word	0x0800255d
 8002428:	080024cd 	.word	0x080024cd
 800242c:	0800255d 	.word	0x0800255d
 8002430:	0800255d 	.word	0x0800255d
 8002434:	0800255d 	.word	0x0800255d
 8002438:	08002515 	.word	0x08002515
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4a89      	ldr	r2, [pc, #548]	; (8002668 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	4a88      	ldr	r2, [pc, #544]	; (800266c <HAL_TIM_PWM_Start_DMA+0x428>)
 800244a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4a87      	ldr	r2, [pc, #540]	; (8002670 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3334      	adds	r3, #52	; 0x34
 8002460:	461a      	mov	r2, r3
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	f7fe fcc6 	bl	8000df4 <HAL_DMA_Start_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0f5      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002480:	60da      	str	r2, [r3, #12]
      break;
 8002482:	e06e      	b.n	8002562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	4a77      	ldr	r2, [pc, #476]	; (8002668 <HAL_TIM_PWM_Start_DMA+0x424>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	4a76      	ldr	r2, [pc, #472]	; (800266c <HAL_TIM_PWM_Start_DMA+0x428>)
 8002492:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800249a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3338      	adds	r3, #56	; 0x38
 80024a8:	461a      	mov	r2, r3
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	f7fe fca2 	bl	8000df4 <HAL_DMA_Start_IT>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0d1      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024c8:	60da      	str	r2, [r3, #12]
      break;
 80024ca:	e04a      	b.n	8002562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_TIM_PWM_Start_DMA+0x424>)
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a64      	ldr	r2, [pc, #400]	; (800266c <HAL_TIM_PWM_Start_DMA+0x428>)
 80024da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	333c      	adds	r3, #60	; 0x3c
 80024f0:	461a      	mov	r2, r3
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	f7fe fc7e 	bl	8000df4 <HAL_DMA_Start_IT>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0ad      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e026      	b.n	8002562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_TIM_PWM_Start_DMA+0x424>)
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_TIM_PWM_Start_DMA+0x428>)
 8002522:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800252a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3340      	adds	r3, #64	; 0x40
 8002538:	461a      	mov	r2, r3
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	f7fe fc5a 	bl	8000df4 <HAL_DMA_Start_IT>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e089      	b.n	800265e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002558:	60da      	str	r2, [r3, #12]
      break;
 800255a:	e002      	b.n	8002562 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
      break;
 8002560:	bf00      	nop
  }

  if (status == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d179      	bne.n	800265c <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f827 	bl	80035c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <HAL_TIM_PWM_Start_DMA+0x430>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x36e>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <HAL_TIM_PWM_Start_DMA+0x434>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x36e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_TIM_PWM_Start_DMA+0x438>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x36e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a39      	ldr	r2, [pc, #228]	; (8002680 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x36e>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a38      	ldr	r2, [pc, #224]	; (8002684 <HAL_TIM_PWM_Start_DMA+0x440>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a36      	ldr	r2, [pc, #216]	; (8002688 <HAL_TIM_PWM_Start_DMA+0x444>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Start_DMA+0x372>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_TIM_PWM_Start_DMA+0x374>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a28      	ldr	r2, [pc, #160]	; (8002674 <HAL_TIM_PWM_Start_DMA+0x430>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d01d      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_TIM_PWM_Start_DMA+0x448>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a28      	ldr	r2, [pc, #160]	; (8002690 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a26      	ldr	r2, [pc, #152]	; (8002694 <HAL_TIM_PWM_Start_DMA+0x450>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <HAL_TIM_PWM_Start_DMA+0x434>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_TIM_PWM_Start_DMA+0x438>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_TIM_PWM_Start_DMA+0x444>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d115      	bne.n	8002648 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_TIM_PWM_Start_DMA+0x454>)
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b06      	cmp	r3, #6
 800262c:	d015      	beq.n	800265a <HAL_TIM_PWM_Start_DMA+0x416>
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d011      	beq.n	800265a <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002646:	e008      	b.n	800265a <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e000      	b.n	800265c <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800265c:	7dfb      	ldrb	r3, [r7, #23]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08002bbf 	.word	0x08002bbf
 800266c:	08002c67 	.word	0x08002c67
 8002670:	08002b2d 	.word	0x08002b2d
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40013400 	.word	0x40013400
 800267c:	40014000 	.word	0x40014000
 8002680:	40014400 	.word	0x40014400
 8002684:	40014800 	.word	0x40014800
 8002688:	40015000 	.word	0x40015000
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800
 8002694:	40000c00 	.word	0x40000c00
 8002698:	00010007 	.word	0x00010007

0800269c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e0ff      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b14      	cmp	r3, #20
 80026c6:	f200 80f0 	bhi.w	80028aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	08002725 	.word	0x08002725
 80026d4:	080028ab 	.word	0x080028ab
 80026d8:	080028ab 	.word	0x080028ab
 80026dc:	080028ab 	.word	0x080028ab
 80026e0:	08002765 	.word	0x08002765
 80026e4:	080028ab 	.word	0x080028ab
 80026e8:	080028ab 	.word	0x080028ab
 80026ec:	080028ab 	.word	0x080028ab
 80026f0:	080027a7 	.word	0x080027a7
 80026f4:	080028ab 	.word	0x080028ab
 80026f8:	080028ab 	.word	0x080028ab
 80026fc:	080028ab 	.word	0x080028ab
 8002700:	080027e7 	.word	0x080027e7
 8002704:	080028ab 	.word	0x080028ab
 8002708:	080028ab 	.word	0x080028ab
 800270c:	080028ab 	.word	0x080028ab
 8002710:	08002829 	.word	0x08002829
 8002714:	080028ab 	.word	0x080028ab
 8002718:	080028ab 	.word	0x080028ab
 800271c:	080028ab 	.word	0x080028ab
 8002720:	08002869 	.word	0x08002869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fb84 	bl	8002e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      break;
 8002762:	e0a5      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fbfe 	bl	8002f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      break;
 80027a4:	e084      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fc71 	bl	8003094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0208 	orr.w	r2, r2, #8
 80027c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
      break;
 80027e4:	e064      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fce3 	bl	80031b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
      break;
 8002826:	e043      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd56 	bl	80032e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0208 	orr.w	r2, r2, #8
 8002842:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0204 	bic.w	r2, r2, #4
 8002852:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002866:	e023      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fda0 	bl	80033b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002892:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	021a      	lsls	r2, r3, #8
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
      break;
 80028ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop

080028c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0f6      	b.n	8002ace <HAL_TIM_ConfigClockSource+0x20a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80028fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_TIM_ConfigClockSource+0x214>)
 800291a:	4293      	cmp	r3, r2
 800291c:	f000 80c1 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002920:	4a6d      	ldr	r2, [pc, #436]	; (8002ad8 <HAL_TIM_ConfigClockSource+0x214>)
 8002922:	4293      	cmp	r3, r2
 8002924:	f200 80c6 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002928:	4a6c      	ldr	r2, [pc, #432]	; (8002adc <HAL_TIM_ConfigClockSource+0x218>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f000 80b9 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002930:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <HAL_TIM_ConfigClockSource+0x218>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f200 80be 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002938:	4a69      	ldr	r2, [pc, #420]	; (8002ae0 <HAL_TIM_ConfigClockSource+0x21c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f000 80b1 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002940:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f200 80b6 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002948:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <HAL_TIM_ConfigClockSource+0x220>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f000 80a9 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002950:	4a64      	ldr	r2, [pc, #400]	; (8002ae4 <HAL_TIM_ConfigClockSource+0x220>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f200 80ae 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_TIM_ConfigClockSource+0x224>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f000 80a1 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002960:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_TIM_ConfigClockSource+0x224>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f200 80a6 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002968:	4a60      	ldr	r2, [pc, #384]	; (8002aec <HAL_TIM_ConfigClockSource+0x228>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f000 8099 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002970:	4a5e      	ldr	r2, [pc, #376]	; (8002aec <HAL_TIM_ConfigClockSource+0x228>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f200 809e 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800297c:	f000 8091 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002984:	f200 8096 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298c:	f000 8089 	beq.w	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 8002990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002994:	f200 808e 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299c:	d03e      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0x158>
 800299e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a2:	f200 8087 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	f000 8086 	beq.w	8002aba <HAL_TIM_ConfigClockSource+0x1f6>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	d87f      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029b4:	2b70      	cmp	r3, #112	; 0x70
 80029b6:	d01a      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x12a>
 80029b8:	2b70      	cmp	r3, #112	; 0x70
 80029ba:	d87b      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029bc:	2b60      	cmp	r3, #96	; 0x60
 80029be:	d050      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x19e>
 80029c0:	2b60      	cmp	r3, #96	; 0x60
 80029c2:	d877      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029c4:	2b50      	cmp	r3, #80	; 0x50
 80029c6:	d03c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x17e>
 80029c8:	2b50      	cmp	r3, #80	; 0x50
 80029ca:	d873      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d058      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x1be>
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d86f      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d064      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 80029d8:	2b30      	cmp	r3, #48	; 0x30
 80029da:	d86b      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d060      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d867      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05c      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d05a      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x1de>
 80029ec:	e062      	b.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029fe:	f000 fdc1 	bl	8003584 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	609a      	str	r2, [r3, #8]
      break;
 8002a1a:	e04f      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a2c:	f000 fdaa 	bl	8003584 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a3e:	609a      	str	r2, [r3, #8]
      break;
 8002a40:	e03c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 fd1c 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2150      	movs	r1, #80	; 0x50
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd75 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002a60:	e02c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 fd3b 	bl	80034ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2160      	movs	r1, #96	; 0x60
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd65 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002a80:	e01c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f000 fcfc 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2140      	movs	r1, #64	; 0x40
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fd55 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002aa0:	e00c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f000 fd4c 	bl	800354a <TIM_ITRx_SetConfig>
      break;
 8002ab2:	e003      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e000      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00100070 	.word	0x00100070
 8002adc:	00100060 	.word	0x00100060
 8002ae0:	00100050 	.word	0x00100050
 8002ae4:	00100040 	.word	0x00100040
 8002ae8:	00100030 	.word	0x00100030
 8002aec:	00100020 	.word	0x00100020

08002af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b52:	e02a      	b.n	8002baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d107      	bne.n	8002b6e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6c:	e01d      	b.n	8002baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b86:	e010      	b.n	8002baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d107      	bne.n	8002ba2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2208      	movs	r2, #8
 8002b96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ba0:	e003      	b.n	8002baa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ffb4 	bl	8002b18 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	771a      	strb	r2, [r3, #28]
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10b      	bne.n	8002bee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d136      	bne.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bec:	e031      	b.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10b      	bne.n	8002c10 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d125      	bne.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0e:	e020      	b.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10b      	bne.n	8002c32 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d114      	bne.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	e00f      	b.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10a      	bne.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2208      	movs	r2, #8
 8002c40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff4c 	bl	8002af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	771a      	strb	r2, [r3, #28]
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d103      	bne.n	8002c86 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	771a      	strb	r2, [r3, #28]
 8002c84:	e019      	b.n	8002cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d103      	bne.n	8002c98 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2202      	movs	r2, #2
 8002c94:	771a      	strb	r2, [r3, #28]
 8002c96:	e010      	b.n	8002cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d103      	bne.n	8002caa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	771a      	strb	r2, [r3, #28]
 8002ca8:	e007      	b.n	8002cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d102      	bne.n	8002cba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff ff22 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <TIM_Base_SetConfig+0x144>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d017      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d013      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a49      	ldr	r2, [pc, #292]	; (8002e18 <TIM_Base_SetConfig+0x148>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00f      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a48      	ldr	r2, [pc, #288]	; (8002e1c <TIM_Base_SetConfig+0x14c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a47      	ldr	r2, [pc, #284]	; (8002e20 <TIM_Base_SetConfig+0x150>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a46      	ldr	r2, [pc, #280]	; (8002e24 <TIM_Base_SetConfig+0x154>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_Base_SetConfig+0x48>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a45      	ldr	r2, [pc, #276]	; (8002e28 <TIM_Base_SetConfig+0x158>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d108      	bne.n	8002d2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <TIM_Base_SetConfig+0x144>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d023      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d01f      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a36      	ldr	r2, [pc, #216]	; (8002e18 <TIM_Base_SetConfig+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01b      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <TIM_Base_SetConfig+0x14c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d017      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <TIM_Base_SetConfig+0x150>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <TIM_Base_SetConfig+0x154>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00f      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <TIM_Base_SetConfig+0x15c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <TIM_Base_SetConfig+0x160>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <TIM_Base_SetConfig+0x164>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	; (8002e28 <TIM_Base_SetConfig+0x158>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <TIM_Base_SetConfig+0x144>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <TIM_Base_SetConfig+0x110>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <TIM_Base_SetConfig+0x154>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0x110>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <TIM_Base_SetConfig+0x15c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0x110>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <TIM_Base_SetConfig+0x160>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x110>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <TIM_Base_SetConfig+0x164>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x110>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <TIM_Base_SetConfig+0x158>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f023 0201 	bic.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
  }
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40015000 	.word	0x40015000
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800

08002e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 0201 	bic.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <TIM_OC1_SetConfig+0x11c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x88>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <TIM_OC1_SetConfig+0x120>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x88>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <TIM_OC1_SetConfig+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x88>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <TIM_OC1_SetConfig+0x128>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d007      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x88>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <TIM_OC1_SetConfig+0x12c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x88>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <TIM_OC1_SetConfig+0x130>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0308 	bic.w	r3, r3, #8
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_OC1_SetConfig+0x11c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <TIM_OC1_SetConfig+0xd2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <TIM_OC1_SetConfig+0x120>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00f      	beq.n	8002f0a <TIM_OC1_SetConfig+0xd2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <TIM_OC1_SetConfig+0x124>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_OC1_SetConfig+0xd2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <TIM_OC1_SetConfig+0x128>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_OC1_SetConfig+0xd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_OC1_SetConfig+0x12c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_OC1_SetConfig+0xd2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_OC1_SetConfig+0x130>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	621a      	str	r2, [r3, #32]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40013400 	.word	0x40013400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40015000 	.word	0x40015000

08002f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 0210 	bic.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0320 	bic.w	r3, r3, #32
 8002fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a2c      	ldr	r2, [pc, #176]	; (800307c <TIM_OC2_SetConfig+0x110>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_OC2_SetConfig+0x74>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <TIM_OC2_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_OC2_SetConfig+0x74>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <TIM_OC2_SetConfig+0x118>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10d      	bne.n	8002ffc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <TIM_OC2_SetConfig+0x110>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <TIM_OC2_SetConfig+0xc0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <TIM_OC2_SetConfig+0x114>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00f      	beq.n	800302c <TIM_OC2_SetConfig+0xc0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <TIM_OC2_SetConfig+0x11c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00b      	beq.n	800302c <TIM_OC2_SetConfig+0xc0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <TIM_OC2_SetConfig+0x120>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_OC2_SetConfig+0xc0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <TIM_OC2_SetConfig+0x124>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_OC2_SetConfig+0xc0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <TIM_OC2_SetConfig+0x118>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d113      	bne.n	8003054 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40015000 	.word	0x40015000
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800

08003094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <TIM_OC3_SetConfig+0x10c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_OC3_SetConfig+0x72>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_OC3_SetConfig+0x110>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_OC3_SetConfig+0x72>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <TIM_OC3_SetConfig+0x114>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10d      	bne.n	8003122 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800310c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <TIM_OC3_SetConfig+0x10c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <TIM_OC3_SetConfig+0xbe>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <TIM_OC3_SetConfig+0x110>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_OC3_SetConfig+0xbe>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <TIM_OC3_SetConfig+0x118>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_OC3_SetConfig+0xbe>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <TIM_OC3_SetConfig+0x11c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_OC3_SetConfig+0xbe>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <TIM_OC3_SetConfig+0x120>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_OC3_SetConfig+0xbe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <TIM_OC3_SetConfig+0x114>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d113      	bne.n	800317a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40013400 	.word	0x40013400
 80031a8:	40015000 	.word	0x40015000
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40014400 	.word	0x40014400
 80031b4:	40014800 	.word	0x40014800

080031b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	031b      	lsls	r3, r3, #12
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <TIM_OC4_SetConfig+0x110>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_OC4_SetConfig+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <TIM_OC4_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_OC4_SetConfig+0x74>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <TIM_OC4_SetConfig+0x118>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10d      	bne.n	8003248 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	031b      	lsls	r3, r3, #12
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <TIM_OC4_SetConfig+0x110>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <TIM_OC4_SetConfig+0xc0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <TIM_OC4_SetConfig+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00f      	beq.n	8003278 <TIM_OC4_SetConfig+0xc0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <TIM_OC4_SetConfig+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_OC4_SetConfig+0xc0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <TIM_OC4_SetConfig+0x120>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_OC4_SetConfig+0xc0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <TIM_OC4_SetConfig+0x124>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_OC4_SetConfig+0xc0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <TIM_OC4_SetConfig+0x118>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d113      	bne.n	80032a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003286:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40015000 	.word	0x40015000
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <TIM_OC5_SetConfig+0xbc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <TIM_OC5_SetConfig+0x82>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <TIM_OC5_SetConfig+0xc0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_OC5_SetConfig+0x82>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <TIM_OC5_SetConfig+0xc4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_OC5_SetConfig+0x82>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <TIM_OC5_SetConfig+0xc8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_OC5_SetConfig+0x82>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <TIM_OC5_SetConfig+0xcc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_OC5_SetConfig+0x82>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <TIM_OC5_SetConfig+0xd0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d109      	bne.n	8003376 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40013400 	.word	0x40013400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40015000 	.word	0x40015000

080033b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	051b      	lsls	r3, r3, #20
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <TIM_OC6_SetConfig+0xc0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_OC6_SetConfig+0x84>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a19      	ldr	r2, [pc, #100]	; (8003478 <TIM_OC6_SetConfig+0xc4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00f      	beq.n	8003438 <TIM_OC6_SetConfig+0x84>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <TIM_OC6_SetConfig+0xc8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_OC6_SetConfig+0x84>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a17      	ldr	r2, [pc, #92]	; (8003480 <TIM_OC6_SetConfig+0xcc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_OC6_SetConfig+0x84>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a16      	ldr	r2, [pc, #88]	; (8003484 <TIM_OC6_SetConfig+0xd0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_OC6_SetConfig+0x84>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <TIM_OC6_SetConfig+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d109      	bne.n	800344c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40013400 	.word	0x40013400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800
 8003488:	40015000 	.word	0x40015000

0800348c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f023 0210 	bic.w	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	031b      	lsls	r3, r3, #12
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003526:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 0307 	orr.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2201      	movs	r2, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e074      	b.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a33      	ldr	r2, [pc, #204]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800366c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a21      	ldr	r2, [pc, #132]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d01d      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10c      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40013400 	.word	0x40013400
 8003728:	40015000 	.word	0x40015000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000

0800373c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003754:	2302      	movs	r3, #2
 8003756:	e078      	b.n	800384a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d11c      	bne.n	8003838 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	051b      	lsls	r3, r3, #20
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40015000 	.word	0x40015000

08003864 <memset>:
 8003864:	4402      	add	r2, r0
 8003866:	4603      	mov	r3, r0
 8003868:	4293      	cmp	r3, r2
 800386a:	d100      	bne.n	800386e <memset+0xa>
 800386c:	4770      	bx	lr
 800386e:	f803 1b01 	strb.w	r1, [r3], #1
 8003872:	e7f9      	b.n	8003868 <memset+0x4>

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4d0d      	ldr	r5, [pc, #52]	; (80038ac <__libc_init_array+0x38>)
 8003878:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	2600      	movs	r6, #0
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	4d0b      	ldr	r5, [pc, #44]	; (80038b4 <__libc_init_array+0x40>)
 8003886:	4c0c      	ldr	r4, [pc, #48]	; (80038b8 <__libc_init_array+0x44>)
 8003888:	f000 f818 	bl	80038bc <_init>
 800388c:	1b64      	subs	r4, r4, r5
 800388e:	10a4      	asrs	r4, r4, #2
 8003890:	2600      	movs	r6, #0
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	080038e4 	.word	0x080038e4
 80038b0:	080038e4 	.word	0x080038e4
 80038b4:	080038e4 	.word	0x080038e4
 80038b8:	080038e8 	.word	0x080038e8

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
