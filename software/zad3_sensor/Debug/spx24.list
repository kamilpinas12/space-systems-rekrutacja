
spx24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b38  08005b38  00015b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08005be4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005be4  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122e1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027dd  00000000  00000000  000323b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00034b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d35  00000000  00000000  00035cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ef1  00000000  00000000  00036a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136f3  00000000  00000000  0005e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010bd0e  00000000  00000000  00071fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f4c  00000000  00000000  0017dcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00182c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b1c 	.word	0x08005b1c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08005b1c 	.word	0x08005b1c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fac7 	bl	800518c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c6a:	f000 fe61 	bl	8001930 <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c74:	f000 f996 	bl	8000fa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000c84:	f002 f918 	bl	8002eb8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c8e:	f000 f989 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_ADC1_Init+0xec>)
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	2306      	movs	r3, #6
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9e:	237f      	movs	r3, #127	; 0x7f
 8000ca0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_ADC1_Init+0xe8>)
 8000cb0:	f001 fbd4 	bl	800245c <HAL_ADC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cba:	f000 f973 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000078 	.word	0x20000078
 8000ccc:	04300002 	.word	0x04300002

08000cd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09e      	sub	sp, #120	; 0x78
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2254      	movs	r2, #84	; 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fa4b 	bl	800518c <memset>
  if(adcHandle->Instance==ADC1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfe:	d13c      	bne.n	8000d7a <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fa35 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d1c:	f000 f942 	bl	8000fa4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_ADC_MspInit+0xb4>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d50:	2301      	movs	r3, #1
 8000d52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f002 fabf 	bl	80032e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2012      	movs	r0, #18
 8000d70:	f002 fa85 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d74:	2012      	movs	r0, #18
 8000d76:	f002 fa9c 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3778      	adds	r7, #120	; 0x78
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000

08000d88 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_GPIO_Init+0x88>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <MX_GPIO_Init+0x88>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_GPIO_Init+0x88>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL0_Pin|CTRL1_Pin|TRG_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2138      	movs	r1, #56	; 0x38
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f002 fc16 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CTRL0_Pin|CTRL1_Pin|TRG_Pin;
 8000dc0:	2338      	movs	r3, #56	; 0x38
 8000dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f002 fa86 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DR_Pin;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DR_GPIO_Port, &GPIO_InitStruct);
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f002 fa79 	bl	80032e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2017      	movs	r0, #23
 8000dfc:	f002 fa3f 	bl	800327e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e00:	2017      	movs	r0, #23
 8000e02:	f002 fa56 	bl	80032b2 <HAL_NVIC_EnableIRQ>

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_ADC_ConvCpltCallback>:
volatile int spx_adc_val;



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	// set spx_data_ready flag to 1 when adc finishes measuring
	if(hadc == &hadc1){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d10c      	bne.n	8000e3e <HAL_ADC_ConvCpltCallback+0x2a>
		spx_adc_val = HAL_ADC_GetValue(&hadc1);
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x34>)
 8000e26:	f001 f897 	bl	8001f58 <HAL_ADC_GetValue>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x38>)
 8000e30:	601a      	str	r2, [r3, #0]
		spx_data_ready = 1;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
		spx_busy = 0;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	}
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000078 	.word	0x20000078
 8000e4c:	200000e4 	.word	0x200000e4
 8000e50:	200000e8 	.word	0x200000e8
 8000e54:	200000e9 	.word	0x200000e9

08000e58 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	// start ADC when spx data is ready (rising edge on DR pin)
	if (GPIO_Pin == DR_Pin) {
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d102      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x20>)
 8000e6a:	f000 ff1d 	bl	8001ca8 <HAL_ADC_Start_IT>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000078 	.word	0x20000078

08000e7c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	//after 13ms stop the timer and reset the spx TRG pin
	if(htim == &htim15){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d108      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_WritePin(TRG_GPIO_Port, TRG_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f002 fbaa 	bl	80035ec <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim15);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e9a:	f003 fc8f 	bl	80047bc <HAL_TIM_Base_Stop_IT>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000ec 	.word	0x200000ec

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fa8c 	bl	80013ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f829 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f7ff ff65 	bl	8000d88 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ebe:	f7ff fe8f 	bl	8000be0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000ec2:	f000 f9e3 	bl	800128c <MX_TIM15_Init>


  while (1)
  {
	  // if spx isn't busy start measurement
	  if(!spx_busy){
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <main+0x54>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f083 0301 	eor.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <main+0x30>
		  spx_measure(temperature);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 f86a 	bl	8000fb0 <spx_measure>
	  }

	  //get adc value if spx_data_ready flag is 1
	  if(spx_data_ready){
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <main+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0ef      	beq.n	8000ec6 <main+0x1a>
		  result = convert_adc_to_soil_parameter(temperature, spx_adc_val);
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <main+0x5c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	2002      	movs	r0, #2
 8000eee:	f000 f8bf 	bl	8001070 <convert_adc_to_soil_parameter>
 8000ef2:	ed87 0a01 	vstr	s0, [r7, #4]
		  spx_data_ready = 0;
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <main+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	  if(!spx_busy){
 8000efc:	e7e3      	b.n	8000ec6 <main+0x1a>
 8000efe:	bf00      	nop
 8000f00:	200000e9 	.word	0x200000e9
 8000f04:	200000e8 	.word	0x200000e8
 8000f08:	200000e4 	.word	0x200000e4

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	2238      	movs	r2, #56	; 0x38
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 f936 	bl	800518c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f32:	f002 fb8b 	bl	800364c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000f50:	234b      	movs	r3, #75	; 0x4b
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fc15 	bl	8003794 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f70:	f000 f818 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 ff13 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f98:	f000 f804 	bl	8000fa4 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3750      	adds	r7, #80	; 0x50
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <spx_measure>:
volatile bool spx_data_ready = 0;
volatile bool spx_busy = 0;



spx_status_typedef spx_measure(soil_parameter_typedef soil_parameter){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	if(spx_busy) return spx24_busy;
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <spx_measure+0xb4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <spx_measure+0x18>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e049      	b.n	800105c <spx_measure+0xac>

	spx_data_ready = 0;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <spx_measure+0xb8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
	spx_busy = 1;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <spx_measure+0xb4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]

	//set CTRL0 and CTRL1 depends on soil parameter
	switch(soil_parameter){
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d020      	beq.n	800101c <spx_measure+0x6c>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc2b      	bgt.n	8001036 <spx_measure+0x86>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <spx_measure+0x38>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d00d      	beq.n	8001002 <spx_measure+0x52>
 8000fe6:	e026      	b.n	8001036 <spx_measure+0x86>
		case moisture:
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2108      	movs	r1, #8
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f002 fafc 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f002 faf6 	bl	80035ec <HAL_GPIO_WritePin>
			break;
 8001000:	e019      	b.n	8001036 <spx_measure+0x86>
		case pH:
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2108      	movs	r1, #8
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f002 faef 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2108      	movs	r1, #8
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f002 fae9 	bl	80035ec <HAL_GPIO_WritePin>
			break;
 800101a:	e00c      	b.n	8001036 <spx_measure+0x86>
		case temperature:
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2108      	movs	r1, #8
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f002 fae2 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CTRL0_GPIO_Port, CTRL0_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2108      	movs	r1, #8
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f002 fadc 	bl	80035ec <HAL_GPIO_WritePin>
			break;
 8001034:	bf00      	nop
	}

	// set TRG to high then start timer then reset TRG in timer interrupt after 13 ms (min time = 10ms)
	HAL_GPIO_WritePin(TRG_GPIO_Port, TRG_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2120      	movs	r1, #32
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f002 fad5 	bl	80035ec <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim15, 0);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <spx_measure+0xbc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_IT(&htim15 ,TIM_IT_UPDATE);
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <spx_measure+0xbc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f06f 0201 	mvn.w	r2, #1
 8001052:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim15);
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <spx_measure+0xbc>)
 8001056:	f003 fb39 	bl	80046cc <HAL_TIM_Base_Start_IT>

	return spx24_ok;
 800105a:	2301      	movs	r3, #1

}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000e9 	.word	0x200000e9
 8001068:	200000e8 	.word	0x200000e8
 800106c:	200000ec 	.word	0x200000ec

08001070 <convert_adc_to_soil_parameter>:




float convert_adc_to_soil_parameter(soil_parameter_typedef soil_parameter, uint32_t adc_val){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
	float voltage = V_CC * adc_val / 4096.0f;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001086:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001180 <convert_adc_to_soil_parameter+0x110>
 800108a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800108e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001184 <convert_adc_to_soil_parameter+0x114>
 8001092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001096:	edc7 7a02 	vstr	s15, [r7, #8]
	float result = 0;
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

	switch(soil_parameter){
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d039      	beq.n	800111a <convert_adc_to_soil_parameter+0xaa>
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dc58      	bgt.n	800115c <convert_adc_to_soil_parameter+0xec>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <convert_adc_to_soil_parameter+0x44>
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d010      	beq.n	80010d4 <convert_adc_to_soil_parameter+0x64>
 80010b2:	e053      	b.n	800115c <convert_adc_to_soil_parameter+0xec>
	case moisture:
		result = ((voltage - V_MIN)/(V_MAX - V_MIN)) * (THETA_MAX - THETA_MIN) + THETA_MIN;
 80010b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010b8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001180 <convert_adc_to_soil_parameter+0x110>
 80010bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001188 <convert_adc_to_soil_parameter+0x118>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800118c <convert_adc_to_soil_parameter+0x11c>
 80010cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d0:	edc7 7a03 	vstr	s15, [r7, #12]

	case pH:
		result = pH_REF + log10(voltage / V_REF);
 80010d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001180 <convert_adc_to_soil_parameter+0x110>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010e8:	ee16 0a90 	vmov	r0, s13
 80010ec:	f7ff f9f8 	bl	80004e0 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	ec43 2b10 	vmov	d0, r2, r3
 80010f8:	f004 f8c2 	bl	8005280 <log10>
 80010fc:	ec51 0b10 	vmov	r0, r1, d0
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <convert_adc_to_soil_parameter+0x120>)
 8001106:	f7ff f88d 	bl	8000224 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd15 	bl	8000b40 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]

	case temperature:
		result = T0 * exp(K * (voltage - V0));
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f7ff f9e0 	bl	80004e0 <__aeabi_f2d>
 8001120:	a313      	add	r3, pc, #76	; (adr r3, 8001170 <convert_adc_to_soil_parameter+0x100>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa33 	bl	8000590 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	f004 f859 	bl	80051f0 <exp>
 800113e:	ec51 0b10 	vmov	r0, r1, d0
 8001142:	a30d      	add	r3, pc, #52	; (adr r3, 8001178 <convert_adc_to_soil_parameter+0x108>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa22 	bl	8000590 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fcf4 	bl	8000b40 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]

	}
	return result;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	ee07 3a90 	vmov	s15, r3


}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	f3af 8000 	nop.w
 8001170:	3b012ce8 	.word	0x3b012ce8
 8001174:	3fb364d9 	.word	0x3fb364d9
 8001178:	00000000 	.word	0x00000000
 800117c:	40711000 	.word	0x40711000
 8001180:	40533333 	.word	0x40533333
 8001184:	45800000 	.word	0x45800000
 8001188:	42c80000 	.word	0x42c80000
 800118c:	00000000 	.word	0x00000000
 8001190:	401c0000 	.word	0x401c0000

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f924 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <ADC1_2_IRQHandler+0x10>)
 8001236:	f000 fe9d 	bl	8001f74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000078 	.word	0x20000078

08001244 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DR_Pin);
 8001248:	2040      	movs	r0, #64	; 0x40
 800124a:	f002 f9e7 	bl	800361c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800125a:	f003 fade 	bl	800481a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000ec 	.word	0x200000ec

08001268 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <MX_TIM15_Init+0xa0>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 14999;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012b2:	f643 2297 	movw	r2, #14999	; 0x3a97
 80012b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 129;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012c0:	2281      	movs	r2, #129	; 0x81
 80012c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012d8:	f003 f9a0 	bl	800461c <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f7ff fe5f 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM15_Init+0x9c>)
 80012f4:	f003 fbe0 	bl	8004ab8 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80012fe:	f7ff fe51 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM15_Init+0x9c>)
 8001310:	f003 fe60 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800131a:	f7ff fe43 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000ec 	.word	0x200000ec
 800132c:	40014000 	.word	0x40014000

08001330 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_TIM_Base_MspInit+0x44>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d113      	bne.n	800136a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_TIM_Base_MspInit+0x48>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2018      	movs	r0, #24
 8001360:	f001 ff8d 	bl	800327e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001364:	2018      	movs	r0, #24
 8001366:	f001 ffa4 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40014000 	.word	0x40014000
 8001378:	40021000 	.word	0x40021000

0800137c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff ff72 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	; (80013bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <LoopForever+0xe>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	; (80013c8 <LoopForever+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fefd 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ae:	f7ff fd7d 	bl	8000eac <main>

080013b2 <LoopForever>:

LoopForever:
    b LoopForever
 80013b2:	e7fe      	b.n	80013b2 <LoopForever>
  ldr   r0, =_estack
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013c0:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 80013c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013c8:	20000274 	.word	0x20000274

080013cc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC3_IRQHandler>

080013ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f001 ff45 	bl	8003268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f80e 	bl	8001400 <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	e001      	b.n	80013f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f0:	f7ff fed0 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f4:	79fb      	ldrb	r3, [r7, #7]

}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_InitTick+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d022      	beq.n	800145a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_InitTick+0x6c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_InitTick+0x68>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff50 	bl	80032ce <HAL_SYSTICK_Config>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d809      	bhi.n	800144e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	2200      	movs	r2, #0
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f001 ff1c 	bl	800327e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0x70>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e007      	b.n	800145e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e001      	b.n	800145e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x1c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x20>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x1c>)
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000138 	.word	0x20000138
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000138 	.word	0x20000138

080014b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3360      	adds	r3, #96	; 0x60
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <LL_ADC_SetOffset+0x44>)
 800153a:	4013      	ands	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	4313      	orrs	r3, r2
 8001548:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	03fff000 	.word	0x03fff000

08001560 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3360      	adds	r3, #96	; 0x60
 800156e:	461a      	mov	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3360      	adds	r3, #96	; 0x60
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b087      	sub	sp, #28
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3360      	adds	r3, #96	; 0x60
 80015d2:	461a      	mov	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3360      	adds	r3, #96	; 0x60
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	615a      	str	r2, [r3, #20]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3330      	adds	r3, #48	; 0x30
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	211f      	movs	r1, #31
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0e9b      	lsrs	r3, r3, #26
 80016b2:	f003 011f 	and.w	r1, r3, #31
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3314      	adds	r3, #20
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	0e5b      	lsrs	r3, r3, #25
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0d1b      	lsrs	r3, r3, #20
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2107      	movs	r1, #7
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	0d1b      	lsrs	r3, r3, #20
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0318 	and.w	r3, r3, #24
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001774:	40d9      	lsrs	r1, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	400b      	ands	r3, r1
 800177a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	0007ffff 	.word	0x0007ffff

08001798 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 031f 	and.w	r3, r3, #31
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6093      	str	r3, [r2, #8]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800182c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001858:	d101      	bne.n	800185e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800187c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <LL_ADC_IsEnabled+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_IsEnabled+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ce:	f043 0204 	orr.w	r2, r3, #4
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d101      	bne.n	80018fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b08      	cmp	r3, #8
 800191a:	d101      	bne.n	8001920 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1a9      	b.n	8001c9e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff f9b9 	bl	8000cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff3f 	bl	80017f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff25 	bl	80017d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff5a 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff3e 	bl	800181c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a0:	4b9c      	ldr	r3, [pc, #624]	; (8001c14 <HAL_ADC_Init+0x2e4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	4a9c      	ldr	r2, [pc, #624]	; (8001c18 <HAL_ADC_Init+0x2e8>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff3c 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff75 	bl	80018e2 <LL_ADC_REG_IsConversionOngoing>
 80019f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8142 	bne.w	8001c8c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 813e 	bne.w	8001c8c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff35 	bl	8001894 <LL_ADC_IsEnabled>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d141      	bne.n	8001ab4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a38:	d004      	beq.n	8001a44 <HAL_ADC_Init+0x114>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	; (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10f      	bne.n	8001a64 <HAL_ADC_Init+0x134>
 8001a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a48:	f7ff ff24 	bl	8001894 <LL_ADC_IsEnabled>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	4873      	ldr	r0, [pc, #460]	; (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a50:	f7ff ff20 	bl	8001894 <LL_ADC_IsEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4323      	orrs	r3, r4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e012      	b.n	8001a8a <HAL_ADC_Init+0x15a>
 8001a64:	486e      	ldr	r0, [pc, #440]	; (8001c20 <HAL_ADC_Init+0x2f0>)
 8001a66:	f7ff ff15 	bl	8001894 <LL_ADC_IsEnabled>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	486d      	ldr	r0, [pc, #436]	; (8001c24 <HAL_ADC_Init+0x2f4>)
 8001a6e:	f7ff ff11 	bl	8001894 <LL_ADC_IsEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	431c      	orrs	r4, r3
 8001a76:	486c      	ldr	r0, [pc, #432]	; (8001c28 <HAL_ADC_Init+0x2f8>)
 8001a78:	f7ff ff0c 	bl	8001894 <LL_ADC_IsEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_Init+0x172>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5f      	ldr	r2, [pc, #380]	; (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x176>
 8001aa2:	4a62      	ldr	r2, [pc, #392]	; (8001c2c <HAL_ADC_Init+0x2fc>)
 8001aa4:	e000      	b.n	8001aa8 <HAL_ADC_Init+0x178>
 8001aa6:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <HAL_ADC_Init+0x300>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f7ff fcfe 	bl	80014b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7f5b      	ldrb	r3, [r3, #29]
 8001ab8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001abe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ac4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001aca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	045b      	lsls	r3, r3, #17
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_ADC_Init+0x304>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fee4 	bl	8001908 <LL_ADC_INJ_IsConversionOngoing>
 8001b40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d17f      	bne.n	8001c48 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d17c      	bne.n	8001c48 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b6a:	f023 0302 	bic.w	r3, r3, #2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d017      	beq.n	8001bb0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6911      	ldr	r1, [r2, #16]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bae:	e013      	b.n	8001bd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12a      	bne.n	8001c38 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c04:	430a      	orrs	r2, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	e019      	b.n	8001c48 <HAL_ADC_Init+0x318>
 8001c14:	20000000 	.word	0x20000000
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	50000100 	.word	0x50000100
 8001c20:	50000400 	.word	0x50000400
 8001c24:	50000500 	.word	0x50000500
 8001c28:	50000600 	.word	0x50000600
 8001c2c:	50000300 	.word	0x50000300
 8001c30:	50000700 	.word	0x50000700
 8001c34:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10c      	bne.n	8001c6a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f023 010f 	bic.w	r1, r3, #15
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	e007      	b.n	8001c7a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 020f 	bic.w	r2, r2, #15
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c8a:	e007      	b.n	8001c9c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop

08001ca8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb8:	d004      	beq.n	8001cc4 <HAL_ADC_Start_IT+0x1c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a92      	ldr	r2, [pc, #584]	; (8001f08 <HAL_ADC_Start_IT+0x260>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_Start_IT+0x20>
 8001cc4:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_ADC_Start_IT+0x264>)
 8001cc6:	e000      	b.n	8001cca <HAL_ADC_Start_IT+0x22>
 8001cc8:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_ADC_Start_IT+0x268>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fd64 	bl	8001798 <LL_ADC_GetMultimode>
 8001cd0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fe03 	bl	80018e2 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 8132 	bne.w	8001f48 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Start_IT+0x4a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e12d      	b.n	8001f4e <HAL_ADC_Start_IT+0x2a6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 ffee 	bl	8002cdc <ADC_Enable>
 8001d00:	4603      	mov	r3, r0
 8001d02:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8119 	bne.w	8001f3e <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_ADC_Start_IT+0x260>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d009      	beq.n	8001d3e <HAL_ADC_Start_IT+0x96>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_ADC_Start_IT+0x26c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_Start_IT+0x92>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e003      	b.n	8001d42 <HAL_ADC_Start_IT+0x9a>
 8001d3a:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <HAL_ADC_Start_IT+0x270>)
 8001d3c:	e001      	b.n	8001d42 <HAL_ADC_Start_IT+0x9a>
 8001d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d002      	beq.n	8001d50 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	f023 0206 	bic.w	r2, r3, #6
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	661a      	str	r2, [r3, #96]	; 0x60
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	221c      	movs	r2, #28
 8001d82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 021c 	bic.w	r2, r2, #28
 8001d9a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d108      	bne.n	8001db6 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	605a      	str	r2, [r3, #4]
          break;
 8001db4:	e008      	b.n	8001dc8 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0204 	orr.w	r2, r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
          break;
 8001dc6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0210 	orr.w	r2, r2, #16
 8001dde:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_ADC_Start_IT+0x260>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_ADC_Start_IT+0x156>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_ADC_Start_IT+0x26c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d002      	beq.n	8001dfa <HAL_ADC_Start_IT+0x152>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_Start_IT+0x15a>
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_ADC_Start_IT+0x270>)
 8001dfc:	e001      	b.n	8001e02 <HAL_ADC_Start_IT+0x15a>
 8001dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d008      	beq.n	8001e1c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d002      	beq.n	8001e1c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	d13a      	bne.n	8001e92 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02d      	beq.n	8001e86 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d110      	bne.n	8001e64 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e60:	605a      	str	r2, [r3, #4]
              break;
 8001e62:	e010      	b.n	8001e86 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	605a      	str	r2, [r3, #4]
              break;
 8001e84:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fd15 	bl	80018ba <LL_ADC_REG_StartConversion>
 8001e90:	e05c      	b.n	8001f4c <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_ADC_Start_IT+0x260>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_ADC_Start_IT+0x214>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_ADC_Start_IT+0x26c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d002      	beq.n	8001eb8 <HAL_ADC_Start_IT+0x210>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_Start_IT+0x218>
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_ADC_Start_IT+0x270>)
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Start_IT+0x218>
 8001ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ec0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03e      	beq.n	8001f4c <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11a      	bne.n	8001f1c <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0220 	bic.w	r2, r2, #32
 8001ef4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f04:	605a      	str	r2, [r3, #4]
              break;
 8001f06:	e021      	b.n	8001f4c <HAL_ADC_Start_IT+0x2a4>
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	50000300 	.word	0x50000300
 8001f10:	50000700 	.word	0x50000700
 8001f14:	50000500 	.word	0x50000500
 8001f18:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f2a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0220 	orr.w	r2, r2, #32
 8001f3a:	605a      	str	r2, [r3, #4]
              break;
 8001f3c:	e006      	b.n	8001f4c <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001f46:	e001      	b.n	8001f4c <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f98:	d004      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0x30>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a8e      	ldr	r2, [pc, #568]	; (80021d8 <HAL_ADC_IRQHandler+0x264>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0x34>
 8001fa4:	4b8d      	ldr	r3, [pc, #564]	; (80021dc <HAL_ADC_IRQHandler+0x268>)
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_IRQHandler+0x36>
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <HAL_ADC_IRQHandler+0x26c>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fbf4 	bl	8001798 <LL_ADC_GetMultimode>
 8001fb0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <HAL_ADC_IRQHandler+0x78>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 ff60 	bl	8002ea4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_IRQHandler+0x8c>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8094 	beq.w	8002134 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 808e 	beq.w	8002134 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fb0d 	bl	8001654 <LL_ADC_REG_IsTriggerSourceSWStart>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d072      	beq.n	8002126 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a64      	ldr	r2, [pc, #400]	; (80021d8 <HAL_ADC_IRQHandler+0x264>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_ADC_IRQHandler+0xea>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_ADC_IRQHandler+0x270>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d002      	beq.n	800205a <HAL_ADC_IRQHandler+0xe6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	e003      	b.n	8002062 <HAL_ADC_IRQHandler+0xee>
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_ADC_IRQHandler+0x274>)
 800205c:	e001      	b.n	8002062 <HAL_ADC_IRQHandler+0xee>
 800205e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	d008      	beq.n	800207c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d002      	beq.n	800207c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d104      	bne.n	8002086 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	e014      	b.n	80020b0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <HAL_ADC_IRQHandler+0x264>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x130>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_ADC_IRQHandler+0x270>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x12c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e003      	b.n	80020a8 <HAL_ADC_IRQHandler+0x134>
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_ADC_IRQHandler+0x274>)
 80020a2:	e001      	b.n	80020a8 <HAL_ADC_IRQHandler+0x134>
 80020a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d135      	bne.n	8002126 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d12e      	bne.n	8002126 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fc08 	bl	80018e2 <LL_ADC_REG_IsConversionOngoing>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d11a      	bne.n	800210e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020c 	bic.w	r2, r2, #12
 80020e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c
 800210c:	e00b      	b.n	8002126 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fe74 	bl	8000e14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	220c      	movs	r2, #12
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_ADC_IRQHandler+0x1d4>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80b3 	beq.w	80022ba <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80ad 	beq.w	80022ba <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff faa8 	bl	80016d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002182:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fa63 	bl	8001654 <LL_ADC_REG_IsTriggerSourceSWStart>
 800218e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <HAL_ADC_IRQHandler+0x264>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_ADC_IRQHandler+0x23a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_ADC_IRQHandler+0x270>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d002      	beq.n	80021aa <HAL_ADC_IRQHandler+0x236>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e003      	b.n	80021b2 <HAL_ADC_IRQHandler+0x23e>
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_ADC_IRQHandler+0x274>)
 80021ac:	e001      	b.n	80021b2 <HAL_ADC_IRQHandler+0x23e>
 80021ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d008      	beq.n	80021cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d002      	beq.n	80021cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d10f      	bne.n	80021ec <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	e01f      	b.n	8002216 <HAL_ADC_IRQHandler+0x2a2>
 80021d6:	bf00      	nop
 80021d8:	50000100 	.word	0x50000100
 80021dc:	50000300 	.word	0x50000300
 80021e0:	50000700 	.word	0x50000700
 80021e4:	50000500 	.word	0x50000500
 80021e8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a8b      	ldr	r2, [pc, #556]	; (8002420 <HAL_ADC_IRQHandler+0x4ac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_ADC_IRQHandler+0x296>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a8a      	ldr	r2, [pc, #552]	; (8002424 <HAL_ADC_IRQHandler+0x4b0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d002      	beq.n	8002206 <HAL_ADC_IRQHandler+0x292>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e003      	b.n	800220e <HAL_ADC_IRQHandler+0x29a>
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_ADC_IRQHandler+0x4b4>)
 8002208:	e001      	b.n	800220e <HAL_ADC_IRQHandler+0x29a>
 800220a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800220e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d047      	beq.n	80022ac <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_IRQHandler+0x2c2>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d03f      	beq.n	80022ac <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13a      	bne.n	80022ac <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d133      	bne.n	80022ac <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d12e      	bne.n	80022ac <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fb58 	bl	8001908 <LL_ADC_INJ_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11a      	bne.n	8002294 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800226c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d112      	bne.n	80022ac <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c
 8002292:	e00b      	b.n	80022ac <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	f043 0210 	orr.w	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fdd1 	bl	8002e54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2260      	movs	r2, #96	; 0x60
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d011      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x374>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8aa 	bl	8002434 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_ADC_IRQHandler+0x3a4>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fdb7 	bl	8002e7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_ADC_IRQHandler+0x3d4>
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fda9 	bl	8002e90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d043      	beq.n	80023da <HAL_ADC_IRQHandler+0x466>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03e      	beq.n	80023da <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002364:	2301      	movs	r3, #1
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	e021      	b.n	80023ae <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002378:	d004      	beq.n	8002384 <HAL_ADC_IRQHandler+0x410>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_ADC_IRQHandler+0x4ac>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_ADC_IRQHandler+0x414>
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_ADC_IRQHandler+0x4b8>)
 8002386:	e000      	b.n	800238a <HAL_ADC_IRQHandler+0x416>
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_ADC_IRQHandler+0x4bc>)
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fa12 	bl	80017b4 <LL_ADC_GetMultiDMATransfer>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
 800239a:	e008      	b.n	80023ae <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10e      	bne.n	80023d2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f043 0202 	orr.w	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f83b 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_ADC_IRQHandler+0x4a2>
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0208 	orr.w	r2, r3, #8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fd29 	bl	8002e68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	50000100 	.word	0x50000100
 8002424:	50000500 	.word	0x50000500
 8002428:	50000400 	.word	0x50000400
 800242c:	50000300 	.word	0x50000300
 8002430:	50000700 	.word	0x50000700

08002434 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0b6      	sub	sp, #216	; 0xd8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x24>
 800247a:	2302      	movs	r3, #2
 800247c:	f000 bc13 	b.w	8002ca6 <HAL_ADC_ConfigChannel+0x84a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fa28 	bl	80018e2 <LL_ADC_REG_IsConversionOngoing>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 83f3 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff f8e7 	bl	800167a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa16 	bl	80018e2 <LL_ADC_REG_IsConversionOngoing>
 80024b6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa22 	bl	8001908 <LL_ADC_INJ_IsConversionOngoing>
 80024c4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 81d9 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 81d4 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e4:	d10f      	bne.n	8002506 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7ff f901 	bl	80016f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f895 	bl	800162e <LL_ADC_SetSamplingTimeCommonConfig>
 8002504:	e00e      	b.n	8002524 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	461a      	mov	r2, r3
 8002514:	f7ff f8f0 	bl	80016f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f885 	bl	800162e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d022      	beq.n	800258c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002556:	f7fe ffdf 	bl	8001518 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff f82b 	bl	80015c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x126>
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	e000      	b.n	8002584 <HAL_ADC_ConfigChannel+0x128>
 8002582:	2300      	movs	r3, #0
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff f837 	bl	80015f8 <LL_ADC_SetOffsetSaturation>
 800258a:	e17b      	b.n	8002884 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe ffe4 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x15c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe ffd9 	bl	8001560 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	e01e      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x19a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ffce 	bl	8001560 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e004      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1b2>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	e018      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1e4>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002626:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800262a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ff9d 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe ff81 	bl	8001560 <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_ADC_ConfigChannel+0x222>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe ff76 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	0e9b      	lsrs	r3, r3, #26
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	e01e      	b.n	80026bc <HAL_ADC_ConfigChannel+0x260>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe ff6b 	bl	8001560 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800269c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e004      	b.n	80026ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80026b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x278>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	e018      	b.n	8002706 <HAL_ADC_ConfigChannel+0x2aa>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e004      	b.n	8002706 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe ff3a 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe ff1e 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x2e8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe ff13 	bl	8001560 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	e01e      	b.n	8002782 <HAL_ADC_ConfigChannel+0x326>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe ff08 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800276a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <HAL_ADC_ConfigChannel+0x33e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	e016      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x36c>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e004      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80027be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d106      	bne.n	80027da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fed9 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2103      	movs	r1, #3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe febd 	bl	8001560 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x3aa>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe feb2 	bl	8001560 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	e017      	b.n	8002836 <HAL_ADC_ConfigChannel+0x3da>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fea7 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800282c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_ADC_ConfigChannel+0x3f2>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	e011      	b.n	8002872 <HAL_ADC_ConfigChannel+0x416>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800285c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2103      	movs	r1, #3
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fe84 	bl	800158c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f803 	bl	8001894 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 813d 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7fe ff54 	bl	8001750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4aa2      	ldr	r2, [pc, #648]	; (8002b38 <HAL_ADC_ConfigChannel+0x6dc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 812e 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x480>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e019      	b.n	8002910 <HAL_ADC_ConfigChannel+0x4b4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b09      	cmp	r3, #9
 8002908:	bf94      	ite	ls
 800290a:	2301      	movls	r3, #1
 800290c:	2300      	movhi	r3, #0
 800290e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	2b00      	cmp	r3, #0
 8002912:	d079      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x4d4>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	069b      	lsls	r3, r3, #26
 800292a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292e:	e015      	b.n	800295c <HAL_ADC_ConfigChannel+0x500>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002940:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_ADC_ConfigChannel+0x520>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	e017      	b.n	80029ac <HAL_ADC_ConfigChannel+0x550>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800298a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	ea42 0103 	orr.w	r1, r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x576>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	e018      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x5a8>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a04:	430b      	orrs	r3, r1
 8002a06:	e07e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5c8>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	069b      	lsls	r3, r3, #26
 8002a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a22:	e015      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x5f4>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e003      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x614>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	e017      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x644>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x670>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b1e      	subs	r3, #30
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aca:	e01b      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	613b      	str	r3, [r7, #16]
  return result;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe fdf4 	bl	80016f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_ADC_ConfigChannel+0x6e0>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80be 	beq.w	8002c9a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x6d6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10a      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x6ec>
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b34:	e009      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x6ee>
 8002b36:	bf00      	nop
 8002b38:	407f0000 	.word	0x407f0000
 8002b3c:	80080000 	.word	0x80080000
 8002b40:	50000100 	.word	0x50000100
 8002b44:	50000300 	.word	0x50000300
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fcd6 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 8002b50:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_ADC_ConfigChannel+0x858>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0x70c>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <HAL_ADC_ConfigChannel+0x85c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d13a      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d134      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d005      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x72e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_ADC_ConfigChannel+0x860>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	f040 8085 	bne.w	8002c94 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b92:	d004      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x742>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x746>
 8002b9e:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x748>
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7fe fc91 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_ADC_ConfigChannel+0x86c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	4a44      	ldr	r2, [pc, #272]	; (8002ccc <HAL_ADC_ConfigChannel+0x870>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bce:	e002      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bdc:	e05a      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3b      	ldr	r2, [pc, #236]	; (8002cd0 <HAL_ADC_ConfigChannel+0x874>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d125      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11f      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d104      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x7ac>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_ADC_ConfigChannel+0x878>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d047      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c10:	d004      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7c0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x7c4>
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x7c6>
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7fe fc52 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c32:	e031      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_ADC_ConfigChannel+0x87c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12d      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d127      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x80c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_ADC_ConfigChannel+0x864>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x810>
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_ADC_ConfigChannel+0x868>)
 8002c6a:	e000      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x812>
 8002c6c:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_ADC_ConfigChannel+0x854>)
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fc2c 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
 8002c7e:	e00c      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c92:	e002      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ca2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	37d8      	adds	r7, #216	; 0xd8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	50000700 	.word	0x50000700
 8002cb4:	c3210000 	.word	0xc3210000
 8002cb8:	90c00010 	.word	0x90c00010
 8002cbc:	50000600 	.word	0x50000600
 8002cc0:	50000100 	.word	0x50000100
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	053e2d63 	.word	0x053e2d63
 8002cd0:	c7520000 	.word	0xc7520000
 8002cd4:	50000500 	.word	0x50000500
 8002cd8:	cb840000 	.word	0xcb840000

08002cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe fdd1 	bl	8001894 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d176      	bne.n	8002de6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <ADC_Enable+0x114>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e062      	b.n	8002de8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fda0 	bl	800186c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d34:	d004      	beq.n	8002d40 <ADC_Enable+0x64>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <ADC_Enable+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <ADC_Enable+0x68>
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <ADC_Enable+0x11c>)
 8002d42:	e000      	b.n	8002d46 <ADC_Enable+0x6a>
 8002d44:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <ADC_Enable+0x120>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fbd8 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 8002d4c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d013      	beq.n	8002d7e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <ADC_Enable+0x124>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <ADC_Enable+0x128>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d70:	e002      	b.n	8002d78 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f9      	bne.n	8002d72 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d7e:	f7fe fb8b 	bl	8001498 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d84:	e028      	b.n	8002dd8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fd82 	bl	8001894 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fd66 	bl	800186c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002da0:	f7fe fb7a 	bl	8001498 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d914      	bls.n	8002dd8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00d      	beq.n	8002dd8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d1cf      	bne.n	8002d86 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	8000003f 	.word	0x8000003f
 8002df4:	50000100 	.word	0x50000100
 8002df8:	50000300 	.word	0x50000300
 8002dfc:	50000700 	.word	0x50000700
 8002e00:	20000000 	.word	0x20000000
 8002e04:	053e2d63 	.word	0x053e2d63

08002e08 <LL_ADC_IsEnabled>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <LL_ADC_IsEnabled+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <LL_ADC_IsEnabled+0x1a>
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b0a1      	sub	sp, #132	; 0x84
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0e7      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eee:	d102      	bne.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	e009      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d102      	bne.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f00:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	e001      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0be      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff7f 	bl	8002e2e <LL_ADC_REG_IsConversionOngoing>
 8002f30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff79 	bl	8002e2e <LL_ADC_REG_IsConversionOngoing>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80a0 	bne.w	8003084 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 809c 	bne.w	8003084 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f54:	d004      	beq.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a55      	ldr	r2, [pc, #340]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f64:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d04b      	beq.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f82:	035b      	lsls	r3, r3, #13
 8002f84:	430b      	orrs	r3, r1
 8002f86:	431a      	orrs	r2, r3
 8002f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a45      	ldr	r2, [pc, #276]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10f      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002fa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fa4:	f7ff ff30 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4841      	ldr	r0, [pc, #260]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fac:	f7ff ff2c 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4323      	orrs	r3, r4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e012      	b.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002fc0:	483c      	ldr	r0, [pc, #240]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fc2:	f7ff ff21 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	483b      	ldr	r0, [pc, #236]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fca:	f7ff ff1d 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	431c      	orrs	r4, r3
 8002fd2:	483c      	ldr	r0, [pc, #240]	; (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002fd4:	f7ff ff18 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4323      	orrs	r3, r4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d056      	beq.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ff2:	f023 030f 	bic.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003004:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003006:	e047      	b.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003012:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301c:	d004      	beq.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10f      	bne.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003028:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800302c:	f7ff feec 	bl	8002e08 <LL_ADC_IsEnabled>
 8003030:	4604      	mov	r4, r0
 8003032:	481f      	ldr	r0, [pc, #124]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003034:	f7ff fee8 	bl	8002e08 <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	4323      	orrs	r3, r4
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e012      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003048:	481a      	ldr	r0, [pc, #104]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800304a:	f7ff fedd 	bl	8002e08 <LL_ADC_IsEnabled>
 800304e:	4604      	mov	r4, r0
 8003050:	4819      	ldr	r0, [pc, #100]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003052:	f7ff fed9 	bl	8002e08 <LL_ADC_IsEnabled>
 8003056:	4603      	mov	r3, r0
 8003058:	431c      	orrs	r4, r3
 800305a:	481a      	ldr	r0, [pc, #104]	; (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800305c:	f7ff fed4 	bl	8002e08 <LL_ADC_IsEnabled>
 8003060:	4603      	mov	r3, r0
 8003062:	4323      	orrs	r3, r4
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800307a:	f023 030f 	bic.w	r3, r3, #15
 800307e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003080:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003082:	e009      	b.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003096:	e000      	b.n	800309a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003098:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3784      	adds	r7, #132	; 0x84
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	50000100 	.word	0x50000100
 80030b4:	50000400 	.word	0x50000400
 80030b8:	50000500 	.word	0x50000500
 80030bc:	50000300 	.word	0x50000300
 80030c0:	50000700 	.word	0x50000700
 80030c4:	50000600 	.word	0x50000600

080030c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	60d3      	str	r3, [r2, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_GetPriorityGrouping+0x18>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003234:	d301      	bcc.n	800323a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003236:	2301      	movs	r3, #1
 8003238:	e00f      	b.n	800325a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <SysTick_Config+0x40>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003242:	210f      	movs	r1, #15
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f7ff ff8e 	bl	8003168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <SysTick_Config+0x40>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <SysTick_Config+0x40>)
 8003254:	2207      	movs	r2, #7
 8003256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	e000e010 	.word	0xe000e010

08003268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff29 	bl	80030c8 <__NVIC_SetPriorityGrouping>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff40 	bl	8003110 <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff90 	bl	80031bc <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5f 	bl	8003168 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff33 	bl	800312c <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa4 	bl	8003224 <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032f6:	e15a      	b.n	80035ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 814c 	beq.w	80035a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d005      	beq.n	8003328 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003324:	2b02      	cmp	r3, #2
 8003326:	d130      	bne.n	800338a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335e:	2201      	movs	r2, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0201 	and.w	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b03      	cmp	r3, #3
 8003394:	d017      	beq.n	80033c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d123      	bne.n	800341a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	6939      	ldr	r1, [r7, #16]
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0203 	and.w	r2, r3, #3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a6 	beq.w	80035a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345c:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_GPIO_Init+0x2e4>)
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_GPIO_Init+0x2e4>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6613      	str	r3, [r2, #96]	; 0x60
 8003468:	4b58      	ldr	r3, [pc, #352]	; (80035cc <HAL_GPIO_Init+0x2e4>)
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003474:	4a56      	ldr	r2, [pc, #344]	; (80035d0 <HAL_GPIO_Init+0x2e8>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800349e:	d01f      	beq.n	80034e0 <HAL_GPIO_Init+0x1f8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <HAL_GPIO_Init+0x2ec>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d019      	beq.n	80034dc <HAL_GPIO_Init+0x1f4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a4b      	ldr	r2, [pc, #300]	; (80035d8 <HAL_GPIO_Init+0x2f0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_GPIO_Init+0x1f0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <HAL_GPIO_Init+0x2f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00d      	beq.n	80034d4 <HAL_GPIO_Init+0x1ec>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <HAL_GPIO_Init+0x2f8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0x1e8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a48      	ldr	r2, [pc, #288]	; (80035e4 <HAL_GPIO_Init+0x2fc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_GPIO_Init+0x1e4>
 80034c8:	2305      	movs	r3, #5
 80034ca:	e00a      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034cc:	2306      	movs	r3, #6
 80034ce:	e008      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034d0:	2304      	movs	r3, #4
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034d4:	2303      	movs	r3, #3
 80034d6:	e004      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034d8:	2302      	movs	r3, #2
 80034da:	e002      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_GPIO_Init+0x1fa>
 80034e0:	2300      	movs	r3, #0
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	f002 0203 	and.w	r2, r2, #3
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	4093      	lsls	r3, r2
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f2:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_GPIO_Init+0x2e8>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003500:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003524:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800352a:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <HAL_GPIO_Init+0x300>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43db      	mvns	r3, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800354e:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003578:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <HAL_GPIO_Init+0x300>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_GPIO_Init+0x300>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_GPIO_Init+0x300>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f ae9d 	bne.w	80032f8 <HAL_GPIO_Init+0x10>
  }
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40010000 	.word	0x40010000
 80035d4:	48000400 	.word	0x48000400
 80035d8:	48000800 	.word	0x48000800
 80035dc:	48000c00 	.word	0x48000c00
 80035e0:	48001000 	.word	0x48001000
 80035e4:	48001400 	.word	0x48001400
 80035e8:	40010400 	.word	0x40010400

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003608:	e002      	b.n	8003610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fc0c 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010400 	.word	0x40010400

0800364c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d141      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d131      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003668:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366e:	4a46      	ldr	r2, [pc, #280]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003680:	4a41      	ldr	r2, [pc, #260]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2232      	movs	r2, #50	; 0x32
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	0c9b      	lsrs	r3, r3, #18
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369e:	e002      	b.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d102      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f2      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ba:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d158      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e057      	b.n	800377c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036d2:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036dc:	e04d      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d141      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d131      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fa:	4a23      	ldr	r2, [pc, #140]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370c:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2232      	movs	r2, #50	; 0x32
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372a:	e002      	b.n	8003732 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d102      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f2      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d112      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003768:	e007      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003778:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40007000 	.word	0x40007000
 800378c:	20000000 	.word	0x20000000
 8003790:	431bde83 	.word	0x431bde83

08003794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e2fe      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4b97      	ldr	r3, [pc, #604]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4b94      	ldr	r3, [pc, #592]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3e>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d002      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e2d9      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a84      	ldr	r2, [pc, #528]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b7f      	ldr	r3, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7e      	ldr	r2, [pc, #504]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7b      	ldr	r2, [pc, #492]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b75      	ldr	r3, [pc, #468]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a74      	ldr	r2, [pc, #464]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fd fe24 	bl	8001498 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fd fe20 	bl	8001498 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e29e      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fe10 	bl	8001498 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd fe0c 	bl	8001498 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e28a      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d075      	beq.n	8003996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b4:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_OscConfig+0x136>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_OscConfig+0x13c>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d11f      	bne.n	8003910 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_OscConfig+0x154>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e25d      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	4946      	ldr	r1, [pc, #280]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038fc:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <HAL_RCC_OscConfig+0x280>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fd7d 	bl	8001400 <HAL_InitTick>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d043      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e249      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd fdb8 	bl	8001498 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392c:	f7fd fdb4 	bl	8001498 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e232      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	492d      	ldr	r1, [pc, #180]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	e01a      	b.n	8003996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fd94 	bl	8001498 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003974:	f7fd fd90 	bl	8001498 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e20e      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x1e0>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d041      	beq.n	8003a26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fd fd6d 	bl	8001498 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fd fd69 	bl	8001498 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1e7      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ef      	beq.n	80039c2 <HAL_RCC_OscConfig+0x22e>
 80039e2:	e020      	b.n	8003a26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd fd50 	bl	8001498 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039fa:	e00d      	b.n	8003a18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fd fd4c 	bl	8001498 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d906      	bls.n	8003a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1ca      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a18:	4b8c      	ldr	r3, [pc, #560]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ea      	bne.n	80039fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80a6 	beq.w	8003b80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a38:	4b84      	ldr	r3, [pc, #528]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2b4>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x2b6>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6a:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x4bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x4bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x4bc>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fd fd09 	bl	8001498 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fd fd05 	bl	8001498 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e183      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x4bc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d108      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x32e>
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a65      	ldr	r2, [pc, #404]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	e024      	b.n	8003b0c <HAL_RCC_OscConfig+0x378>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d110      	bne.n	8003aec <HAL_RCC_OscConfig+0x358>
 8003aca:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aea:	e00f      	b.n	8003b0c <HAL_RCC_OscConfig+0x378>
 8003aec:	4b57      	ldr	r3, [pc, #348]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afc:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d016      	beq.n	8003b42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fcc0 	bl	8001498 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fcbc 	bl	8001498 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e138      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ed      	beq.n	8003b1c <HAL_RCC_OscConfig+0x388>
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fd fca9 	bl	8001498 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fca5 	bl	8001498 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e121      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b60:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ed      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b6e:	7ffb      	ldrb	r3, [r7, #31]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01c      	beq.n	8003bce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fc78 	bl	8001498 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bac:	f7fd fc74 	bl	8001498 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0f2      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ef      	beq.n	8003bac <HAL_RCC_OscConfig+0x418>
 8003bcc:	e01b      	b.n	8003c06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fc5b 	bl	8001498 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003be6:	f7fd fc57 	bl	8001498 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0d5      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ef      	bne.n	8003be6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80c9 	beq.w	8003da2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	f000 8083 	beq.w	8003d24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d15e      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_RCC_OscConfig+0x4b8>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fc31 	bl	8001498 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e00c      	b.n	8003c54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd fc2d 	bl	8001498 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d905      	bls.n	8003c54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0ab      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	4b55      	ldr	r3, [pc, #340]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ec      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b52      	ldr	r3, [pc, #328]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_RCC_OscConfig+0x61c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6a11      	ldr	r1, [r2, #32]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c7a:	0212      	lsls	r2, r2, #8
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0552      	lsls	r2, r2, #21
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0652      	lsls	r2, r2, #25
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9a:	06d2      	lsls	r2, r2, #27
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4943      	ldr	r1, [pc, #268]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a40      	ldr	r2, [pc, #256]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a3d      	ldr	r2, [pc, #244]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fbec 	bl	8001498 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd fbe8 	bl	8001498 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e066      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x530>
 8003ce2:	e05e      	b.n	8003da2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a30      	ldr	r2, [pc, #192]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fbd2 	bl	8001498 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd fbce 	bl	8001498 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04c      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0a:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	4924      	ldr	r1, [pc, #144]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x620>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60cb      	str	r3, [r1, #12]
 8003d22:	e03e      	b.n	8003da2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e039      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d30:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <HAL_RCC_OscConfig+0x618>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d12c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d123      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d11b      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d113      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	019f800c 	.word	0x019f800c
 8003db4:	feeefffc 	.word	0xfeeefffc

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e11e      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b91      	ldr	r3, [pc, #580]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d910      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b8e      	ldr	r3, [pc, #568]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 020f 	bic.w	r2, r3, #15
 8003de6:	498c      	ldr	r1, [pc, #560]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e106      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d073      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d129      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0f4      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e24:	f000 f966 	bl	80040f4 <RCC_GetSysClockFreqFromPLLSource>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4a7c      	ldr	r2, [pc, #496]	; (8004020 <HAL_RCC_ClockConfig+0x268>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d93f      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e32:	4b7a      	ldr	r3, [pc, #488]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d033      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d12f      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e52:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5a:	4a70      	ldr	r2, [pc, #448]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e024      	b.n	8003eb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0c6      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0be      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e90:	f000 f8ce 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_RCC_ClockConfig+0x268>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d909      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea6:	4a5d      	ldr	r2, [pc, #372]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b5a      	ldr	r3, [pc, #360]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4957      	ldr	r1, [pc, #348]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fae8 	bl	8001498 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fd fae4 	bl	8001498 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e095      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b4e      	ldr	r3, [pc, #312]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d023      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f0c:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a42      	ldr	r2, [pc, #264]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f24:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f2c:	4a3b      	ldr	r2, [pc, #236]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4936      	ldr	r1, [pc, #216]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f4e:	4b33      	ldr	r3, [pc, #204]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4a32      	ldr	r2, [pc, #200]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d21d      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f68:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 020f 	bic.w	r2, r3, #15
 8003f70:	4929      	ldr	r1, [pc, #164]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f78:	f7fd fa8e 	bl	8001498 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fd fa8a 	bl	8001498 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e03b      	b.n	800400e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1ed      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4917      	ldr	r1, [pc, #92]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490f      	ldr	r1, [pc, #60]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fe2:	f000 f825 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCC_ClockConfig+0x264>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490c      	ldr	r1, [pc, #48]	; (8004024 <HAL_RCC_ClockConfig+0x26c>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x270>)
 8004000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x274>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd f9fa 	bl	8001400 <HAL_InitTick>
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40022000 	.word	0x40022000
 800401c:	40021000 	.word	0x40021000
 8004020:	04c4b400 	.word	0x04c4b400
 8004024:	08005b38 	.word	0x08005b38
 8004028:	20000000 	.word	0x20000000
 800402c:	20000004 	.word	0x20000004

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d102      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	e047      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d102      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	e03e      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d136      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	3301      	adds	r3, #1
 800407c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d10c      	bne.n	800409e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004084:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408e:	68d2      	ldr	r2, [r2, #12]
 8004090:	0a12      	lsrs	r2, r2, #8
 8004092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
      break;
 800409c:	e00c      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a8:	68d2      	ldr	r2, [r2, #12]
 80040aa:	0a12      	lsrs	r2, r2, #8
 80040ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0e5b      	lsrs	r3, r3, #25
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e001      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040d8:	693b      	ldr	r3, [r7, #16]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	007a1200 	.word	0x007a1200

080040f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d10c      	bne.n	8004132 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004122:	68d2      	ldr	r2, [r2, #12]
 8004124:	0a12      	lsrs	r2, r2, #8
 8004126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	617b      	str	r3, [r7, #20]
    break;
 8004130:	e00c      	b.n	800414c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800413c:	68d2      	ldr	r2, [r2, #12]
 800413e:	0a12      	lsrs	r2, r2, #8
 8004140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]
    break;
 800414a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0e5b      	lsrs	r3, r3, #25
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	3301      	adds	r3, #1
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004166:	687b      	ldr	r3, [r7, #4]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	00f42400 	.word	0x00f42400

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004188:	2300      	movs	r3, #0
 800418a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2300      	movs	r3, #0
 800418e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8098 	beq.w	80042ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	4a3f      	ldr	r2, [pc, #252]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6593      	str	r3, [r2, #88]	; 0x58
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d6:	f7fd f95f 	bl	8001498 <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041dc:	e009      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fd f95b 	bl	8001498 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d902      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	74fb      	strb	r3, [r7, #19]
        break;
 80041f0:	e005      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0ef      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d159      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004204:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01e      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d019      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800423c:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd f91b 	bl	8001498 <HAL_GetTick>
 8004262:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004264:	e00b      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fd f917 	bl	8001498 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d902      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	74fb      	strb	r3, [r7, #19]
            break;
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ec      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
 80042ae:	e005      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042bc:	7c7b      	ldrb	r3, [r7, #17]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4ba7      	ldr	r3, [pc, #668]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	4aa6      	ldr	r2, [pc, #664]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042da:	4ba1      	ldr	r3, [pc, #644]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f023 0203 	bic.w	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	499d      	ldr	r1, [pc, #628]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042fc:	4b98      	ldr	r3, [pc, #608]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 020c 	bic.w	r2, r3, #12
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	4995      	ldr	r1, [pc, #596]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800431e:	4b90      	ldr	r3, [pc, #576]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	498c      	ldr	r1, [pc, #560]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004340:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	4984      	ldr	r1, [pc, #528]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004362:	4b7f      	ldr	r3, [pc, #508]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	497b      	ldr	r1, [pc, #492]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004384:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	4973      	ldr	r1, [pc, #460]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a6:	4b6e      	ldr	r3, [pc, #440]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	496a      	ldr	r1, [pc, #424]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043c8:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4962      	ldr	r1, [pc, #392]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ea:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800440c:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	4951      	ldr	r1, [pc, #324]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442e:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4948      	ldr	r1, [pc, #288]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	4940      	ldr	r1, [pc, #256]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	4932      	ldr	r1, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4924      	ldr	r1, [pc, #144]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	4916      	ldr	r1, [pc, #88]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d019      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004570:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4926      	ldr	r1, [pc, #152]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045a8:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	4918      	ldr	r1, [pc, #96]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045fe:	d105      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800460c:	7cbb      	ldrb	r3, [r7, #18]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e049      	b.n	80046c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fc fe74 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f000 fb6a 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e054      	b.n	800478e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a26      	ldr	r2, [pc, #152]	; (800479c <HAL_TIM_Base_Start_IT+0xd0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d022      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d01d      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d018      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00e      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_TIM_Base_Start_IT+0xe0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x80>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d115      	bne.n	8004778 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_TIM_Base_Start_IT+0xec>)
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d015      	beq.n	800478a <HAL_TIM_Base_Start_IT+0xbe>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d011      	beq.n	800478a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e008      	b.n	800478a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e000      	b.n	800478c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40015000 	.word	0x40015000
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	f241 1311 	movw	r3, #4369	; 0x1111
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <HAL_TIM_Base_Stop_IT+0x48>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	f244 4344 	movw	r3, #17476	; 0x4444
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_Base_Stop_IT+0x48>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01b      	beq.n	800487e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0202 	mvn.w	r2, #2
 800484e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa47 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 800486a:	e005      	b.n	8004878 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa39 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa4a 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01b      	beq.n	80048ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0204 	mvn.w	r2, #4
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fa21 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e005      	b.n	80048c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa13 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa24 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01b      	beq.n	8004916 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0208 	mvn.w	r2, #8
 80048e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2204      	movs	r2, #4
 80048ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9fb 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 8004902:	e005      	b.n	8004910 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9ed 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9fe 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f06f 0210 	mvn.w	r2, #16
 8004932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2208      	movs	r2, #8
 8004938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9d5 	bl	8004cf8 <HAL_TIM_IC_CaptureCallback>
 800494e:	e005      	b.n	800495c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9c7 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9d8 	bl	8004d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0201 	mvn.w	r2, #1
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fc fa7b 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fbb0 	bl	8005114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fba8 	bl	8005128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f992 	bl	8004d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0220 	mvn.w	r2, #32
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fb70 	bl	8005100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fb7c 	bl	800513c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb74 	bl	8005150 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fb6c 	bl	8005164 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb64 	bl	8005178 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e0f6      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x20a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6f      	ldr	r2, [pc, #444]	; (8004ccc <HAL_TIM_ConfigClockSource+0x214>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	f000 80c1 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b14:	4a6d      	ldr	r2, [pc, #436]	; (8004ccc <HAL_TIM_ConfigClockSource+0x214>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	f200 80c6 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b1c:	4a6c      	ldr	r2, [pc, #432]	; (8004cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f000 80b9 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b24:	4a6a      	ldr	r2, [pc, #424]	; (8004cd0 <HAL_TIM_ConfigClockSource+0x218>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f200 80be 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b2c:	4a69      	ldr	r2, [pc, #420]	; (8004cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	f000 80b1 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b34:	4a67      	ldr	r2, [pc, #412]	; (8004cd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	f200 80b6 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b3c:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	f000 80a9 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b44:	4a64      	ldr	r2, [pc, #400]	; (8004cd8 <HAL_TIM_ConfigClockSource+0x220>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f200 80ae 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b4c:	4a63      	ldr	r2, [pc, #396]	; (8004cdc <HAL_TIM_ConfigClockSource+0x224>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 80a1 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b54:	4a61      	ldr	r2, [pc, #388]	; (8004cdc <HAL_TIM_ConfigClockSource+0x224>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f200 80a6 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b5c:	4a60      	ldr	r2, [pc, #384]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f000 8099 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b64:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <HAL_TIM_ConfigClockSource+0x228>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f200 809e 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b70:	f000 8091 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b78:	f200 8096 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b80:	f000 8089 	beq.w	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b88:	f200 808e 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b90:	d03e      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x158>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b96:	f200 8087 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_TIM_ConfigClockSource+0x1f6>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d87f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ba8:	2b70      	cmp	r3, #112	; 0x70
 8004baa:	d01a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x12a>
 8004bac:	2b70      	cmp	r3, #112	; 0x70
 8004bae:	d87b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bb0:	2b60      	cmp	r3, #96	; 0x60
 8004bb2:	d050      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x19e>
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d877      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bb8:	2b50      	cmp	r3, #80	; 0x50
 8004bba:	d03c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0x17e>
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d873      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d058      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x1be>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d86f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d064      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d86b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d060      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d867      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d05a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x1de>
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf2:	f000 f9cf 	bl	8004f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c20:	f000 f9b8 	bl	8004f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e03c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 f92a 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	; 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f983 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 8004c54:	e02c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 f949 	bl	8004efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	; 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f973 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 f90a 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f963 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f95a 	bl	8004f5a <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	00100070 	.word	0x00100070
 8004cd0:	00100060 	.word	0x00100060
 8004cd4:	00100050 	.word	0x00100050
 8004cd8:	00100040 	.word	0x00100040
 8004cdc:	00100030 	.word	0x00100030
 8004ce0:	00100020 	.word	0x00100020

08004ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a4c      	ldr	r2, [pc, #304]	; (8004e78 <TIM_Base_SetConfig+0x144>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d017      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d013      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a49      	ldr	r2, [pc, #292]	; (8004e7c <TIM_Base_SetConfig+0x148>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a48      	ldr	r2, [pc, #288]	; (8004e80 <TIM_Base_SetConfig+0x14c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a47      	ldr	r2, [pc, #284]	; (8004e84 <TIM_Base_SetConfig+0x150>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a46      	ldr	r2, [pc, #280]	; (8004e88 <TIM_Base_SetConfig+0x154>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x48>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a45      	ldr	r2, [pc, #276]	; (8004e8c <TIM_Base_SetConfig+0x158>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a39      	ldr	r2, [pc, #228]	; (8004e78 <TIM_Base_SetConfig+0x144>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d023      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d01f      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a36      	ldr	r2, [pc, #216]	; (8004e7c <TIM_Base_SetConfig+0x148>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a35      	ldr	r2, [pc, #212]	; (8004e80 <TIM_Base_SetConfig+0x14c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <TIM_Base_SetConfig+0x150>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a33      	ldr	r2, [pc, #204]	; (8004e88 <TIM_Base_SetConfig+0x154>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a33      	ldr	r2, [pc, #204]	; (8004e90 <TIM_Base_SetConfig+0x15c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a32      	ldr	r2, [pc, #200]	; (8004e94 <TIM_Base_SetConfig+0x160>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a31      	ldr	r2, [pc, #196]	; (8004e98 <TIM_Base_SetConfig+0x164>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0xaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	; (8004e8c <TIM_Base_SetConfig+0x158>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <TIM_Base_SetConfig+0x144>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <TIM_Base_SetConfig+0x110>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <TIM_Base_SetConfig+0x154>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x110>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <TIM_Base_SetConfig+0x15c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x110>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <TIM_Base_SetConfig+0x160>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x110>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <TIM_Base_SetConfig+0x164>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x110>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <TIM_Base_SetConfig+0x158>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d103      	bne.n	8004e4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d105      	bne.n	8004e6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	611a      	str	r2, [r3, #16]
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40015000 	.word	0x40015000
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800

08004e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 030a 	bic.w	r3, r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f023 0210 	bic.w	r2, r3, #16
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	031b      	lsls	r3, r3, #12
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f043 0307 	orr.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e074      	b.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a34      	ldr	r2, [pc, #208]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a33      	ldr	r2, [pc, #204]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a31      	ldr	r2, [pc, #196]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005030:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d01d      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a11      	ldr	r2, [pc, #68]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10c      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40013400 	.word	0x40013400
 80050ec:	40015000 	.word	0x40015000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <memset>:
 800518c:	4402      	add	r2, r0
 800518e:	4603      	mov	r3, r0
 8005190:	4293      	cmp	r3, r2
 8005192:	d100      	bne.n	8005196 <memset+0xa>
 8005194:	4770      	bx	lr
 8005196:	f803 1b01 	strb.w	r1, [r3], #1
 800519a:	e7f9      	b.n	8005190 <memset+0x4>

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000058 	.word	0x20000058

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 fcae 	bl	8005b1c <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005b80 	.word	0x08005b80
 80051e4:	08005b80 	.word	0x08005b80
 80051e8:	08005b80 	.word	0x08005b80
 80051ec:	08005b84 	.word	0x08005b84

080051f0 <exp>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	ed2d 8b02 	vpush	{d8}
 80051f6:	ec55 4b10 	vmov	r4, r5, d0
 80051fa:	f000 f895 	bl	8005328 <__ieee754_exp>
 80051fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005202:	eef0 8a60 	vmov.f32	s17, s1
 8005206:	ec45 4b10 	vmov	d0, r4, r5
 800520a:	f000 f877 	bl	80052fc <finite>
 800520e:	b168      	cbz	r0, 800522c <exp+0x3c>
 8005210:	a317      	add	r3, pc, #92	; (adr r3, 8005270 <exp+0x80>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb fc49 	bl	8000ab0 <__aeabi_dcmpgt>
 800521e:	b160      	cbz	r0, 800523a <exp+0x4a>
 8005220:	f7ff ffbc 	bl	800519c <__errno>
 8005224:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8005260 <exp+0x70>
 8005228:	2322      	movs	r3, #34	; 0x22
 800522a:	6003      	str	r3, [r0, #0]
 800522c:	eeb0 0a48 	vmov.f32	s0, s16
 8005230:	eef0 0a68 	vmov.f32	s1, s17
 8005234:	ecbd 8b02 	vpop	{d8}
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	a30f      	add	r3, pc, #60	; (adr r3, 8005278 <exp+0x88>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	4620      	mov	r0, r4
 8005242:	4629      	mov	r1, r5
 8005244:	f7fb fc16 	bl	8000a74 <__aeabi_dcmplt>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0ef      	beq.n	800522c <exp+0x3c>
 800524c:	f7ff ffa6 	bl	800519c <__errno>
 8005250:	2322      	movs	r3, #34	; 0x22
 8005252:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8005268 <exp+0x78>
 8005256:	6003      	str	r3, [r0, #0]
 8005258:	e7e8      	b.n	800522c <exp+0x3c>
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w
 8005260:	00000000 	.word	0x00000000
 8005264:	7ff00000 	.word	0x7ff00000
	...
 8005270:	fefa39ef 	.word	0xfefa39ef
 8005274:	40862e42 	.word	0x40862e42
 8005278:	d52d3051 	.word	0xd52d3051
 800527c:	c0874910 	.word	0xc0874910

08005280 <log10>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	ed2d 8b02 	vpush	{d8}
 8005286:	ec55 4b10 	vmov	r4, r5, d0
 800528a:	f000 f9d1 	bl	8005630 <__ieee754_log10>
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	eeb0 8a40 	vmov.f32	s16, s0
 800529a:	eef0 8a60 	vmov.f32	s17, s1
 800529e:	f7fb fc11 	bl	8000ac4 <__aeabi_dcmpun>
 80052a2:	b998      	cbnz	r0, 80052cc <log10+0x4c>
 80052a4:	2200      	movs	r2, #0
 80052a6:	2300      	movs	r3, #0
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fb fbec 	bl	8000a88 <__aeabi_dcmple>
 80052b0:	b160      	cbz	r0, 80052cc <log10+0x4c>
 80052b2:	2200      	movs	r2, #0
 80052b4:	2300      	movs	r3, #0
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fb fbd1 	bl	8000a60 <__aeabi_dcmpeq>
 80052be:	b160      	cbz	r0, 80052da <log10+0x5a>
 80052c0:	f7ff ff6c 	bl	800519c <__errno>
 80052c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80052f0 <log10+0x70>
 80052c8:	2322      	movs	r3, #34	; 0x22
 80052ca:	6003      	str	r3, [r0, #0]
 80052cc:	eeb0 0a48 	vmov.f32	s0, s16
 80052d0:	eef0 0a68 	vmov.f32	s1, s17
 80052d4:	ecbd 8b02 	vpop	{d8}
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	f7ff ff5f 	bl	800519c <__errno>
 80052de:	ecbd 8b02 	vpop	{d8}
 80052e2:	2321      	movs	r3, #33	; 0x21
 80052e4:	6003      	str	r3, [r0, #0]
 80052e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ea:	4803      	ldr	r0, [pc, #12]	; (80052f8 <log10+0x78>)
 80052ec:	f000 b814 	b.w	8005318 <nan>
 80052f0:	00000000 	.word	0x00000000
 80052f4:	fff00000 	.word	0xfff00000
 80052f8:	08005b48 	.word	0x08005b48

080052fc <finite>:
 80052fc:	b082      	sub	sp, #8
 80052fe:	ed8d 0b00 	vstr	d0, [sp]
 8005302:	9801      	ldr	r0, [sp, #4]
 8005304:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005308:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800530c:	0fc0      	lsrs	r0, r0, #31
 800530e:	b002      	add	sp, #8
 8005310:	4770      	bx	lr
 8005312:	0000      	movs	r0, r0
 8005314:	0000      	movs	r0, r0
	...

08005318 <nan>:
 8005318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005320 <nan+0x8>
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	00000000 	.word	0x00000000
 8005324:	7ff80000 	.word	0x7ff80000

08005328 <__ieee754_exp>:
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	ec55 4b10 	vmov	r4, r5, d0
 8005330:	49b5      	ldr	r1, [pc, #724]	; (8005608 <__ieee754_exp+0x2e0>)
 8005332:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005336:	428a      	cmp	r2, r1
 8005338:	ed2d 8b04 	vpush	{d8-d9}
 800533c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005340:	d93b      	bls.n	80053ba <__ieee754_exp+0x92>
 8005342:	49b2      	ldr	r1, [pc, #712]	; (800560c <__ieee754_exp+0x2e4>)
 8005344:	428a      	cmp	r2, r1
 8005346:	d916      	bls.n	8005376 <__ieee754_exp+0x4e>
 8005348:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800534c:	4323      	orrs	r3, r4
 800534e:	ee10 2a10 	vmov	r2, s0
 8005352:	d007      	beq.n	8005364 <__ieee754_exp+0x3c>
 8005354:	462b      	mov	r3, r5
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fa ff63 	bl	8000224 <__adddf3>
 800535e:	4604      	mov	r4, r0
 8005360:	460d      	mov	r5, r1
 8005362:	e002      	b.n	800536a <__ieee754_exp+0x42>
 8005364:	b10e      	cbz	r6, 800536a <__ieee754_exp+0x42>
 8005366:	2400      	movs	r4, #0
 8005368:	2500      	movs	r5, #0
 800536a:	ecbd 8b04 	vpop	{d8-d9}
 800536e:	ec45 4b10 	vmov	d0, r4, r5
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	a38e      	add	r3, pc, #568	; (adr r3, 80055b0 <__ieee754_exp+0x288>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	ee10 0a10 	vmov	r0, s0
 8005380:	4629      	mov	r1, r5
 8005382:	f7fb fb95 	bl	8000ab0 <__aeabi_dcmpgt>
 8005386:	4607      	mov	r7, r0
 8005388:	b130      	cbz	r0, 8005398 <__ieee754_exp+0x70>
 800538a:	ecbd 8b04 	vpop	{d8-d9}
 800538e:	2000      	movs	r0, #0
 8005390:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005394:	f000 b9fd 	b.w	8005792 <__math_oflow>
 8005398:	a387      	add	r3, pc, #540	; (adr r3, 80055b8 <__ieee754_exp+0x290>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	4620      	mov	r0, r4
 80053a0:	4629      	mov	r1, r5
 80053a2:	f7fb fb67 	bl	8000a74 <__aeabi_dcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f000 808b 	beq.w	80054c2 <__ieee754_exp+0x19a>
 80053ac:	ecbd 8b04 	vpop	{d8-d9}
 80053b0:	4638      	mov	r0, r7
 80053b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b6:	f000 b9e3 	b.w	8005780 <__math_uflow>
 80053ba:	4b95      	ldr	r3, [pc, #596]	; (8005610 <__ieee754_exp+0x2e8>)
 80053bc:	429a      	cmp	r2, r3
 80053be:	f240 80ac 	bls.w	800551a <__ieee754_exp+0x1f2>
 80053c2:	4b94      	ldr	r3, [pc, #592]	; (8005614 <__ieee754_exp+0x2ec>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d87c      	bhi.n	80054c2 <__ieee754_exp+0x19a>
 80053c8:	4b93      	ldr	r3, [pc, #588]	; (8005618 <__ieee754_exp+0x2f0>)
 80053ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	ee10 0a10 	vmov	r0, s0
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fa ff22 	bl	8000220 <__aeabi_dsub>
 80053dc:	4b8f      	ldr	r3, [pc, #572]	; (800561c <__ieee754_exp+0x2f4>)
 80053de:	00f7      	lsls	r7, r6, #3
 80053e0:	443b      	add	r3, r7
 80053e2:	ed93 7b00 	vldr	d7, [r3]
 80053e6:	f1c6 0a01 	rsb	sl, r6, #1
 80053ea:	4680      	mov	r8, r0
 80053ec:	4689      	mov	r9, r1
 80053ee:	ebaa 0a06 	sub.w	sl, sl, r6
 80053f2:	eeb0 8a47 	vmov.f32	s16, s14
 80053f6:	eef0 8a67 	vmov.f32	s17, s15
 80053fa:	ec53 2b18 	vmov	r2, r3, d8
 80053fe:	4640      	mov	r0, r8
 8005400:	4649      	mov	r1, r9
 8005402:	f7fa ff0d 	bl	8000220 <__aeabi_dsub>
 8005406:	4604      	mov	r4, r0
 8005408:	460d      	mov	r5, r1
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb f8bd 	bl	8000590 <__aeabi_dmul>
 8005416:	a36a      	add	r3, pc, #424	; (adr r3, 80055c0 <__ieee754_exp+0x298>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	4606      	mov	r6, r0
 800541e:	460f      	mov	r7, r1
 8005420:	f7fb f8b6 	bl	8000590 <__aeabi_dmul>
 8005424:	a368      	add	r3, pc, #416	; (adr r3, 80055c8 <__ieee754_exp+0x2a0>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa fef9 	bl	8000220 <__aeabi_dsub>
 800542e:	4632      	mov	r2, r6
 8005430:	463b      	mov	r3, r7
 8005432:	f7fb f8ad 	bl	8000590 <__aeabi_dmul>
 8005436:	a366      	add	r3, pc, #408	; (adr r3, 80055d0 <__ieee754_exp+0x2a8>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa fef2 	bl	8000224 <__adddf3>
 8005440:	4632      	mov	r2, r6
 8005442:	463b      	mov	r3, r7
 8005444:	f7fb f8a4 	bl	8000590 <__aeabi_dmul>
 8005448:	a363      	add	r3, pc, #396	; (adr r3, 80055d8 <__ieee754_exp+0x2b0>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa fee7 	bl	8000220 <__aeabi_dsub>
 8005452:	4632      	mov	r2, r6
 8005454:	463b      	mov	r3, r7
 8005456:	f7fb f89b 	bl	8000590 <__aeabi_dmul>
 800545a:	a361      	add	r3, pc, #388	; (adr r3, 80055e0 <__ieee754_exp+0x2b8>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fa fee0 	bl	8000224 <__adddf3>
 8005464:	4632      	mov	r2, r6
 8005466:	463b      	mov	r3, r7
 8005468:	f7fb f892 	bl	8000590 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4620      	mov	r0, r4
 8005472:	4629      	mov	r1, r5
 8005474:	f7fa fed4 	bl	8000220 <__aeabi_dsub>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fb f884 	bl	8000590 <__aeabi_dmul>
 8005488:	ec41 0b19 	vmov	d9, r0, r1
 800548c:	f1ba 0f00 	cmp.w	sl, #0
 8005490:	d15d      	bne.n	800554e <__ieee754_exp+0x226>
 8005492:	2200      	movs	r2, #0
 8005494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005498:	4630      	mov	r0, r6
 800549a:	4639      	mov	r1, r7
 800549c:	f7fa fec0 	bl	8000220 <__aeabi_dsub>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	ec51 0b19 	vmov	r0, r1, d9
 80054a8:	f7fb f99c 	bl	80007e4 <__aeabi_ddiv>
 80054ac:	4622      	mov	r2, r4
 80054ae:	462b      	mov	r3, r5
 80054b0:	f7fa feb6 	bl	8000220 <__aeabi_dsub>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	2000      	movs	r0, #0
 80054ba:	4959      	ldr	r1, [pc, #356]	; (8005620 <__ieee754_exp+0x2f8>)
 80054bc:	f7fa feb0 	bl	8000220 <__aeabi_dsub>
 80054c0:	e74d      	b.n	800535e <__ieee754_exp+0x36>
 80054c2:	4b58      	ldr	r3, [pc, #352]	; (8005624 <__ieee754_exp+0x2fc>)
 80054c4:	4620      	mov	r0, r4
 80054c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80054ca:	4629      	mov	r1, r5
 80054cc:	a346      	add	r3, pc, #280	; (adr r3, 80055e8 <__ieee754_exp+0x2c0>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fb f85d 	bl	8000590 <__aeabi_dmul>
 80054d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054da:	f7fa fea3 	bl	8000224 <__adddf3>
 80054de:	f7fb fb07 	bl	8000af0 <__aeabi_d2iz>
 80054e2:	4682      	mov	sl, r0
 80054e4:	f7fa ffea 	bl	80004bc <__aeabi_i2d>
 80054e8:	a341      	add	r3, pc, #260	; (adr r3, 80055f0 <__ieee754_exp+0x2c8>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb f84d 	bl	8000590 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fa fe8f 	bl	8000220 <__aeabi_dsub>
 8005502:	a33d      	add	r3, pc, #244	; (adr r3, 80055f8 <__ieee754_exp+0x2d0>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	4630      	mov	r0, r6
 800550e:	4639      	mov	r1, r7
 8005510:	f7fb f83e 	bl	8000590 <__aeabi_dmul>
 8005514:	ec41 0b18 	vmov	d8, r0, r1
 8005518:	e76f      	b.n	80053fa <__ieee754_exp+0xd2>
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <__ieee754_exp+0x300>)
 800551c:	429a      	cmp	r2, r3
 800551e:	d811      	bhi.n	8005544 <__ieee754_exp+0x21c>
 8005520:	a337      	add	r3, pc, #220	; (adr r3, 8005600 <__ieee754_exp+0x2d8>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	ee10 0a10 	vmov	r0, s0
 800552a:	4629      	mov	r1, r5
 800552c:	f7fa fe7a 	bl	8000224 <__adddf3>
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <__ieee754_exp+0x2f8>)
 8005532:	2200      	movs	r2, #0
 8005534:	f7fb fabc 	bl	8000ab0 <__aeabi_dcmpgt>
 8005538:	b138      	cbz	r0, 800554a <__ieee754_exp+0x222>
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <__ieee754_exp+0x2f8>)
 800553c:	2200      	movs	r2, #0
 800553e:	4620      	mov	r0, r4
 8005540:	4629      	mov	r1, r5
 8005542:	e70a      	b.n	800535a <__ieee754_exp+0x32>
 8005544:	f04f 0a00 	mov.w	sl, #0
 8005548:	e75f      	b.n	800540a <__ieee754_exp+0xe2>
 800554a:	4682      	mov	sl, r0
 800554c:	e75d      	b.n	800540a <__ieee754_exp+0xe2>
 800554e:	4632      	mov	r2, r6
 8005550:	463b      	mov	r3, r7
 8005552:	2000      	movs	r0, #0
 8005554:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005558:	f7fa fe62 	bl	8000220 <__aeabi_dsub>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	ec51 0b19 	vmov	r0, r1, d9
 8005564:	f7fb f93e 	bl	80007e4 <__aeabi_ddiv>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	ec51 0b18 	vmov	r0, r1, d8
 8005570:	f7fa fe56 	bl	8000220 <__aeabi_dsub>
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	f7fa fe52 	bl	8000220 <__aeabi_dsub>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	2000      	movs	r0, #0
 8005582:	4927      	ldr	r1, [pc, #156]	; (8005620 <__ieee754_exp+0x2f8>)
 8005584:	f7fa fe4c 	bl	8000220 <__aeabi_dsub>
 8005588:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800558c:	4592      	cmp	sl, r2
 800558e:	db02      	blt.n	8005596 <__ieee754_exp+0x26e>
 8005590:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005594:	e6e3      	b.n	800535e <__ieee754_exp+0x36>
 8005596:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800559a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800559e:	2200      	movs	r2, #0
 80055a0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80055a4:	f7fa fff4 	bl	8000590 <__aeabi_dmul>
 80055a8:	e6d9      	b.n	800535e <__ieee754_exp+0x36>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	fefa39ef 	.word	0xfefa39ef
 80055b4:	40862e42 	.word	0x40862e42
 80055b8:	d52d3051 	.word	0xd52d3051
 80055bc:	c0874910 	.word	0xc0874910
 80055c0:	72bea4d0 	.word	0x72bea4d0
 80055c4:	3e663769 	.word	0x3e663769
 80055c8:	c5d26bf1 	.word	0xc5d26bf1
 80055cc:	3ebbbd41 	.word	0x3ebbbd41
 80055d0:	af25de2c 	.word	0xaf25de2c
 80055d4:	3f11566a 	.word	0x3f11566a
 80055d8:	16bebd93 	.word	0x16bebd93
 80055dc:	3f66c16c 	.word	0x3f66c16c
 80055e0:	5555553e 	.word	0x5555553e
 80055e4:	3fc55555 	.word	0x3fc55555
 80055e8:	652b82fe 	.word	0x652b82fe
 80055ec:	3ff71547 	.word	0x3ff71547
 80055f0:	fee00000 	.word	0xfee00000
 80055f4:	3fe62e42 	.word	0x3fe62e42
 80055f8:	35793c76 	.word	0x35793c76
 80055fc:	3dea39ef 	.word	0x3dea39ef
 8005600:	8800759c 	.word	0x8800759c
 8005604:	7e37e43c 	.word	0x7e37e43c
 8005608:	40862e41 	.word	0x40862e41
 800560c:	7fefffff 	.word	0x7fefffff
 8005610:	3fd62e42 	.word	0x3fd62e42
 8005614:	3ff0a2b1 	.word	0x3ff0a2b1
 8005618:	08005b60 	.word	0x08005b60
 800561c:	08005b70 	.word	0x08005b70
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	08005b50 	.word	0x08005b50
 8005628:	3defffff 	.word	0x3defffff
 800562c:	00000000 	.word	0x00000000

08005630 <__ieee754_log10>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	ec55 4b10 	vmov	r4, r5, d0
 8005638:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800563c:	462b      	mov	r3, r5
 800563e:	da2f      	bge.n	80056a0 <__ieee754_log10+0x70>
 8005640:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005644:	4322      	orrs	r2, r4
 8005646:	d109      	bne.n	800565c <__ieee754_log10+0x2c>
 8005648:	493b      	ldr	r1, [pc, #236]	; (8005738 <__ieee754_log10+0x108>)
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	2000      	movs	r0, #0
 8005650:	f7fb f8c8 	bl	80007e4 <__aeabi_ddiv>
 8005654:	ec41 0b10 	vmov	d0, r0, r1
 8005658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800565c:	2d00      	cmp	r5, #0
 800565e:	da09      	bge.n	8005674 <__ieee754_log10+0x44>
 8005660:	ee10 2a10 	vmov	r2, s0
 8005664:	ee10 0a10 	vmov	r0, s0
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fdd9 	bl	8000220 <__aeabi_dsub>
 800566e:	2200      	movs	r2, #0
 8005670:	2300      	movs	r3, #0
 8005672:	e7ed      	b.n	8005650 <__ieee754_log10+0x20>
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <__ieee754_log10+0x10c>)
 8005676:	2200      	movs	r2, #0
 8005678:	4629      	mov	r1, r5
 800567a:	ee10 0a10 	vmov	r0, s0
 800567e:	f7fa ff87 	bl	8000590 <__aeabi_dmul>
 8005682:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005686:	4604      	mov	r4, r0
 8005688:	460d      	mov	r5, r1
 800568a:	460b      	mov	r3, r1
 800568c:	492c      	ldr	r1, [pc, #176]	; (8005740 <__ieee754_log10+0x110>)
 800568e:	428b      	cmp	r3, r1
 8005690:	dd08      	ble.n	80056a4 <__ieee754_log10+0x74>
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fdc3 	bl	8000224 <__adddf3>
 800569e:	e7d9      	b.n	8005654 <__ieee754_log10+0x24>
 80056a0:	2200      	movs	r2, #0
 80056a2:	e7f3      	b.n	800568c <__ieee754_log10+0x5c>
 80056a4:	1518      	asrs	r0, r3, #20
 80056a6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80056aa:	4410      	add	r0, r2
 80056ac:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80056b0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80056b4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80056b8:	f7fa ff00 	bl	80004bc <__aeabi_i2d>
 80056bc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80056c0:	3303      	adds	r3, #3
 80056c2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80056c6:	ec45 4b10 	vmov	d0, r4, r5
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	f000 f86b 	bl	80057a8 <__ieee754_log>
 80056d2:	a313      	add	r3, pc, #76	; (adr r3, 8005720 <__ieee754_log10+0xf0>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	ec59 8b10 	vmov	r8, r9, d0
 80056e0:	f7fa ff56 	bl	8000590 <__aeabi_dmul>
 80056e4:	a310      	add	r3, pc, #64	; (adr r3, 8005728 <__ieee754_log10+0xf8>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	4604      	mov	r4, r0
 80056ec:	460d      	mov	r5, r1
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fa ff4d 	bl	8000590 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4620      	mov	r0, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	f7fa fd91 	bl	8000224 <__adddf3>
 8005702:	a30b      	add	r3, pc, #44	; (adr r3, 8005730 <__ieee754_log10+0x100>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fa ff3e 	bl	8000590 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	e7bd      	b.n	800569a <__ieee754_log10+0x6a>
 800571e:	bf00      	nop
 8005720:	11f12b36 	.word	0x11f12b36
 8005724:	3d59fef3 	.word	0x3d59fef3
 8005728:	1526e50e 	.word	0x1526e50e
 800572c:	3fdbcb7b 	.word	0x3fdbcb7b
 8005730:	509f6000 	.word	0x509f6000
 8005734:	3fd34413 	.word	0x3fd34413
 8005738:	c3500000 	.word	0xc3500000
 800573c:	43500000 	.word	0x43500000
 8005740:	7fefffff 	.word	0x7fefffff

08005744 <with_errno>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	4616      	mov	r6, r2
 800574c:	f7ff fd26 	bl	800519c <__errno>
 8005750:	4629      	mov	r1, r5
 8005752:	6006      	str	r6, [r0, #0]
 8005754:	4620      	mov	r0, r4
 8005756:	bd70      	pop	{r4, r5, r6, pc}

08005758 <xflow>:
 8005758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800575a:	4614      	mov	r4, r2
 800575c:	461d      	mov	r5, r3
 800575e:	b108      	cbz	r0, 8005764 <xflow+0xc>
 8005760:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005764:	e9cd 2300 	strd	r2, r3, [sp]
 8005768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800576c:	4620      	mov	r0, r4
 800576e:	4629      	mov	r1, r5
 8005770:	f7fa ff0e 	bl	8000590 <__aeabi_dmul>
 8005774:	2222      	movs	r2, #34	; 0x22
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800577c:	f7ff bfe2 	b.w	8005744 <with_errno>

08005780 <__math_uflow>:
 8005780:	b508      	push	{r3, lr}
 8005782:	2200      	movs	r2, #0
 8005784:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005788:	f7ff ffe6 	bl	8005758 <xflow>
 800578c:	ec41 0b10 	vmov	d0, r0, r1
 8005790:	bd08      	pop	{r3, pc}

08005792 <__math_oflow>:
 8005792:	b508      	push	{r3, lr}
 8005794:	2200      	movs	r2, #0
 8005796:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800579a:	f7ff ffdd 	bl	8005758 <xflow>
 800579e:	ec41 0b10 	vmov	d0, r0, r1
 80057a2:	bd08      	pop	{r3, pc}
 80057a4:	0000      	movs	r0, r0
	...

080057a8 <__ieee754_log>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	ec51 0b10 	vmov	r0, r1, d0
 80057b0:	ed2d 8b04 	vpush	{d8-d9}
 80057b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80057b8:	b083      	sub	sp, #12
 80057ba:	460d      	mov	r5, r1
 80057bc:	da29      	bge.n	8005812 <__ieee754_log+0x6a>
 80057be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057c2:	4303      	orrs	r3, r0
 80057c4:	ee10 2a10 	vmov	r2, s0
 80057c8:	d10c      	bne.n	80057e4 <__ieee754_log+0x3c>
 80057ca:	49cf      	ldr	r1, [pc, #828]	; (8005b08 <__ieee754_log+0x360>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	2000      	movs	r0, #0
 80057d2:	f7fb f807 	bl	80007e4 <__aeabi_ddiv>
 80057d6:	ec41 0b10 	vmov	d0, r0, r1
 80057da:	b003      	add	sp, #12
 80057dc:	ecbd 8b04 	vpop	{d8-d9}
 80057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e4:	2900      	cmp	r1, #0
 80057e6:	da05      	bge.n	80057f4 <__ieee754_log+0x4c>
 80057e8:	460b      	mov	r3, r1
 80057ea:	f7fa fd19 	bl	8000220 <__aeabi_dsub>
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	e7ee      	b.n	80057d2 <__ieee754_log+0x2a>
 80057f4:	4bc5      	ldr	r3, [pc, #788]	; (8005b0c <__ieee754_log+0x364>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	f7fa feca 	bl	8000590 <__aeabi_dmul>
 80057fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005800:	460d      	mov	r5, r1
 8005802:	4ac3      	ldr	r2, [pc, #780]	; (8005b10 <__ieee754_log+0x368>)
 8005804:	4295      	cmp	r5, r2
 8005806:	dd06      	ble.n	8005816 <__ieee754_log+0x6e>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	f7fa fd0a 	bl	8000224 <__adddf3>
 8005810:	e7e1      	b.n	80057d6 <__ieee754_log+0x2e>
 8005812:	2300      	movs	r3, #0
 8005814:	e7f5      	b.n	8005802 <__ieee754_log+0x5a>
 8005816:	152c      	asrs	r4, r5, #20
 8005818:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800581c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005820:	441c      	add	r4, r3
 8005822:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005826:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800582a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005832:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005836:	ea42 0105 	orr.w	r1, r2, r5
 800583a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800583e:	2200      	movs	r2, #0
 8005840:	4bb4      	ldr	r3, [pc, #720]	; (8005b14 <__ieee754_log+0x36c>)
 8005842:	f7fa fced 	bl	8000220 <__aeabi_dsub>
 8005846:	1cab      	adds	r3, r5, #2
 8005848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800584c:	2b02      	cmp	r3, #2
 800584e:	4682      	mov	sl, r0
 8005850:	468b      	mov	fp, r1
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	dc53      	bgt.n	8005900 <__ieee754_log+0x158>
 8005858:	2300      	movs	r3, #0
 800585a:	f7fb f901 	bl	8000a60 <__aeabi_dcmpeq>
 800585e:	b1d0      	cbz	r0, 8005896 <__ieee754_log+0xee>
 8005860:	2c00      	cmp	r4, #0
 8005862:	f000 8122 	beq.w	8005aaa <__ieee754_log+0x302>
 8005866:	4620      	mov	r0, r4
 8005868:	f7fa fe28 	bl	80004bc <__aeabi_i2d>
 800586c:	a390      	add	r3, pc, #576	; (adr r3, 8005ab0 <__ieee754_log+0x308>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	4606      	mov	r6, r0
 8005874:	460f      	mov	r7, r1
 8005876:	f7fa fe8b 	bl	8000590 <__aeabi_dmul>
 800587a:	a38f      	add	r3, pc, #572	; (adr r3, 8005ab8 <__ieee754_log+0x310>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	4604      	mov	r4, r0
 8005882:	460d      	mov	r5, r1
 8005884:	4630      	mov	r0, r6
 8005886:	4639      	mov	r1, r7
 8005888:	f7fa fe82 	bl	8000590 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	e7ba      	b.n	800580c <__ieee754_log+0x64>
 8005896:	a38a      	add	r3, pc, #552	; (adr r3, 8005ac0 <__ieee754_log+0x318>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	4650      	mov	r0, sl
 800589e:	4659      	mov	r1, fp
 80058a0:	f7fa fe76 	bl	8000590 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	2000      	movs	r0, #0
 80058aa:	499b      	ldr	r1, [pc, #620]	; (8005b18 <__ieee754_log+0x370>)
 80058ac:	f7fa fcb8 	bl	8000220 <__aeabi_dsub>
 80058b0:	4652      	mov	r2, sl
 80058b2:	4606      	mov	r6, r0
 80058b4:	460f      	mov	r7, r1
 80058b6:	465b      	mov	r3, fp
 80058b8:	4650      	mov	r0, sl
 80058ba:	4659      	mov	r1, fp
 80058bc:	f7fa fe68 	bl	8000590 <__aeabi_dmul>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4630      	mov	r0, r6
 80058c6:	4639      	mov	r1, r7
 80058c8:	f7fa fe62 	bl	8000590 <__aeabi_dmul>
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	b914      	cbnz	r4, 80058d8 <__ieee754_log+0x130>
 80058d2:	4632      	mov	r2, r6
 80058d4:	463b      	mov	r3, r7
 80058d6:	e0a2      	b.n	8005a1e <__ieee754_log+0x276>
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fa fdef 	bl	80004bc <__aeabi_i2d>
 80058de:	a374      	add	r3, pc, #464	; (adr r3, 8005ab0 <__ieee754_log+0x308>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	4680      	mov	r8, r0
 80058e6:	4689      	mov	r9, r1
 80058e8:	f7fa fe52 	bl	8000590 <__aeabi_dmul>
 80058ec:	a372      	add	r3, pc, #456	; (adr r3, 8005ab8 <__ieee754_log+0x310>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	4604      	mov	r4, r0
 80058f4:	460d      	mov	r5, r1
 80058f6:	4640      	mov	r0, r8
 80058f8:	4649      	mov	r1, r9
 80058fa:	f7fa fe49 	bl	8000590 <__aeabi_dmul>
 80058fe:	e0a7      	b.n	8005a50 <__ieee754_log+0x2a8>
 8005900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005904:	f7fa fc8e 	bl	8000224 <__adddf3>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4650      	mov	r0, sl
 800590e:	4659      	mov	r1, fp
 8005910:	f7fa ff68 	bl	80007e4 <__aeabi_ddiv>
 8005914:	ec41 0b18 	vmov	d8, r0, r1
 8005918:	4620      	mov	r0, r4
 800591a:	f7fa fdcf 	bl	80004bc <__aeabi_i2d>
 800591e:	ec53 2b18 	vmov	r2, r3, d8
 8005922:	ec41 0b19 	vmov	d9, r0, r1
 8005926:	ec51 0b18 	vmov	r0, r1, d8
 800592a:	f7fa fe31 	bl	8000590 <__aeabi_dmul>
 800592e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005932:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4680      	mov	r8, r0
 800593e:	4689      	mov	r9, r1
 8005940:	f7fa fe26 	bl	8000590 <__aeabi_dmul>
 8005944:	a360      	add	r3, pc, #384	; (adr r3, 8005ac8 <__ieee754_log+0x320>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
 800594e:	f7fa fe1f 	bl	8000590 <__aeabi_dmul>
 8005952:	a35f      	add	r3, pc, #380	; (adr r3, 8005ad0 <__ieee754_log+0x328>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fc64 	bl	8000224 <__adddf3>
 800595c:	4632      	mov	r2, r6
 800595e:	463b      	mov	r3, r7
 8005960:	f7fa fe16 	bl	8000590 <__aeabi_dmul>
 8005964:	a35c      	add	r3, pc, #368	; (adr r3, 8005ad8 <__ieee754_log+0x330>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fc5b 	bl	8000224 <__adddf3>
 800596e:	4632      	mov	r2, r6
 8005970:	463b      	mov	r3, r7
 8005972:	f7fa fe0d 	bl	8000590 <__aeabi_dmul>
 8005976:	a35a      	add	r3, pc, #360	; (adr r3, 8005ae0 <__ieee754_log+0x338>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fc52 	bl	8000224 <__adddf3>
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	f7fa fe04 	bl	8000590 <__aeabi_dmul>
 8005988:	a357      	add	r3, pc, #348	; (adr r3, 8005ae8 <__ieee754_log+0x340>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	4680      	mov	r8, r0
 8005990:	4689      	mov	r9, r1
 8005992:	4630      	mov	r0, r6
 8005994:	4639      	mov	r1, r7
 8005996:	f7fa fdfb 	bl	8000590 <__aeabi_dmul>
 800599a:	a355      	add	r3, pc, #340	; (adr r3, 8005af0 <__ieee754_log+0x348>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f7fa fc40 	bl	8000224 <__adddf3>
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	f7fa fdf2 	bl	8000590 <__aeabi_dmul>
 80059ac:	a352      	add	r3, pc, #328	; (adr r3, 8005af8 <__ieee754_log+0x350>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc37 	bl	8000224 <__adddf3>
 80059b6:	4632      	mov	r2, r6
 80059b8:	463b      	mov	r3, r7
 80059ba:	f7fa fde9 	bl	8000590 <__aeabi_dmul>
 80059be:	460b      	mov	r3, r1
 80059c0:	4602      	mov	r2, r0
 80059c2:	4649      	mov	r1, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	f7fa fc2d 	bl	8000224 <__adddf3>
 80059ca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	3551      	adds	r5, #81	; 0x51
 80059d2:	431d      	orrs	r5, r3
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	4680      	mov	r8, r0
 80059d8:	4689      	mov	r9, r1
 80059da:	dd48      	ble.n	8005a6e <__ieee754_log+0x2c6>
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <__ieee754_log+0x370>)
 80059de:	2200      	movs	r2, #0
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fa fdd4 	bl	8000590 <__aeabi_dmul>
 80059e8:	4652      	mov	r2, sl
 80059ea:	465b      	mov	r3, fp
 80059ec:	f7fa fdd0 	bl	8000590 <__aeabi_dmul>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fa fc12 	bl	8000224 <__adddf3>
 8005a00:	ec53 2b18 	vmov	r2, r3, d8
 8005a04:	f7fa fdc4 	bl	8000590 <__aeabi_dmul>
 8005a08:	4680      	mov	r8, r0
 8005a0a:	4689      	mov	r9, r1
 8005a0c:	b964      	cbnz	r4, 8005a28 <__ieee754_log+0x280>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4630      	mov	r0, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7fa fc03 	bl	8000220 <__aeabi_dsub>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4650      	mov	r0, sl
 8005a20:	4659      	mov	r1, fp
 8005a22:	f7fa fbfd 	bl	8000220 <__aeabi_dsub>
 8005a26:	e6d6      	b.n	80057d6 <__ieee754_log+0x2e>
 8005a28:	a321      	add	r3, pc, #132	; (adr r3, 8005ab0 <__ieee754_log+0x308>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	ec51 0b19 	vmov	r0, r1, d9
 8005a32:	f7fa fdad 	bl	8000590 <__aeabi_dmul>
 8005a36:	a320      	add	r3, pc, #128	; (adr r3, 8005ab8 <__ieee754_log+0x310>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	ec51 0b19 	vmov	r0, r1, d9
 8005a44:	f7fa fda4 	bl	8000590 <__aeabi_dmul>
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	f7fa fbea 	bl	8000224 <__adddf3>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa fbe2 	bl	8000220 <__aeabi_dsub>
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	465b      	mov	r3, fp
 8005a60:	f7fa fbde 	bl	8000220 <__aeabi_dsub>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4620      	mov	r0, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	e7d9      	b.n	8005a22 <__ieee754_log+0x27a>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4650      	mov	r0, sl
 8005a74:	4659      	mov	r1, fp
 8005a76:	f7fa fbd3 	bl	8000220 <__aeabi_dsub>
 8005a7a:	ec53 2b18 	vmov	r2, r3, d8
 8005a7e:	f7fa fd87 	bl	8000590 <__aeabi_dmul>
 8005a82:	4606      	mov	r6, r0
 8005a84:	460f      	mov	r7, r1
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	f43f af23 	beq.w	80058d2 <__ieee754_log+0x12a>
 8005a8c:	a308      	add	r3, pc, #32	; (adr r3, 8005ab0 <__ieee754_log+0x308>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	ec51 0b19 	vmov	r0, r1, d9
 8005a96:	f7fa fd7b 	bl	8000590 <__aeabi_dmul>
 8005a9a:	a307      	add	r3, pc, #28	; (adr r3, 8005ab8 <__ieee754_log+0x310>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	ec51 0b19 	vmov	r0, r1, d9
 8005aa8:	e727      	b.n	80058fa <__ieee754_log+0x152>
 8005aaa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005b00 <__ieee754_log+0x358>
 8005aae:	e694      	b.n	80057da <__ieee754_log+0x32>
 8005ab0:	fee00000 	.word	0xfee00000
 8005ab4:	3fe62e42 	.word	0x3fe62e42
 8005ab8:	35793c76 	.word	0x35793c76
 8005abc:	3dea39ef 	.word	0x3dea39ef
 8005ac0:	55555555 	.word	0x55555555
 8005ac4:	3fd55555 	.word	0x3fd55555
 8005ac8:	df3e5244 	.word	0xdf3e5244
 8005acc:	3fc2f112 	.word	0x3fc2f112
 8005ad0:	96cb03de 	.word	0x96cb03de
 8005ad4:	3fc74664 	.word	0x3fc74664
 8005ad8:	94229359 	.word	0x94229359
 8005adc:	3fd24924 	.word	0x3fd24924
 8005ae0:	55555593 	.word	0x55555593
 8005ae4:	3fe55555 	.word	0x3fe55555
 8005ae8:	d078c69f 	.word	0xd078c69f
 8005aec:	3fc39a09 	.word	0x3fc39a09
 8005af0:	1d8e78af 	.word	0x1d8e78af
 8005af4:	3fcc71c5 	.word	0x3fcc71c5
 8005af8:	9997fa04 	.word	0x9997fa04
 8005afc:	3fd99999 	.word	0x3fd99999
	...
 8005b08:	c3500000 	.word	0xc3500000
 8005b0c:	43500000 	.word	0x43500000
 8005b10:	7fefffff 	.word	0x7fefffff
 8005b14:	3ff00000 	.word	0x3ff00000
 8005b18:	3fe00000 	.word	0x3fe00000

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr
