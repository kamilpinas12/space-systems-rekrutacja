
zad2_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a30  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c78  08003c78  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c80  08003c80  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000a8  08003d30  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08003d30  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0ff  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002051  00000000  00000000  0002d21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f9  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ee0  00000000  00000000  000304f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e187  00000000  00000000  000563d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb15d  00000000  00000000  00064558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fb0  00000000  00000000  0014f6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00152668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003bf0 	.word	0x08003bf0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ac 	.word	0x200000ac
 8000214:	08003bf0 	.word	0x08003bf0

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b970 	b.w	8000524 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	460f      	mov	r7, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4694      	mov	ip, r2
 8000270:	d965      	bls.n	800033e <__udivmoddi4+0xe2>
 8000272:	fab2 f382 	clz	r3, r2
 8000276:	b143      	cbz	r3, 800028a <__udivmoddi4+0x2e>
 8000278:	fa02 fc03 	lsl.w	ip, r2, r3
 800027c:	f1c3 0220 	rsb	r2, r3, #32
 8000280:	409f      	lsls	r7, r3
 8000282:	fa20 f202 	lsr.w	r2, r0, r2
 8000286:	4317      	orrs	r7, r2
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fbb7 f1fe 	udiv	r1, r7, lr
 8000296:	0c22      	lsrs	r2, r4, #16
 8000298:	fb0e 7711 	mls	r7, lr, r1, r7
 800029c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a0:	fb01 f005 	mul.w	r0, r1, r5
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x62>
 80002a8:	eb1c 0202 	adds.w	r2, ip, r2
 80002ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b0:	f080 811c 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002b4:	4290      	cmp	r0, r2
 80002b6:	f240 8119 	bls.w	80004ec <__udivmoddi4+0x290>
 80002ba:	3902      	subs	r1, #2
 80002bc:	4462      	add	r2, ip
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	b2a4      	uxth	r4, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x90>
 80002d6:	eb1c 0404 	adds.w	r4, ip, r4
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x294>
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x294>
 80002e8:	4464      	add	r4, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xbc>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80ed 	beq.w	80004e6 <__udivmoddi4+0x28a>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d149      	bne.n	80003b4 <__udivmoddi4+0x158>
 8000320:	42ab      	cmp	r3, r5
 8000322:	d302      	bcc.n	800032a <__udivmoddi4+0xce>
 8000324:	4282      	cmp	r2, r0
 8000326:	f200 80f8 	bhi.w	800051a <__udivmoddi4+0x2be>
 800032a:	1a84      	subs	r4, r0, r2
 800032c:	eb65 0203 	sbc.w	r2, r5, r3
 8000330:	2001      	movs	r0, #1
 8000332:	4617      	mov	r7, r2
 8000334:	2e00      	cmp	r6, #0
 8000336:	d0e2      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000338:	e9c6 4700 	strd	r4, r7, [r6]
 800033c:	e7df      	b.n	80002fe <__udivmoddi4+0xa2>
 800033e:	b902      	cbnz	r2, 8000342 <__udivmoddi4+0xe6>
 8000340:	deff      	udf	#255	; 0xff
 8000342:	fab2 f382 	clz	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x210>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f fe8c 	uxth.w	lr, ip
 8000356:	2101      	movs	r1, #1
 8000358:	fbb2 f5f7 	udiv	r5, r2, r7
 800035c:	fb07 2015 	mls	r0, r7, r5, r2
 8000360:	0c22      	lsrs	r2, r4, #16
 8000362:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000366:	fb0e f005 	mul.w	r0, lr, r5
 800036a:	4290      	cmp	r0, r2
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x124>
 800036e:	eb1c 0202 	adds.w	r2, ip, r2
 8000372:	f105 38ff 	add.w	r8, r5, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4290      	cmp	r0, r2
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b8>
 800037e:	4645      	mov	r5, r8
 8000380:	1a12      	subs	r2, r2, r0
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb2 f0f7 	udiv	r0, r2, r7
 8000388:	fb07 2210 	mls	r2, r7, r0, r2
 800038c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x14e>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x14c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80bb 	bhi.w	800051e <__udivmoddi4+0x2c2>
 80003a8:	4610      	mov	r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x98>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa05 f401 	lsl.w	r4, r5, r1
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	40fd      	lsrs	r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fb09 5518 	mls	r5, r9, r8, r5
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e4:	fb08 f50e 	mul.w	r5, r8, lr
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 f001 	lsl.w	r0, r0, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2b4>
 8000400:	42a5      	cmp	r5, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2b4>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	b29d      	uxth	r5, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f103 35ff 	add.w	r5, r3, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2ac>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2ac>
 8000432:	3b02      	subs	r3, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043a:	fba3 9502 	umull	r9, r5, r3, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x29c>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x298>
 800044c:	b156      	cbz	r6, 8000464 <__udivmoddi4+0x208>
 800044e:	ebb0 0208 	subs.w	r2, r0, r8
 8000452:	eb64 040e 	sbc.w	r4, r4, lr
 8000456:	fa04 f707 	lsl.w	r7, r4, r7
 800045a:	40ca      	lsrs	r2, r1
 800045c:	40cc      	lsrs	r4, r1
 800045e:	4317      	orrs	r7, r2
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	4618      	mov	r0, r3
 8000466:	2100      	movs	r1, #0
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	f1c3 0120 	rsb	r1, r3, #32
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	fa20 f201 	lsr.w	r2, r0, r1
 8000478:	fa25 f101 	lsr.w	r1, r5, r1
 800047c:	409d      	lsls	r5, r3
 800047e:	432a      	orrs	r2, r5
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fbb1 f0f7 	udiv	r0, r1, r7
 800048c:	fb07 1510 	mls	r5, r7, r0, r1
 8000490:	0c11      	lsrs	r1, r2, #16
 8000492:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000496:	fb00 f50e 	mul.w	r5, r0, lr
 800049a:	428d      	cmp	r5, r1
 800049c:	fa04 f403 	lsl.w	r4, r4, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x258>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b0>
 80004ac:	428d      	cmp	r5, r1
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b0>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1b49      	subs	r1, r1, r5
 80004b6:	b292      	uxth	r2, r2
 80004b8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004bc:	fb07 1115 	mls	r1, r7, r5, r1
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	fb05 f10e 	mul.w	r1, r5, lr
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x282>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2a8>
 80004d6:	4291      	cmp	r1, r2
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2a8>
 80004da:	3d02      	subs	r5, #2
 80004dc:	4462      	add	r2, ip
 80004de:	1a52      	subs	r2, r2, r1
 80004e0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0xfc>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xa2>
 80004ec:	4639      	mov	r1, r7
 80004ee:	e6e6      	b.n	80002be <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x90>
 80004f4:	4548      	cmp	r0, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3b01      	subs	r3, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f0>
 8000504:	4645      	mov	r5, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x282>
 8000508:	462b      	mov	r3, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1da>
 800050c:	4640      	mov	r0, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x258>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b0>
 8000514:	3d02      	subs	r5, #2
 8000516:	4462      	add	r2, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x124>
 800051a:	4608      	mov	r0, r1
 800051c:	e70a      	b.n	8000334 <__udivmoddi4+0xd8>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e742      	b.n	80003aa <__udivmoddi4+0x14e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_GPIO_Init+0x2c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <MX_GPIO_Init+0x2c>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_GPIO_Init+0x2c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fbe0 	bl	8000d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f815 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f7ff ffdf 	bl	8000528 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800056a:	f000 fb0d 	bl	8000b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t value;

	  if (HAL_UART_Receive(&huart1, &value, 1, 0) == HAL_OK)
 800056e:	1df9      	adds	r1, r7, #7
 8000570:	2300      	movs	r3, #0
 8000572:	2201      	movs	r2, #1
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <main+0x34>)
 8000576:	f001 ffa9 	bl	80024cc <HAL_UART_Receive>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1f6      	bne.n	800056e <main+0x16>
	  {
		  command_buffer_append(value);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f97a 	bl	800087c <command_buffer_append>
  {
 8000588:	e7f1      	b.n	800056e <main+0x16>
 800058a:	bf00      	nop
 800058c:	2000010c 	.word	0x2000010c

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2238      	movs	r2, #56	; 0x38
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f85e 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b6:	f000 fe8b 	bl	80012d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80005d4:	234b      	movs	r3, #75	; 0x4b
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 ff15 	bl	8001418 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005f4:	f000 f818 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2303      	movs	r3, #3
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2104      	movs	r1, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fa13 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800061c:	f000 f804 	bl	8000628 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x44>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x44>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6613      	str	r3, [r2, #96]	; 0x60
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x44>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x44>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6593      	str	r3, [r2, #88]	; 0x58
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x44>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 fb7e 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	e00a      	b.n	80006f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006e2:	f3af 8000 	nop.w
 80006e6:	4601      	mov	r1, r0
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	b2ca      	uxtb	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbf0      	blt.n	80006e2 <_read+0x12>
  }

  return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e009      	b.n	8000730 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	60ba      	str	r2, [r7, #8]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f889 	bl	800083c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	429a      	cmp	r2, r3
 8000736:	dbf1      	blt.n	800071c <_write+0x12>
  }
  return len;
 8000738:	687b      	ldr	r3, [r7, #4]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <_close>:

int _close(int file)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076a:	605a      	str	r2, [r3, #4]
  return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_isatty>:

int _isatty(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f002 ffa2 	bl	8003724 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20020000 	.word	0x20020000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000c4 	.word	0x200000c4
 8000814:	200002f0 	.word	0x200002f0

08000818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__io_putchar>:
static uint32_t command_size;



int __io_putchar(int ch)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	d109      	bne.n	800085e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800084a:	230d      	movs	r3, #13
 800084c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 800084e:	f107 010f 	add.w	r1, r7, #15
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2201      	movs	r2, #1
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <__io_putchar+0x3c>)
 800085a:	f001 fda9 	bl	80023b0 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800085e:	1d39      	adds	r1, r7, #4
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2201      	movs	r2, #1
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <__io_putchar+0x3c>)
 8000868:	f001 fda2 	bl	80023b0 <HAL_UART_Transmit>
    return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000010c 	.word	0x2000010c

0800087c <command_buffer_append>:



// add character form UART to command buffer if character is '\n'

void command_buffer_append(uint8_t value){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	if (value == '\n') {
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d114      	bne.n	80008b6 <command_buffer_append+0x3a>
		if (command_size > 0) {
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <command_buffer_append+0x60>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d01f      	beq.n	80008d4 <command_buffer_append+0x58>
			command_buffer[command_size] = '\0';
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <command_buffer_append+0x60>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <command_buffer_append+0x64>)
 800089a:	2100      	movs	r1, #0
 800089c:	54d1      	strb	r1, [r2, r3]
			if(parse_command() == 0){
 800089e:	f000 f823 	bl	80008e8 <parse_command>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <command_buffer_append+0x32>
				printf("error\n");
 80008a8:	480e      	ldr	r0, [pc, #56]	; (80008e4 <command_buffer_append+0x68>)
 80008aa:	f002 fdf9 	bl	80034a0 <puts>
			}
			command_size = 0;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <command_buffer_append+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
		if (command_size >= COMMAND_MAX_LENGHT) {
			command_size = 0;
		}
		command_buffer[command_size++] = value;
	}
}
 80008b4:	e00e      	b.n	80008d4 <command_buffer_append+0x58>
		if (command_size >= COMMAND_MAX_LENGHT) {
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <command_buffer_append+0x60>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b3b      	cmp	r3, #59	; 0x3b
 80008bc:	d902      	bls.n	80008c4 <command_buffer_append+0x48>
			command_size = 0;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <command_buffer_append+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
		command_buffer[command_size++] = value;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <command_buffer_append+0x60>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	4904      	ldr	r1, [pc, #16]	; (80008dc <command_buffer_append+0x60>)
 80008cc:	600a      	str	r2, [r1, #0]
 80008ce:	4904      	ldr	r1, [pc, #16]	; (80008e0 <command_buffer_append+0x64>)
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	54ca      	strb	r2, [r1, r3]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000108 	.word	0x20000108
 80008e0:	200000c8 	.word	0x200000c8
 80008e4:	08003c08 	.word	0x08003c08

080008e8 <parse_command>:



// return 1 if command is found

int parse_command(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b098      	sub	sp, #96	; 0x60
 80008ec:	af00      	add	r7, sp, #0
    char function_code[FUNCTION_CODE_MAX_LENGHT];
    char args[MAX_NUM_ARGS][ARG_MAX_LENGHT];

    // get function code form command_buffer
    int function_code_idx = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i< command_size && i < FUNCTION_CODE_MAX_LENGHT; i++){
 80008f2:	2300      	movs	r3, #0
 80008f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80008f6:	e038      	b.n	800096a <parse_command+0x82>
    	if(command_buffer[i] == '\r'){
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <parse_command+0x194>)
 80008fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b0d      	cmp	r3, #13
 8000902:	d119      	bne.n	8000938 <parse_command+0x50>
    		strncpy(function_code, command_buffer, i);
 8000904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800090a:	495c      	ldr	r1, [pc, #368]	; (8000a7c <parse_command+0x194>)
 800090c:	4618      	mov	r0, r3
 800090e:	f002 feaf 	bl	8003670 <strncpy>
    		function_code[i] = '\0';
 8000912:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000918:	4413      	add	r3, r2
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
    		if(strcmp(function_code, "help")){
 800091e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000922:	4957      	ldr	r1, [pc, #348]	; (8000a80 <parse_command+0x198>)
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc77 	bl	8000218 <strcmp>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <parse_command+0x50>
    			help();
 8000930:	f000 f908 	bl	8000b44 <help>
    			return 1;
 8000934:	2301      	movs	r3, #1
 8000936:	e09c      	b.n	8000a72 <parse_command+0x18a>
    		}
    	}

        if(command_buffer[i] == '['){
 8000938:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <parse_command+0x194>)
 800093a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b5b      	cmp	r3, #91	; 0x5b
 8000942:	d10f      	bne.n	8000964 <parse_command+0x7c>
            function_code_idx = i;
 8000944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
            strncpy(function_code, command_buffer, function_code_idx);
 8000948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800094a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094e:	494b      	ldr	r1, [pc, #300]	; (8000a7c <parse_command+0x194>)
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fe8d 	bl	8003670 <strncpy>
            function_code[function_code_idx] = '\0';
 8000956:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800095a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095c:	4413      	add	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
            break;
 8000962:	e00a      	b.n	800097a <parse_command+0x92>
    for(int i = 0; i< command_size && i < FUNCTION_CODE_MAX_LENGHT; i++){
 8000964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000966:	3301      	adds	r3, #1
 8000968:	65bb      	str	r3, [r7, #88]	; 0x58
 800096a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800096c:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <parse_command+0x19c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d202      	bcs.n	800097a <parse_command+0x92>
 8000974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000976:	2b0e      	cmp	r3, #14
 8000978:	ddbe      	ble.n	80008f8 <parse_command+0x10>
        }
    }

    int arg_idx = -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
    int data_idx = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	653b      	str	r3, [r7, #80]	; 0x50

    bool close_bracket = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    //get arguments from command buffer
    for(int i = function_code_idx + 1; i < command_size; i++){
 800098a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800098c:	3301      	adds	r3, #1
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000990:	e058      	b.n	8000a44 <parse_command+0x15c>
        if(i == function_code_idx + 1){
 8000992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000994:	3301      	adds	r3, #1
 8000996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000998:	429a      	cmp	r2, r3
 800099a:	d107      	bne.n	80009ac <parse_command+0xc4>
            if(command_buffer[i] != '='){
 800099c:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <parse_command+0x194>)
 800099e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b3d      	cmp	r3, #61	; 0x3d
 80009a6:	d049      	beq.n	8000a3c <parse_command+0x154>
                return 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e062      	b.n	8000a72 <parse_command+0x18a>
            }
            continue;
        }
        if(command_buffer[i] == ']') {
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <parse_command+0x194>)
 80009ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b5d      	cmp	r3, #93	; 0x5d
 80009b6:	d10f      	bne.n	80009d8 <parse_command+0xf0>
            close_bracket = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            args[arg_idx][data_idx] = '\0';
 80009be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	3360      	adds	r3, #96	; 0x60
 80009ca:	19da      	adds	r2, r3, r7
 80009cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ce:	4413      	add	r3, r2
 80009d0:	3b5c      	subs	r3, #92	; 0x5c
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
            break;
 80009d6:	e03a      	b.n	8000a4e <parse_command+0x166>
        }
        if(command_buffer[i] == ';'){
 80009d8:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <parse_command+0x194>)
 80009da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b3b      	cmp	r3, #59	; 0x3b
 80009e2:	d111      	bne.n	8000a08 <parse_command+0x120>
            args[arg_idx][data_idx] = '\0';
 80009e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	3360      	adds	r3, #96	; 0x60
 80009f0:	19da      	adds	r2, r3, r7
 80009f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009f4:	4413      	add	r3, r2
 80009f6:	3b5c      	subs	r3, #92	; 0x5c
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
            arg_idx ++;
 80009fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009fe:	3301      	adds	r3, #1
 8000a00:	657b      	str	r3, [r7, #84]	; 0x54
            data_idx = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
 8000a06:	e01a      	b.n	8000a3e <parse_command+0x156>
        }
        else{
            if(arg_idx == -1) arg_idx = 0;
 8000a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0e:	d101      	bne.n	8000a14 <parse_command+0x12c>
 8000a10:	2300      	movs	r3, #0
 8000a12:	657b      	str	r3, [r7, #84]	; 0x54
            args[arg_idx][data_idx] = command_buffer[i];
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <parse_command+0x194>)
 8000a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a18:	4413      	add	r3, r2
 8000a1a:	7819      	ldrb	r1, [r3, #0]
 8000a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a1e:	4613      	mov	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	3360      	adds	r3, #96	; 0x60
 8000a28:	19da      	adds	r2, r3, r7
 8000a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3b5c      	subs	r3, #92	; 0x5c
 8000a30:	460a      	mov	r2, r1
 8000a32:	701a      	strb	r2, [r3, #0]
            data_idx += 1;
 8000a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a36:	3301      	adds	r3, #1
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
 8000a3a:	e000      	b.n	8000a3e <parse_command+0x156>
            continue;
 8000a3c:	bf00      	nop
    for(int i = function_code_idx + 1; i < command_size; i++){
 8000a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a40:	3301      	adds	r3, #1
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <parse_command+0x19c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d3a1      	bcc.n	8000992 <parse_command+0xaa>
        }
    }

    // if there is no close bracket
    if(!close_bracket) return 0;
 8000a4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <parse_command+0x178>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e008      	b.n	8000a72 <parse_command+0x18a>

    return callback(function_code, args, arg_idx + 1);
 8000a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	1d39      	adds	r1, r7, #4
 8000a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f80c 	bl	8000a88 <callback>
 8000a70:	4603      	mov	r3, r0

}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3760      	adds	r7, #96	; 0x60
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000c8 	.word	0x200000c8
 8000a80:	08003c10 	.word	0x08003c10
 8000a84:	20000108 	.word	0x20000108

08000a88 <callback>:



int callback(char* function_code, char args[MAX_NUM_ARGS][ARG_MAX_LENGHT], int num_args)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
    command_typedef command;
    bool is_command_found = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    for(int i = 0; i < command_list_size; i++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e027      	b.n	8000af0 <callback+0x68>
        if(strcmp(function_code, command_list[i].function_code) == 0){
 8000aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <callback+0xa8>)
 8000aac:	4413      	add	r3, r2
 8000aae:	4619      	mov	r1, r3
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff fbb1 	bl	8000218 <strcmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d116      	bne.n	8000aea <callback+0x62>
            command = command_list[i];
 8000abc:	491c      	ldr	r1, [pc, #112]	; (8000b30 <callback+0xa8>)
 8000abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	f107 0414 	add.w	r4, r7, #20
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	6023      	str	r3, [r4, #0]
            if(num_args != command.num_args){
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d001      	beq.n	8000ae4 <callback+0x5c>
                return 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e020      	b.n	8000b26 <callback+0x9e>
            }
            is_command_found = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for(int i = 0; i < command_list_size; i++){
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	3301      	adds	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <callback+0xac>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dbd2      	blt.n	8000aa0 <callback+0x18>
        }
    }
    if(!is_command_found) return 0;
 8000afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <callback+0x84>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e00c      	b.n	8000b26 <callback+0x9e>


    //  Add if statement to handle command

    if(strcmp(function_code, "komenda") == 0){
 8000b0c:	490a      	ldr	r1, [pc, #40]	; (8000b38 <callback+0xb0>)
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fb82 	bl	8000218 <strcmp>

        // do something
    }


    if(strcmp(function_code, "komenda1") == 0){
 8000b14:	4909      	ldr	r1, [pc, #36]	; (8000b3c <callback+0xb4>)
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fb7e 	bl	8000218 <strcmp>

        // do something
    }


    if(strcmp(function_code, "set_speed") == 0){
 8000b1c:	4908      	ldr	r1, [pc, #32]	; (8000b40 <callback+0xb8>)
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fb7a 	bl	8000218 <strcmp>

        // do something
    }

    return 1;
 8000b24:	2301      	movs	r3, #1
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000040 	.word	0x20000040
 8000b38:	08003c18 	.word	0x08003c18
 8000b3c:	08003c20 	.word	0x08003c20
 8000b40:	08003c2c 	.word	0x08003c2c

08000b44 <help>:

//send avaible commands
void help(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	for(int i = 0; i < command_list_size; i++){
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	e00c      	b.n	8000b6a <help+0x26>
		printf("%s\n", command_list[i].function_code);
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <help+0x3c>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fc9e 	bl	80034a0 <puts>
	for(int i = 0; i < command_list_size; i++){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3301      	adds	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <help+0x40>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbed      	blt.n	8000b50 <help+0xc>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000004 	.word	0x20000004
 8000b84:	20000040 	.word	0x20000040

08000b88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f001 fb9d 	bl	8002310 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f7ff fd24 	bl	8000628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f002 fa8e 	bl	8003104 <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f7ff fd1b 	bl	8000628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f002 fac3 	bl	8003180 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f7ff fd12 	bl	8000628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f002 fa44 	bl	8003092 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f7ff fd0a 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	40013800 	.word	0x40013800

08000c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09e      	sub	sp, #120	; 0x78
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2254      	movs	r2, #84	; 0x54
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fd0d 	bl	8003660 <memset>
  if(uartHandle->Instance==USART1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_UART_MspInit+0xa4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d135      	bne.n	8000cbc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 f909 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c68:	f7ff fcde 	bl	8000628 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6613      	str	r3, [r2, #96]	; 0x60
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c9c:	2330      	movs	r3, #48	; 0x30
 8000c9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000cb8:	f000 f988 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3778      	adds	r7, #120	; 0x78
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff fda0 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fd17 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fc29 	bl	8000558 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000d14:	08003c88 	.word	0x08003c88
  ldr r2, =_sbss
 8000d18:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000d1c:	200002f0 	.word	0x200002f0

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>

08000d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f91b 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f80e 	bl	8000d54 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d44:	f7ff fc76 	bl	8000634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	79fb      	ldrb	r3, [r7, #7]

}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x68>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d022      	beq.n	8000dae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_InitTick+0x68>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f918 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10f      	bne.n	8000da8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d809      	bhi.n	8000da2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	f000 f8f2 	bl	8000f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_InitTick+0x70>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e007      	b.n	8000db2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e004      	b.n	8000db2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e001      	b.n	8000db2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000048 	.word	0x20000048
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000044 	.word	0x20000044

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x1c>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x20>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x1c>)
 8000dd8:	6013      	str	r3, [r2, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	200001a0 	.word	0x200001a0
 8000de8:	20000048 	.word	0x20000048

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001a0 	.word	0x200001a0

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb2 	bl	8000f24 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fda:	e15a      	b.n	8001292 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 814c 	beq.w	800128c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 0201 	and.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0203 	and.w	r2, r3, #3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80a6 	beq.w	800128c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001144:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6613      	str	r3, [r2, #96]	; 0x60
 800114c:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 800114e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001182:	d01f      	beq.n	80011c4 <HAL_GPIO_Init+0x1f8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_GPIO_Init+0x2ec>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d019      	beq.n	80011c0 <HAL_GPIO_Init+0x1f4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x2f0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d013      	beq.n	80011bc <HAL_GPIO_Init+0x1f0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2f4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d00d      	beq.n	80011b8 <HAL_GPIO_Init+0x1ec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x1e8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011ac:	2305      	movs	r3, #5
 80011ae:	e00a      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b0:	2306      	movs	r3, #6
 80011b2:	e008      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d6:	4937      	ldr	r1, [pc, #220]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_GPIO_Init+0x300>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001208:	4a30      	ldr	r2, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x300>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_GPIO_Init+0x300>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x300>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_GPIO_Init+0x300>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f ae9d 	bne.w	8000fdc <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	48001000 	.word	0x48001000
 80012c8:	48001400 	.word	0x48001400
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d141      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012de:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ea:	d131      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	4a46      	ldr	r2, [pc, #280]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001304:	4a41      	ldr	r2, [pc, #260]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2232      	movs	r2, #50	; 0x32
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4a3f      	ldr	r2, [pc, #252]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	0c9b      	lsrs	r3, r3, #18
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001322:	e002      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3b01      	subs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001336:	d102      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f2      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d158      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e057      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800135c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001360:	e04d      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001368:	d141      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d131      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2232      	movs	r2, #50	; 0x32
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ae:	e002      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c2:	d102      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f2      	bne.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d112      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e011      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013ec:	e007      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40007000 	.word	0x40007000
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2fe      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d075      	beq.n	8001522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b97      	ldr	r3, [pc, #604]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b94      	ldr	r3, [pc, #592]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d102      	bne.n	8001456 <HAL_RCC_OscConfig+0x3e>
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d002      	beq.n	800145c <HAL_RCC_OscConfig+0x44>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d05b      	beq.n	8001520 <HAL_RCC_OscConfig+0x108>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d157      	bne.n	8001520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2d9      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x74>
 800147e:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a84      	ldr	r2, [pc, #528]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e01d      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b7c      	ldr	r3, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7b      	ldr	r2, [pc, #492]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0xb0>
 80014b0:	4b78      	ldr	r3, [pc, #480]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a77      	ldr	r2, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a74      	ldr	r2, [pc, #464]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc8c 	bl	8000dec <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fc88 	bl	8000dec <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e29e      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0xc0>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc78 	bl	8000dec <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fc74 	bl	8000dec <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e28a      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4b60      	ldr	r3, [pc, #384]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0xe8>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d075      	beq.n	800161a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4b56      	ldr	r3, [pc, #344]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x136>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d002      	beq.n	8001554 <HAL_RCC_OscConfig+0x13c>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d11f      	bne.n	8001594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x154>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e25d      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4946      	ldr	r1, [pc, #280]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001580:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_RCC_OscConfig+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fbe5 	bl	8000d54 <HAL_InitTick>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d043      	beq.n	8001618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e249      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d023      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a3c      	ldr	r2, [pc, #240]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc20 	bl	8000dec <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc1c 	bl	8000dec <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e232      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	061b      	lsls	r3, r3, #24
 80015dc:	492d      	ldr	r1, [pc, #180]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e01a      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbfc 	bl	8000dec <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fbf8 	bl	8000dec <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e20e      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1e0>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d041      	beq.n	80016aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff fbd5 	bl	8000dec <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fbd1 	bl	8000dec <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1e7      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ef      	beq.n	8001646 <HAL_RCC_OscConfig+0x22e>
 8001666:	e020      	b.n	80016aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fbb8 	bl	8000dec <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167e:	e00d      	b.n	800169c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fbb4 	bl	8000dec <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d906      	bls.n	800169c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1ca      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ea      	bne.n	8001680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80a6 	beq.w	8001804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x2b4>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x2b6>
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a7e      	ldr	r2, [pc, #504]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
 80016de:	4b7c      	ldr	r3, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ee:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fa:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb71 	bl	8000dec <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170e:	f7ff fb6d 	bl	8000dec <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e183      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <HAL_RCC_OscConfig+0x4bc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_RCC_OscConfig+0x32e>
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	e024      	b.n	8001790 <HAL_RCC_OscConfig+0x378>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d110      	bne.n	8001770 <HAL_RCC_OscConfig+0x358>
 800174e:	4b60      	ldr	r3, [pc, #384]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001754:	4a5e      	ldr	r2, [pc, #376]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	4a5a      	ldr	r2, [pc, #360]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176e:	e00f      	b.n	8001790 <HAL_RCC_OscConfig+0x378>
 8001770:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d016      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fb28 	bl	8000dec <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb24 	bl	8000dec <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e138      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ed      	beq.n	80017a0 <HAL_RCC_OscConfig+0x388>
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb11 	bl	8000dec <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb0d 	bl	8000dec <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e121      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ed      	bne.n	80017ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a34      	ldr	r2, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03c      	beq.n	800188a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01c      	beq.n	8001852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181e:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fae0 	bl	8000dec <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001830:	f7ff fadc 	bl	8000dec <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0f2      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ef      	beq.n	8001830 <HAL_RCC_OscConfig+0x418>
 8001850:	e01b      	b.n	800188a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fac3 	bl	8000dec <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186a:	f7ff fabf 	bl	8000dec <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0d5      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80c9 	beq.w	8001a26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b0c      	cmp	r3, #12
 800189e:	f000 8083 	beq.w	80019a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d15e      	bne.n	8001968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa99 	bl	8000dec <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e00c      	b.n	80018d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fa95 	bl	8000dec <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d905      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0ab      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_RCC_OscConfig+0x61c>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6a11      	ldr	r1, [r2, #32]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018fe:	0212      	lsls	r2, r2, #8
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001906:	0852      	lsrs	r2, r2, #1
 8001908:	3a01      	subs	r2, #1
 800190a:	0552      	lsls	r2, r2, #21
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001912:	0852      	lsrs	r2, r2, #1
 8001914:	3a01      	subs	r2, #1
 8001916:	0652      	lsls	r2, r2, #25
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800191e:	06d2      	lsls	r2, r2, #27
 8001920:	430a      	orrs	r2, r1
 8001922:	4943      	ldr	r1, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001924:	4313      	orrs	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a40      	ldr	r2, [pc, #256]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a3d      	ldr	r2, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fa54 	bl	8000dec <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fa50 	bl	8000dec <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e066      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x530>
 8001966:	e05e      	b.n	8001a26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fa3a 	bl	8000dec <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa36 	bl	8000dec <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e04c      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x620>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
 80019a6:	e03e      	b.n	8001a26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e039      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x618>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d12c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	3b01      	subs	r3, #1
 80019d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d123      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d11b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d113      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	019f800c 	.word	0x019f800c
 8001a38:	feeefffc 	.word	0xfeeefffc

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e11e      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	498c      	ldr	r1, [pc, #560]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b8a      	ldr	r3, [pc, #552]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e106      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d073      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d129      	bne.n	8001aec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0f4      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa8:	f000 f99e 	bl	8001de8 <RCC_GetSysClockFreqFromPLLSource>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4a7c      	ldr	r2, [pc, #496]	; (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d93f      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d033      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12f      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad6:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ade:	4a70      	ldr	r2, [pc, #448]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e024      	b.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0c6      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0be      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b14:	f000 f8ce 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a61      	ldr	r2, [pc, #388]	; (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d909      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4957      	ldr	r1, [pc, #348]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f950 	bl	8000dec <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f94c 	bl	8000dec <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e095      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
 8001bca:	e008      	b.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b80      	cmp	r3, #128	; 0x80
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d21d      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 020f 	bic.w	r2, r3, #15
 8001bf4:	4929      	ldr	r1, [pc, #164]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f8f6 	bl	8000dec <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f8f2 	bl	8000dec <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1ed      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4917      	ldr	r1, [pc, #92]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c66:	f000 f825 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <HAL_RCC_ClockConfig+0x26c>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x270>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f862 	bl	8000d54 <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	04c4b400 	.word	0x04c4b400
 8001ca8:	08003c38 	.word	0x08003c38
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000044 	.word	0x20000044

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e047      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e03e      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d136      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	68d2      	ldr	r2, [r2, #12]
 8001d14:	0a12      	lsrs	r2, r2, #8
 8001d16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e00c      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	0a12      	lsrs	r2, r2, #8
 8001d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0e5b      	lsrs	r3, r3, #25
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e001      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003c48 	.word	0x08003c48

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc0:	f7ff ffda 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08003c48 	.word	0x08003c48

08001de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10c      	bne.n	8001e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e16:	68d2      	ldr	r2, [r2, #12]
 8001e18:	0a12      	lsrs	r2, r2, #8
 8001e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
    break;
 8001e24:	e00c      	b.n	8001e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	0a12      	lsrs	r2, r2, #8
 8001e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    break;
 8001e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0e5b      	lsrs	r3, r3, #25
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	00f42400 	.word	0x00f42400

08001e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8098 	beq.w	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	; 0x58
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a39      	ldr	r2, [pc, #228]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eca:	f7fe ff8f 	bl	8000dec <HAL_GetTick>
 8001ece:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7fe ff8b 	bl	8000dec <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d902      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ef      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d159      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01e      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d019      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe ff4b 	bl	8000dec <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f58:	e00b      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7fe ff47 	bl	8000dec <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d902      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ec      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	74bb      	strb	r3, [r7, #18]
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb0:	7c7b      	ldrb	r3, [r7, #17]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4ba7      	ldr	r3, [pc, #668]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	4aa6      	ldr	r2, [pc, #664]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fce:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f023 0203 	bic.w	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	499d      	ldr	r1, [pc, #628]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff0:	4b98      	ldr	r3, [pc, #608]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f023 020c 	bic.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4995      	ldr	r1, [pc, #596]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002012:	4b90      	ldr	r3, [pc, #576]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	498c      	ldr	r1, [pc, #560]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002034:	4b87      	ldr	r3, [pc, #540]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4984      	ldr	r1, [pc, #528]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002056:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	497b      	ldr	r1, [pc, #492]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002078:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	4973      	ldr	r1, [pc, #460]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800209a:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	496a      	ldr	r1, [pc, #424]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4962      	ldr	r1, [pc, #392]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	4959      	ldr	r1, [pc, #356]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002100:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	4951      	ldr	r1, [pc, #324]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002122:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	4948      	ldr	r1, [pc, #288]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d015      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4940      	ldr	r1, [pc, #256]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	4932      	ldr	r1, [pc, #200]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219a:	d105      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	4924      	ldr	r1, [pc, #144]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	4916      	ldr	r1, [pc, #88]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800220a:	d105      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d019      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002242:	d109      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a02      	ldr	r2, [pc, #8]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
 8002250:	e002      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4926      	ldr	r1, [pc, #152]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002300:	7cbb      	ldrb	r3, [r7, #18]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e042      	b.n	80023a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fc73 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2224      	movs	r2, #36	; 0x24
 800233e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fc7a 	bl	8002c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f97b 	bl	800265c <UART_SetConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e01b      	b.n	80023a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fcf9 	bl	8002d98 <UART_CheckIdleState>
 80023a6:	4603      	mov	r3, r0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d17b      	bne.n	80024c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_UART_Transmit+0x26>
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e074      	b.n	80024c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2221      	movs	r2, #33	; 0x21
 80023e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ea:	f7fe fcff 	bl	8000dec <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d108      	bne.n	800241c <HAL_UART_Transmit+0x6c>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e003      	b.n	8002424 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002424:	e030      	b.n	8002488 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fd5b 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e03d      	b.n	80024c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	3302      	adds	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e007      	b.n	8002476 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1c8      	bne.n	8002426 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2200      	movs	r2, #0
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fd24 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e006      	b.n	80024c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	f040 80b5 	bne.w	8002652 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Receive+0x28>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0ad      	b.n	8002654 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2222      	movs	r2, #34	; 0x22
 8002504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800250e:	f7fe fc6d 	bl	8000dec <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d10e      	bne.n	800254c <HAL_UART_Receive+0x80>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_UART_Receive+0x76>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f240 12ff 	movw	r2, #511	; 0x1ff
 800253c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002540:	e02d      	b.n	800259e <HAL_UART_Receive+0xd2>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800254a:	e028      	b.n	800259e <HAL_UART_Receive+0xd2>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_UART_Receive+0xa4>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <HAL_UART_Receive+0x9a>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	22ff      	movs	r2, #255	; 0xff
 8002560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002564:	e01b      	b.n	800259e <HAL_UART_Receive+0xd2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	227f      	movs	r2, #127	; 0x7f
 800256a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800256e:	e016      	b.n	800259e <HAL_UART_Receive+0xd2>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002578:	d10d      	bne.n	8002596 <HAL_UART_Receive+0xca>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_UART_Receive+0xc0>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	227f      	movs	r2, #127	; 0x7f
 8002586:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800258a:	e008      	b.n	800259e <HAL_UART_Receive+0xd2>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	223f      	movs	r2, #63	; 0x3f
 8002590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002594:	e003      	b.n	800259e <HAL_UART_Receive+0xd2>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80025a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d108      	bne.n	80025c2 <HAL_UART_Receive+0xf6>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e003      	b.n	80025ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025ca:	e036      	b.n	800263a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2120      	movs	r1, #32
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fc88 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e032      	b.n	8002654 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
 80025fe:	4013      	ands	r3, r2
 8002600:	b29a      	uxth	r2, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3302      	adds	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e00c      	b.n	8002628 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8a7b      	ldrh	r3, [r7, #18]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4013      	ands	r3, r2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1c2      	bne.n	80025cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
  }
}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002660:	b08c      	sub	sp, #48	; 0x30
 8002662:	af00      	add	r7, sp, #0
 8002664:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	431a      	orrs	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4313      	orrs	r3, r2
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4baa      	ldr	r3, [pc, #680]	; (8002934 <UART_SetConfig+0x2d8>)
 800268c:	4013      	ands	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002694:	430b      	orrs	r3, r1
 8002696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a9f      	ldr	r2, [pc, #636]	; (8002938 <UART_SetConfig+0x2dc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	4313      	orrs	r3, r2
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80026d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026dc:	430b      	orrs	r3, r1
 80026de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f023 010f 	bic.w	r1, r3, #15
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a90      	ldr	r2, [pc, #576]	; (800293c <UART_SetConfig+0x2e0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d125      	bne.n	800274c <UART_SetConfig+0xf0>
 8002700:	4b8f      	ldr	r3, [pc, #572]	; (8002940 <UART_SetConfig+0x2e4>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d81a      	bhi.n	8002744 <UART_SetConfig+0xe8>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <UART_SetConfig+0xb8>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002725 	.word	0x08002725
 8002718:	08002735 	.word	0x08002735
 800271c:	0800272d 	.word	0x0800272d
 8002720:	0800273d 	.word	0x0800273d
 8002724:	2301      	movs	r3, #1
 8002726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800272a:	e116      	b.n	800295a <UART_SetConfig+0x2fe>
 800272c:	2302      	movs	r3, #2
 800272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002732:	e112      	b.n	800295a <UART_SetConfig+0x2fe>
 8002734:	2304      	movs	r3, #4
 8002736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273a:	e10e      	b.n	800295a <UART_SetConfig+0x2fe>
 800273c:	2308      	movs	r3, #8
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002742:	e10a      	b.n	800295a <UART_SetConfig+0x2fe>
 8002744:	2310      	movs	r3, #16
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274a:	e106      	b.n	800295a <UART_SetConfig+0x2fe>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7c      	ldr	r2, [pc, #496]	; (8002944 <UART_SetConfig+0x2e8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d138      	bne.n	80027c8 <UART_SetConfig+0x16c>
 8002756:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <UART_SetConfig+0x2e4>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b0c      	cmp	r3, #12
 8002762:	d82d      	bhi.n	80027c0 <UART_SetConfig+0x164>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <UART_SetConfig+0x110>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027c1 	.word	0x080027c1
 8002778:	080027c1 	.word	0x080027c1
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027c1 	.word	0x080027c1
 8002784:	080027c1 	.word	0x080027c1
 8002788:	080027c1 	.word	0x080027c1
 800278c:	080027a9 	.word	0x080027a9
 8002790:	080027c1 	.word	0x080027c1
 8002794:	080027c1 	.word	0x080027c1
 8002798:	080027c1 	.word	0x080027c1
 800279c:	080027b9 	.word	0x080027b9
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a6:	e0d8      	b.n	800295a <UART_SetConfig+0x2fe>
 80027a8:	2302      	movs	r3, #2
 80027aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ae:	e0d4      	b.n	800295a <UART_SetConfig+0x2fe>
 80027b0:	2304      	movs	r3, #4
 80027b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b6:	e0d0      	b.n	800295a <UART_SetConfig+0x2fe>
 80027b8:	2308      	movs	r3, #8
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027be:	e0cc      	b.n	800295a <UART_SetConfig+0x2fe>
 80027c0:	2310      	movs	r3, #16
 80027c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027c6:	e0c8      	b.n	800295a <UART_SetConfig+0x2fe>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5e      	ldr	r2, [pc, #376]	; (8002948 <UART_SetConfig+0x2ec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d125      	bne.n	800281e <UART_SetConfig+0x1c2>
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <UART_SetConfig+0x2e4>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d016      	beq.n	800280e <UART_SetConfig+0x1b2>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d818      	bhi.n	8002816 <UART_SetConfig+0x1ba>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d00a      	beq.n	80027fe <UART_SetConfig+0x1a2>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d814      	bhi.n	8002816 <UART_SetConfig+0x1ba>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <UART_SetConfig+0x19a>
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d008      	beq.n	8002806 <UART_SetConfig+0x1aa>
 80027f4:	e00f      	b.n	8002816 <UART_SetConfig+0x1ba>
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027fc:	e0ad      	b.n	800295a <UART_SetConfig+0x2fe>
 80027fe:	2302      	movs	r3, #2
 8002800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002804:	e0a9      	b.n	800295a <UART_SetConfig+0x2fe>
 8002806:	2304      	movs	r3, #4
 8002808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800280c:	e0a5      	b.n	800295a <UART_SetConfig+0x2fe>
 800280e:	2308      	movs	r3, #8
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002814:	e0a1      	b.n	800295a <UART_SetConfig+0x2fe>
 8002816:	2310      	movs	r3, #16
 8002818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800281c:	e09d      	b.n	800295a <UART_SetConfig+0x2fe>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4a      	ldr	r2, [pc, #296]	; (800294c <UART_SetConfig+0x2f0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d125      	bne.n	8002874 <UART_SetConfig+0x218>
 8002828:	4b45      	ldr	r3, [pc, #276]	; (8002940 <UART_SetConfig+0x2e4>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002832:	2bc0      	cmp	r3, #192	; 0xc0
 8002834:	d016      	beq.n	8002864 <UART_SetConfig+0x208>
 8002836:	2bc0      	cmp	r3, #192	; 0xc0
 8002838:	d818      	bhi.n	800286c <UART_SetConfig+0x210>
 800283a:	2b80      	cmp	r3, #128	; 0x80
 800283c:	d00a      	beq.n	8002854 <UART_SetConfig+0x1f8>
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d814      	bhi.n	800286c <UART_SetConfig+0x210>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <UART_SetConfig+0x1f0>
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d008      	beq.n	800285c <UART_SetConfig+0x200>
 800284a:	e00f      	b.n	800286c <UART_SetConfig+0x210>
 800284c:	2300      	movs	r3, #0
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002852:	e082      	b.n	800295a <UART_SetConfig+0x2fe>
 8002854:	2302      	movs	r3, #2
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800285a:	e07e      	b.n	800295a <UART_SetConfig+0x2fe>
 800285c:	2304      	movs	r3, #4
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002862:	e07a      	b.n	800295a <UART_SetConfig+0x2fe>
 8002864:	2308      	movs	r3, #8
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800286a:	e076      	b.n	800295a <UART_SetConfig+0x2fe>
 800286c:	2310      	movs	r3, #16
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002872:	e072      	b.n	800295a <UART_SetConfig+0x2fe>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	; (8002950 <UART_SetConfig+0x2f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12a      	bne.n	80028d4 <UART_SetConfig+0x278>
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <UART_SetConfig+0x2e4>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800288c:	d01a      	beq.n	80028c4 <UART_SetConfig+0x268>
 800288e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002892:	d81b      	bhi.n	80028cc <UART_SetConfig+0x270>
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d00c      	beq.n	80028b4 <UART_SetConfig+0x258>
 800289a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289e:	d815      	bhi.n	80028cc <UART_SetConfig+0x270>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <UART_SetConfig+0x250>
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d008      	beq.n	80028bc <UART_SetConfig+0x260>
 80028aa:	e00f      	b.n	80028cc <UART_SetConfig+0x270>
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028b2:	e052      	b.n	800295a <UART_SetConfig+0x2fe>
 80028b4:	2302      	movs	r3, #2
 80028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ba:	e04e      	b.n	800295a <UART_SetConfig+0x2fe>
 80028bc:	2304      	movs	r3, #4
 80028be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028c2:	e04a      	b.n	800295a <UART_SetConfig+0x2fe>
 80028c4:	2308      	movs	r3, #8
 80028c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ca:	e046      	b.n	800295a <UART_SetConfig+0x2fe>
 80028cc:	2310      	movs	r3, #16
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028d2:	e042      	b.n	800295a <UART_SetConfig+0x2fe>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <UART_SetConfig+0x2dc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d13a      	bne.n	8002954 <UART_SetConfig+0x2f8>
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <UART_SetConfig+0x2e4>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ec:	d01a      	beq.n	8002924 <UART_SetConfig+0x2c8>
 80028ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028f2:	d81b      	bhi.n	800292c <UART_SetConfig+0x2d0>
 80028f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f8:	d00c      	beq.n	8002914 <UART_SetConfig+0x2b8>
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d815      	bhi.n	800292c <UART_SetConfig+0x2d0>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <UART_SetConfig+0x2b0>
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d008      	beq.n	800291c <UART_SetConfig+0x2c0>
 800290a:	e00f      	b.n	800292c <UART_SetConfig+0x2d0>
 800290c:	2300      	movs	r3, #0
 800290e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002912:	e022      	b.n	800295a <UART_SetConfig+0x2fe>
 8002914:	2302      	movs	r3, #2
 8002916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800291a:	e01e      	b.n	800295a <UART_SetConfig+0x2fe>
 800291c:	2304      	movs	r3, #4
 800291e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002922:	e01a      	b.n	800295a <UART_SetConfig+0x2fe>
 8002924:	2308      	movs	r3, #8
 8002926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800292a:	e016      	b.n	800295a <UART_SetConfig+0x2fe>
 800292c:	2310      	movs	r3, #16
 800292e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002932:	e012      	b.n	800295a <UART_SetConfig+0x2fe>
 8002934:	cfff69f3 	.word	0xcfff69f3
 8002938:	40008000 	.word	0x40008000
 800293c:	40013800 	.word	0x40013800
 8002940:	40021000 	.word	0x40021000
 8002944:	40004400 	.word	0x40004400
 8002948:	40004800 	.word	0x40004800
 800294c:	40004c00 	.word	0x40004c00
 8002950:	40005000 	.word	0x40005000
 8002954:	2310      	movs	r3, #16
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4aae      	ldr	r2, [pc, #696]	; (8002c18 <UART_SetConfig+0x5bc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 8097 	bne.w	8002a94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800296a:	2b08      	cmp	r3, #8
 800296c:	d823      	bhi.n	80029b6 <UART_SetConfig+0x35a>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <UART_SetConfig+0x318>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002999 	.word	0x08002999
 8002978:	080029b7 	.word	0x080029b7
 800297c:	080029a1 	.word	0x080029a1
 8002980:	080029b7 	.word	0x080029b7
 8002984:	080029a7 	.word	0x080029a7
 8002988:	080029b7 	.word	0x080029b7
 800298c:	080029b7 	.word	0x080029b7
 8002990:	080029b7 	.word	0x080029b7
 8002994:	080029af 	.word	0x080029af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002998:	f7ff f9fa 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800299e:	e010      	b.n	80029c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029a0:	4b9e      	ldr	r3, [pc, #632]	; (8002c1c <UART_SetConfig+0x5c0>)
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029a4:	e00d      	b.n	80029c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a6:	f7ff f985 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 80029aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029ac:	e009      	b.n	80029c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029b4:	e005      	b.n	80029c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80029c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8130 	beq.w	8002c2a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	4a94      	ldr	r2, [pc, #592]	; (8002c20 <UART_SetConfig+0x5c4>)
 80029d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d4:	461a      	mov	r2, r3
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d305      	bcc.n	80029fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d903      	bls.n	8002a02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a00:	e113      	b.n	8002c2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2200      	movs	r2, #0
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	60fa      	str	r2, [r7, #12]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	4a84      	ldr	r2, [pc, #528]	; (8002c20 <UART_SetConfig+0x5c4>)
 8002a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2200      	movs	r2, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a24:	f7fd fc02 	bl	800022c <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	020b      	lsls	r3, r1, #8
 8002a3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a3e:	0202      	lsls	r2, r0, #8
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	6849      	ldr	r1, [r1, #4]
 8002a44:	0849      	lsrs	r1, r1, #1
 8002a46:	2000      	movs	r0, #0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	eb12 0804 	adds.w	r8, r2, r4
 8002a50:	eb43 0905 	adc.w	r9, r3, r5
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	469a      	mov	sl, r3
 8002a5c:	4693      	mov	fp, r2
 8002a5e:	4652      	mov	r2, sl
 8002a60:	465b      	mov	r3, fp
 8002a62:	4640      	mov	r0, r8
 8002a64:	4649      	mov	r1, r9
 8002a66:	f7fd fbe1 	bl	800022c <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a78:	d308      	bcc.n	8002a8c <UART_SetConfig+0x430>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a80:	d204      	bcs.n	8002a8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a3a      	ldr	r2, [r7, #32]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	e0ce      	b.n	8002c2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a92:	e0ca      	b.n	8002c2a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	d166      	bne.n	8002b6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d827      	bhi.n	8002af6 <UART_SetConfig+0x49a>
 8002aa6:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <UART_SetConfig+0x450>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002af7 	.word	0x08002af7
 8002abc:	08002ae7 	.word	0x08002ae7
 8002ac0:	08002af7 	.word	0x08002af7
 8002ac4:	08002af7 	.word	0x08002af7
 8002ac8:	08002af7 	.word	0x08002af7
 8002acc:	08002aef 	.word	0x08002aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f7ff f95e 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ad6:	e014      	b.n	8002b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff f970 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ade:	e010      	b.n	8002b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <UART_SetConfig+0x5c0>)
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ae4:	e00d      	b.n	8002b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae6:	f7ff f8e5 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002aec:	e009      	b.n	8002b02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002af4:	e005      	b.n	8002b02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8090 	beq.w	8002c2a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	4a44      	ldr	r2, [pc, #272]	; (8002c20 <UART_SetConfig+0x5c4>)
 8002b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	441a      	add	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	d916      	bls.n	8002b64 <UART_SetConfig+0x508>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d212      	bcs.n	8002b64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f023 030f 	bic.w	r3, r3, #15
 8002b46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	8bfb      	ldrh	r3, [r7, #30]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	8bfa      	ldrh	r2, [r7, #30]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e062      	b.n	8002c2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b6a:	e05e      	b.n	8002c2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d828      	bhi.n	8002bc6 <UART_SetConfig+0x56a>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UART_SetConfig+0x520>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002ba9 	.word	0x08002ba9
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	08002bc7 	.word	0x08002bc7
 8002b8c:	08002bb7 	.word	0x08002bb7
 8002b90:	08002bc7 	.word	0x08002bc7
 8002b94:	08002bc7 	.word	0x08002bc7
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002bbf 	.word	0x08002bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f7ff f8f6 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ba6:	e014      	b.n	8002bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff f908 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bae:	e010      	b.n	8002bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <UART_SetConfig+0x5c0>)
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bb4:	e00d      	b.n	8002bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff f87d 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002bbc:	e009      	b.n	8002bd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bc4:	e005      	b.n	8002bd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d028      	beq.n	8002c2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <UART_SetConfig+0x5c4>)
 8002bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be2:	461a      	mov	r2, r3
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	441a      	add	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d910      	bls.n	8002c24 <UART_SetConfig+0x5c8>
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c08:	d20c      	bcs.n	8002c24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	e009      	b.n	8002c2a <UART_SetConfig+0x5ce>
 8002c16:	bf00      	nop
 8002c18:	40008000 	.word	0x40008000
 8002c1c:	00f42400 	.word	0x00f42400
 8002c20:	08003c50 	.word	0x08003c50
      }
      else
      {
        ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2200      	movs	r2, #0
 8002c44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002c46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3730      	adds	r7, #48	; 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d52:	d10a      	bne.n	8002d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b098      	sub	sp, #96	; 0x60
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da8:	f7fe f820 	bl	8000dec <HAL_GetTick>
 8002dac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d12f      	bne.n	8002e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f88e 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d022      	beq.n	8002e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
 8002df6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e6      	bne.n	8002dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e063      	b.n	8002ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d149      	bne.n	8002ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e32:	2200      	movs	r2, #0
 8002e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f857 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03c      	beq.n	8002ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	623b      	str	r3, [r7, #32]
   return(result);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
 8002e64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e6      	bne.n	8002e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3308      	adds	r3, #8
 8002e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	69b9      	ldr	r1, [r7, #24]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e5      	bne.n	8002e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e012      	b.n	8002ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3758      	adds	r7, #88	; 0x58
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efc:	e04f      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d04b      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fd ff71 	bl	8000dec <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e04e      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d037      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	d034      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d031      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d110      	bne.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f838 	bl	8002fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e029      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f78:	d111      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f81e 	bl	8002fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e00f      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0a0      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b095      	sub	sp, #84	; 0x54
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
 8002fee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e6      	bne.n	8002fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3308      	adds	r3, #8
 8003006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3308      	adds	r3, #8
 8003022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e3      	bne.n	8003000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d118      	bne.n	8003072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	60bb      	str	r3, [r7, #8]
   return(result);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f023 0310 	bic.w	r3, r3, #16
 8003054:	647b      	str	r3, [r7, #68]	; 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	613b      	str	r3, [r7, #16]
   return(result);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e6      	bne.n	8003040 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003086:	bf00      	nop
 8003088:	3754      	adds	r7, #84	; 0x54
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e027      	b.n	80030f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80030d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003118:	2302      	movs	r3, #2
 800311a:	e02d      	b.n	8003178 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f84f 	bl	80031fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e02d      	b.n	80031f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f811 	bl	80031fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003208:	2b00      	cmp	r3, #0
 800320a:	d108      	bne.n	800321e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800321c:	e031      	b.n	8003282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800321e:	2308      	movs	r3, #8
 8003220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003222:	2308      	movs	r3, #8
 8003224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	0e5b      	lsrs	r3, r3, #25
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	0f5b      	lsrs	r3, r3, #29
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003246:	7bbb      	ldrb	r3, [r7, #14]
 8003248:	7b3a      	ldrb	r2, [r7, #12]
 800324a:	4911      	ldr	r1, [pc, #68]	; (8003290 <UARTEx_SetNbDataToProcess+0x94>)
 800324c:	5c8a      	ldrb	r2, [r1, r2]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003252:	7b3a      	ldrb	r2, [r7, #12]
 8003254:	490f      	ldr	r1, [pc, #60]	; (8003294 <UARTEx_SetNbDataToProcess+0x98>)
 8003256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003258:	fb93 f3f2 	sdiv	r3, r3, r2
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	7b7a      	ldrb	r2, [r7, #13]
 8003268:	4909      	ldr	r1, [pc, #36]	; (8003290 <UARTEx_SetNbDataToProcess+0x94>)
 800326a:	5c8a      	ldrb	r2, [r1, r2]
 800326c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003270:	7b7a      	ldrb	r2, [r7, #13]
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <UARTEx_SetNbDataToProcess+0x98>)
 8003274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003276:	fb93 f3f2 	sdiv	r3, r3, r2
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	08003c68 	.word	0x08003c68
 8003294:	08003c70 	.word	0x08003c70

08003298 <std>:
 8003298:	2300      	movs	r3, #0
 800329a:	b510      	push	{r4, lr}
 800329c:	4604      	mov	r4, r0
 800329e:	e9c0 3300 	strd	r3, r3, [r0]
 80032a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032a6:	6083      	str	r3, [r0, #8]
 80032a8:	8181      	strh	r1, [r0, #12]
 80032aa:	6643      	str	r3, [r0, #100]	; 0x64
 80032ac:	81c2      	strh	r2, [r0, #14]
 80032ae:	6183      	str	r3, [r0, #24]
 80032b0:	4619      	mov	r1, r3
 80032b2:	2208      	movs	r2, #8
 80032b4:	305c      	adds	r0, #92	; 0x5c
 80032b6:	f000 f9d3 	bl	8003660 <memset>
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <std+0x38>)
 80032bc:	6263      	str	r3, [r4, #36]	; 0x24
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <std+0x3c>)
 80032c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <std+0x40>)
 80032c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <std+0x44>)
 80032c8:	6224      	str	r4, [r4, #32]
 80032ca:	6323      	str	r3, [r4, #48]	; 0x30
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	bf00      	nop
 80032d0:	080034b1 	.word	0x080034b1
 80032d4:	080034d3 	.word	0x080034d3
 80032d8:	0800350b 	.word	0x0800350b
 80032dc:	0800352f 	.word	0x0800352f

080032e0 <stdio_exit_handler>:
 80032e0:	4a02      	ldr	r2, [pc, #8]	; (80032ec <stdio_exit_handler+0xc>)
 80032e2:	4903      	ldr	r1, [pc, #12]	; (80032f0 <stdio_exit_handler+0x10>)
 80032e4:	4803      	ldr	r0, [pc, #12]	; (80032f4 <stdio_exit_handler+0x14>)
 80032e6:	f000 b869 	b.w	80033bc <_fwalk_sglue>
 80032ea:	bf00      	nop
 80032ec:	2000004c 	.word	0x2000004c
 80032f0:	08003a79 	.word	0x08003a79
 80032f4:	20000058 	.word	0x20000058

080032f8 <cleanup_stdio>:
 80032f8:	6841      	ldr	r1, [r0, #4]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <cleanup_stdio+0x34>)
 80032fc:	4299      	cmp	r1, r3
 80032fe:	b510      	push	{r4, lr}
 8003300:	4604      	mov	r4, r0
 8003302:	d001      	beq.n	8003308 <cleanup_stdio+0x10>
 8003304:	f000 fbb8 	bl	8003a78 <_fflush_r>
 8003308:	68a1      	ldr	r1, [r4, #8]
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <cleanup_stdio+0x38>)
 800330c:	4299      	cmp	r1, r3
 800330e:	d002      	beq.n	8003316 <cleanup_stdio+0x1e>
 8003310:	4620      	mov	r0, r4
 8003312:	f000 fbb1 	bl	8003a78 <_fflush_r>
 8003316:	68e1      	ldr	r1, [r4, #12]
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <cleanup_stdio+0x3c>)
 800331a:	4299      	cmp	r1, r3
 800331c:	d004      	beq.n	8003328 <cleanup_stdio+0x30>
 800331e:	4620      	mov	r0, r4
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003324:	f000 bba8 	b.w	8003a78 <_fflush_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	200001a4 	.word	0x200001a4
 8003330:	2000020c 	.word	0x2000020c
 8003334:	20000274 	.word	0x20000274

08003338 <global_stdio_init.part.0>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <global_stdio_init.part.0+0x30>)
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <global_stdio_init.part.0+0x34>)
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <global_stdio_init.part.0+0x38>)
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4620      	mov	r0, r4
 8003344:	2200      	movs	r2, #0
 8003346:	2104      	movs	r1, #4
 8003348:	f7ff ffa6 	bl	8003298 <std>
 800334c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003350:	2201      	movs	r2, #1
 8003352:	2109      	movs	r1, #9
 8003354:	f7ff ffa0 	bl	8003298 <std>
 8003358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800335c:	2202      	movs	r2, #2
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003362:	2112      	movs	r1, #18
 8003364:	f7ff bf98 	b.w	8003298 <std>
 8003368:	200002dc 	.word	0x200002dc
 800336c:	200001a4 	.word	0x200001a4
 8003370:	080032e1 	.word	0x080032e1

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 b9ff 	b.w	8003778 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200002e5 	.word	0x200002e5

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 b9fa 	b.w	800377a <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200002e5 	.word	0x200002e5

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sfp_lock_acquire>
 8003394:	6a23      	ldr	r3, [r4, #32]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sfp_lock_release>
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__sinit+0x28>)
 80033a2:	6223      	str	r3, [r4, #32]
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__sinit+0x2c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f5      	bne.n	8003398 <__sinit+0xc>
 80033ac:	f7ff ffc4 	bl	8003338 <global_stdio_init.part.0>
 80033b0:	e7f2      	b.n	8003398 <__sinit+0xc>
 80033b2:	bf00      	nop
 80033b4:	080032f9 	.word	0x080032f9
 80033b8:	200002dc 	.word	0x200002dc

080033bc <_fwalk_sglue>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4607      	mov	r7, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	2600      	movs	r6, #0
 80033c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033cc:	f1b9 0901 	subs.w	r9, r9, #1
 80033d0:	d505      	bpl.n	80033de <_fwalk_sglue+0x22>
 80033d2:	6824      	ldr	r4, [r4, #0]
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d1f7      	bne.n	80033c8 <_fwalk_sglue+0xc>
 80033d8:	4630      	mov	r0, r6
 80033da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d907      	bls.n	80033f4 <_fwalk_sglue+0x38>
 80033e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d003      	beq.n	80033f4 <_fwalk_sglue+0x38>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	4306      	orrs	r6, r0
 80033f4:	3568      	adds	r5, #104	; 0x68
 80033f6:	e7e9      	b.n	80033cc <_fwalk_sglue+0x10>

080033f8 <_puts_r>:
 80033f8:	6a03      	ldr	r3, [r0, #32]
 80033fa:	b570      	push	{r4, r5, r6, lr}
 80033fc:	6884      	ldr	r4, [r0, #8]
 80033fe:	4605      	mov	r5, r0
 8003400:	460e      	mov	r6, r1
 8003402:	b90b      	cbnz	r3, 8003408 <_puts_r+0x10>
 8003404:	f7ff ffc2 	bl	800338c <__sinit>
 8003408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800340a:	07db      	lsls	r3, r3, #31
 800340c:	d405      	bmi.n	800341a <_puts_r+0x22>
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	0598      	lsls	r0, r3, #22
 8003412:	d402      	bmi.n	800341a <_puts_r+0x22>
 8003414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003416:	f000 f9af 	bl	8003778 <__retarget_lock_acquire_recursive>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	0719      	lsls	r1, r3, #28
 800341e:	d513      	bpl.n	8003448 <_puts_r+0x50>
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	b18b      	cbz	r3, 8003448 <_puts_r+0x50>
 8003424:	3e01      	subs	r6, #1
 8003426:	68a3      	ldr	r3, [r4, #8]
 8003428:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800342c:	3b01      	subs	r3, #1
 800342e:	60a3      	str	r3, [r4, #8]
 8003430:	b9e9      	cbnz	r1, 800346e <_puts_r+0x76>
 8003432:	2b00      	cmp	r3, #0
 8003434:	da2e      	bge.n	8003494 <_puts_r+0x9c>
 8003436:	4622      	mov	r2, r4
 8003438:	210a      	movs	r1, #10
 800343a:	4628      	mov	r0, r5
 800343c:	f000 f87b 	bl	8003536 <__swbuf_r>
 8003440:	3001      	adds	r0, #1
 8003442:	d007      	beq.n	8003454 <_puts_r+0x5c>
 8003444:	250a      	movs	r5, #10
 8003446:	e007      	b.n	8003458 <_puts_r+0x60>
 8003448:	4621      	mov	r1, r4
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f8b0 	bl	80035b0 <__swsetup_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	d0e7      	beq.n	8003424 <_puts_r+0x2c>
 8003454:	f04f 35ff 	mov.w	r5, #4294967295
 8003458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800345a:	07da      	lsls	r2, r3, #31
 800345c:	d405      	bmi.n	800346a <_puts_r+0x72>
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	059b      	lsls	r3, r3, #22
 8003462:	d402      	bmi.n	800346a <_puts_r+0x72>
 8003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003466:	f000 f988 	bl	800377a <__retarget_lock_release_recursive>
 800346a:	4628      	mov	r0, r5
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	2b00      	cmp	r3, #0
 8003470:	da04      	bge.n	800347c <_puts_r+0x84>
 8003472:	69a2      	ldr	r2, [r4, #24]
 8003474:	429a      	cmp	r2, r3
 8003476:	dc06      	bgt.n	8003486 <_puts_r+0x8e>
 8003478:	290a      	cmp	r1, #10
 800347a:	d004      	beq.n	8003486 <_puts_r+0x8e>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	6022      	str	r2, [r4, #0]
 8003482:	7019      	strb	r1, [r3, #0]
 8003484:	e7cf      	b.n	8003426 <_puts_r+0x2e>
 8003486:	4622      	mov	r2, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 f854 	bl	8003536 <__swbuf_r>
 800348e:	3001      	adds	r0, #1
 8003490:	d1c9      	bne.n	8003426 <_puts_r+0x2e>
 8003492:	e7df      	b.n	8003454 <_puts_r+0x5c>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	250a      	movs	r5, #10
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	6022      	str	r2, [r4, #0]
 800349c:	701d      	strb	r5, [r3, #0]
 800349e:	e7db      	b.n	8003458 <_puts_r+0x60>

080034a0 <puts>:
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <puts+0xc>)
 80034a2:	4601      	mov	r1, r0
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	f7ff bfa7 	b.w	80033f8 <_puts_r>
 80034aa:	bf00      	nop
 80034ac:	200000a4 	.word	0x200000a4

080034b0 <__sread>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	460c      	mov	r4, r1
 80034b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b8:	f000 f910 	bl	80036dc <_read_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	bfab      	itete	ge
 80034c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034c2:	89a3      	ldrhlt	r3, [r4, #12]
 80034c4:	181b      	addge	r3, r3, r0
 80034c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ca:	bfac      	ite	ge
 80034cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ce:	81a3      	strhlt	r3, [r4, #12]
 80034d0:	bd10      	pop	{r4, pc}

080034d2 <__swrite>:
 80034d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d6:	461f      	mov	r7, r3
 80034d8:	898b      	ldrh	r3, [r1, #12]
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	4605      	mov	r5, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4616      	mov	r6, r2
 80034e2:	d505      	bpl.n	80034f0 <__swrite+0x1e>
 80034e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e8:	2302      	movs	r3, #2
 80034ea:	2200      	movs	r2, #0
 80034ec:	f000 f8e4 	bl	80036b8 <_lseek_r>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fa:	81a3      	strh	r3, [r4, #12]
 80034fc:	4632      	mov	r2, r6
 80034fe:	463b      	mov	r3, r7
 8003500:	4628      	mov	r0, r5
 8003502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003506:	f000 b8fb 	b.w	8003700 <_write_r>

0800350a <__sseek>:
 800350a:	b510      	push	{r4, lr}
 800350c:	460c      	mov	r4, r1
 800350e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003512:	f000 f8d1 	bl	80036b8 <_lseek_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	bf15      	itete	ne
 800351c:	6560      	strne	r0, [r4, #84]	; 0x54
 800351e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003526:	81a3      	strheq	r3, [r4, #12]
 8003528:	bf18      	it	ne
 800352a:	81a3      	strhne	r3, [r4, #12]
 800352c:	bd10      	pop	{r4, pc}

0800352e <__sclose>:
 800352e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003532:	f000 b8b1 	b.w	8003698 <_close_r>

08003536 <__swbuf_r>:
 8003536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003538:	460e      	mov	r6, r1
 800353a:	4614      	mov	r4, r2
 800353c:	4605      	mov	r5, r0
 800353e:	b118      	cbz	r0, 8003548 <__swbuf_r+0x12>
 8003540:	6a03      	ldr	r3, [r0, #32]
 8003542:	b90b      	cbnz	r3, 8003548 <__swbuf_r+0x12>
 8003544:	f7ff ff22 	bl	800338c <__sinit>
 8003548:	69a3      	ldr	r3, [r4, #24]
 800354a:	60a3      	str	r3, [r4, #8]
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	071a      	lsls	r2, r3, #28
 8003550:	d525      	bpl.n	800359e <__swbuf_r+0x68>
 8003552:	6923      	ldr	r3, [r4, #16]
 8003554:	b31b      	cbz	r3, 800359e <__swbuf_r+0x68>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	6922      	ldr	r2, [r4, #16]
 800355a:	1a98      	subs	r0, r3, r2
 800355c:	6963      	ldr	r3, [r4, #20]
 800355e:	b2f6      	uxtb	r6, r6
 8003560:	4283      	cmp	r3, r0
 8003562:	4637      	mov	r7, r6
 8003564:	dc04      	bgt.n	8003570 <__swbuf_r+0x3a>
 8003566:	4621      	mov	r1, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 fa85 	bl	8003a78 <_fflush_r>
 800356e:	b9e0      	cbnz	r0, 80035aa <__swbuf_r+0x74>
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	60a3      	str	r3, [r4, #8]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	701e      	strb	r6, [r3, #0]
 800357e:	6962      	ldr	r2, [r4, #20]
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	429a      	cmp	r2, r3
 8003584:	d004      	beq.n	8003590 <__swbuf_r+0x5a>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	07db      	lsls	r3, r3, #31
 800358a:	d506      	bpl.n	800359a <__swbuf_r+0x64>
 800358c:	2e0a      	cmp	r6, #10
 800358e:	d104      	bne.n	800359a <__swbuf_r+0x64>
 8003590:	4621      	mov	r1, r4
 8003592:	4628      	mov	r0, r5
 8003594:	f000 fa70 	bl	8003a78 <_fflush_r>
 8003598:	b938      	cbnz	r0, 80035aa <__swbuf_r+0x74>
 800359a:	4638      	mov	r0, r7
 800359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f805 	bl	80035b0 <__swsetup_r>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0d5      	beq.n	8003556 <__swbuf_r+0x20>
 80035aa:	f04f 37ff 	mov.w	r7, #4294967295
 80035ae:	e7f4      	b.n	800359a <__swbuf_r+0x64>

080035b0 <__swsetup_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <__swsetup_r+0xac>)
 80035b4:	4605      	mov	r5, r0
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	460c      	mov	r4, r1
 80035ba:	b118      	cbz	r0, 80035c4 <__swsetup_r+0x14>
 80035bc:	6a03      	ldr	r3, [r0, #32]
 80035be:	b90b      	cbnz	r3, 80035c4 <__swsetup_r+0x14>
 80035c0:	f7ff fee4 	bl	800338c <__sinit>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035ca:	0718      	lsls	r0, r3, #28
 80035cc:	d422      	bmi.n	8003614 <__swsetup_r+0x64>
 80035ce:	06d9      	lsls	r1, r3, #27
 80035d0:	d407      	bmi.n	80035e2 <__swsetup_r+0x32>
 80035d2:	2309      	movs	r3, #9
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035da:	81a3      	strh	r3, [r4, #12]
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	e034      	b.n	800364c <__swsetup_r+0x9c>
 80035e2:	0758      	lsls	r0, r3, #29
 80035e4:	d512      	bpl.n	800360c <__swsetup_r+0x5c>
 80035e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e8:	b141      	cbz	r1, 80035fc <__swsetup_r+0x4c>
 80035ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ee:	4299      	cmp	r1, r3
 80035f0:	d002      	beq.n	80035f8 <__swsetup_r+0x48>
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f8c2 	bl	800377c <_free_r>
 80035f8:	2300      	movs	r3, #0
 80035fa:	6363      	str	r3, [r4, #52]	; 0x34
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	2300      	movs	r3, #0
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	b94b      	cbnz	r3, 800362c <__swsetup_r+0x7c>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800361e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003622:	d003      	beq.n	800362c <__swsetup_r+0x7c>
 8003624:	4621      	mov	r1, r4
 8003626:	4628      	mov	r0, r5
 8003628:	f000 fa74 	bl	8003b14 <__smakebuf_r>
 800362c:	89a0      	ldrh	r0, [r4, #12]
 800362e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003632:	f010 0301 	ands.w	r3, r0, #1
 8003636:	d00a      	beq.n	800364e <__swsetup_r+0x9e>
 8003638:	2300      	movs	r3, #0
 800363a:	60a3      	str	r3, [r4, #8]
 800363c:	6963      	ldr	r3, [r4, #20]
 800363e:	425b      	negs	r3, r3
 8003640:	61a3      	str	r3, [r4, #24]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	b943      	cbnz	r3, 8003658 <__swsetup_r+0xa8>
 8003646:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800364a:	d1c4      	bne.n	80035d6 <__swsetup_r+0x26>
 800364c:	bd38      	pop	{r3, r4, r5, pc}
 800364e:	0781      	lsls	r1, r0, #30
 8003650:	bf58      	it	pl
 8003652:	6963      	ldrpl	r3, [r4, #20]
 8003654:	60a3      	str	r3, [r4, #8]
 8003656:	e7f4      	b.n	8003642 <__swsetup_r+0x92>
 8003658:	2000      	movs	r0, #0
 800365a:	e7f7      	b.n	800364c <__swsetup_r+0x9c>
 800365c:	200000a4 	.word	0x200000a4

08003660 <memset>:
 8003660:	4402      	add	r2, r0
 8003662:	4603      	mov	r3, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <strncpy>:
 8003670:	b510      	push	{r4, lr}
 8003672:	3901      	subs	r1, #1
 8003674:	4603      	mov	r3, r0
 8003676:	b132      	cbz	r2, 8003686 <strncpy+0x16>
 8003678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800367c:	f803 4b01 	strb.w	r4, [r3], #1
 8003680:	3a01      	subs	r2, #1
 8003682:	2c00      	cmp	r4, #0
 8003684:	d1f7      	bne.n	8003676 <strncpy+0x6>
 8003686:	441a      	add	r2, r3
 8003688:	2100      	movs	r1, #0
 800368a:	4293      	cmp	r3, r2
 800368c:	d100      	bne.n	8003690 <strncpy+0x20>
 800368e:	bd10      	pop	{r4, pc}
 8003690:	f803 1b01 	strb.w	r1, [r3], #1
 8003694:	e7f9      	b.n	800368a <strncpy+0x1a>
	...

08003698 <_close_r>:
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4d06      	ldr	r5, [pc, #24]	; (80036b4 <_close_r+0x1c>)
 800369c:	2300      	movs	r3, #0
 800369e:	4604      	mov	r4, r0
 80036a0:	4608      	mov	r0, r1
 80036a2:	602b      	str	r3, [r5, #0]
 80036a4:	f7fd f84d 	bl	8000742 <_close>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d102      	bne.n	80036b2 <_close_r+0x1a>
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	b103      	cbz	r3, 80036b2 <_close_r+0x1a>
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
 80036b4:	200002e0 	.word	0x200002e0

080036b8 <_lseek_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4d07      	ldr	r5, [pc, #28]	; (80036d8 <_lseek_r+0x20>)
 80036bc:	4604      	mov	r4, r0
 80036be:	4608      	mov	r0, r1
 80036c0:	4611      	mov	r1, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	602a      	str	r2, [r5, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f7fd f862 	bl	8000790 <_lseek>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_lseek_r+0x1e>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_lseek_r+0x1e>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	200002e0 	.word	0x200002e0

080036dc <_read_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d07      	ldr	r5, [pc, #28]	; (80036fc <_read_r+0x20>)
 80036e0:	4604      	mov	r4, r0
 80036e2:	4608      	mov	r0, r1
 80036e4:	4611      	mov	r1, r2
 80036e6:	2200      	movs	r2, #0
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f7fc fff0 	bl	80006d0 <_read>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_read_r+0x1e>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_read_r+0x1e>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	200002e0 	.word	0x200002e0

08003700 <_write_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d07      	ldr	r5, [pc, #28]	; (8003720 <_write_r+0x20>)
 8003704:	4604      	mov	r4, r0
 8003706:	4608      	mov	r0, r1
 8003708:	4611      	mov	r1, r2
 800370a:	2200      	movs	r2, #0
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f7fc fffb 	bl	800070a <_write>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d102      	bne.n	800371e <_write_r+0x1e>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	b103      	cbz	r3, 800371e <_write_r+0x1e>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	200002e0 	.word	0x200002e0

08003724 <__errno>:
 8003724:	4b01      	ldr	r3, [pc, #4]	; (800372c <__errno+0x8>)
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	200000a4 	.word	0x200000a4

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	; (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2600      	movs	r6, #0
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	; (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	; (8003774 <__libc_init_array+0x44>)
 8003744:	f000 fa54 	bl	8003bf0 <_init>
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2600      	movs	r6, #0
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	08003c80 	.word	0x08003c80
 800376c:	08003c80 	.word	0x08003c80
 8003770:	08003c80 	.word	0x08003c80
 8003774:	08003c84 	.word	0x08003c84

08003778 <__retarget_lock_acquire_recursive>:
 8003778:	4770      	bx	lr

0800377a <__retarget_lock_release_recursive>:
 800377a:	4770      	bx	lr

0800377c <_free_r>:
 800377c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800377e:	2900      	cmp	r1, #0
 8003780:	d044      	beq.n	800380c <_free_r+0x90>
 8003782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003786:	9001      	str	r0, [sp, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f1a1 0404 	sub.w	r4, r1, #4
 800378e:	bfb8      	it	lt
 8003790:	18e4      	addlt	r4, r4, r3
 8003792:	f000 f8df 	bl	8003954 <__malloc_lock>
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <_free_r+0x94>)
 8003798:	9801      	ldr	r0, [sp, #4]
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	b933      	cbnz	r3, 80037ac <_free_r+0x30>
 800379e:	6063      	str	r3, [r4, #4]
 80037a0:	6014      	str	r4, [r2, #0]
 80037a2:	b003      	add	sp, #12
 80037a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037a8:	f000 b8da 	b.w	8003960 <__malloc_unlock>
 80037ac:	42a3      	cmp	r3, r4
 80037ae:	d908      	bls.n	80037c2 <_free_r+0x46>
 80037b0:	6825      	ldr	r5, [r4, #0]
 80037b2:	1961      	adds	r1, r4, r5
 80037b4:	428b      	cmp	r3, r1
 80037b6:	bf01      	itttt	eq
 80037b8:	6819      	ldreq	r1, [r3, #0]
 80037ba:	685b      	ldreq	r3, [r3, #4]
 80037bc:	1949      	addeq	r1, r1, r5
 80037be:	6021      	streq	r1, [r4, #0]
 80037c0:	e7ed      	b.n	800379e <_free_r+0x22>
 80037c2:	461a      	mov	r2, r3
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	b10b      	cbz	r3, 80037cc <_free_r+0x50>
 80037c8:	42a3      	cmp	r3, r4
 80037ca:	d9fa      	bls.n	80037c2 <_free_r+0x46>
 80037cc:	6811      	ldr	r1, [r2, #0]
 80037ce:	1855      	adds	r5, r2, r1
 80037d0:	42a5      	cmp	r5, r4
 80037d2:	d10b      	bne.n	80037ec <_free_r+0x70>
 80037d4:	6824      	ldr	r4, [r4, #0]
 80037d6:	4421      	add	r1, r4
 80037d8:	1854      	adds	r4, r2, r1
 80037da:	42a3      	cmp	r3, r4
 80037dc:	6011      	str	r1, [r2, #0]
 80037de:	d1e0      	bne.n	80037a2 <_free_r+0x26>
 80037e0:	681c      	ldr	r4, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	6053      	str	r3, [r2, #4]
 80037e6:	440c      	add	r4, r1
 80037e8:	6014      	str	r4, [r2, #0]
 80037ea:	e7da      	b.n	80037a2 <_free_r+0x26>
 80037ec:	d902      	bls.n	80037f4 <_free_r+0x78>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6003      	str	r3, [r0, #0]
 80037f2:	e7d6      	b.n	80037a2 <_free_r+0x26>
 80037f4:	6825      	ldr	r5, [r4, #0]
 80037f6:	1961      	adds	r1, r4, r5
 80037f8:	428b      	cmp	r3, r1
 80037fa:	bf04      	itt	eq
 80037fc:	6819      	ldreq	r1, [r3, #0]
 80037fe:	685b      	ldreq	r3, [r3, #4]
 8003800:	6063      	str	r3, [r4, #4]
 8003802:	bf04      	itt	eq
 8003804:	1949      	addeq	r1, r1, r5
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	6054      	str	r4, [r2, #4]
 800380a:	e7ca      	b.n	80037a2 <_free_r+0x26>
 800380c:	b003      	add	sp, #12
 800380e:	bd30      	pop	{r4, r5, pc}
 8003810:	200002e8 	.word	0x200002e8

08003814 <sbrk_aligned>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0e      	ldr	r6, [pc, #56]	; (8003850 <sbrk_aligned+0x3c>)
 8003818:	460c      	mov	r4, r1
 800381a:	6831      	ldr	r1, [r6, #0]
 800381c:	4605      	mov	r5, r0
 800381e:	b911      	cbnz	r1, 8003826 <sbrk_aligned+0x12>
 8003820:	f000 f9d6 	bl	8003bd0 <_sbrk_r>
 8003824:	6030      	str	r0, [r6, #0]
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f9d1 	bl	8003bd0 <_sbrk_r>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	d00a      	beq.n	8003848 <sbrk_aligned+0x34>
 8003832:	1cc4      	adds	r4, r0, #3
 8003834:	f024 0403 	bic.w	r4, r4, #3
 8003838:	42a0      	cmp	r0, r4
 800383a:	d007      	beq.n	800384c <sbrk_aligned+0x38>
 800383c:	1a21      	subs	r1, r4, r0
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f9c6 	bl	8003bd0 <_sbrk_r>
 8003844:	3001      	adds	r0, #1
 8003846:	d101      	bne.n	800384c <sbrk_aligned+0x38>
 8003848:	f04f 34ff 	mov.w	r4, #4294967295
 800384c:	4620      	mov	r0, r4
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	200002ec 	.word	0x200002ec

08003854 <_malloc_r>:
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003858:	1ccd      	adds	r5, r1, #3
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	2d00      	cmp	r5, #0
 8003868:	4607      	mov	r7, r0
 800386a:	db01      	blt.n	8003870 <_malloc_r+0x1c>
 800386c:	42a9      	cmp	r1, r5
 800386e:	d905      	bls.n	800387c <_malloc_r+0x28>
 8003870:	230c      	movs	r3, #12
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	2600      	movs	r6, #0
 8003876:	4630      	mov	r0, r6
 8003878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003950 <_malloc_r+0xfc>
 8003880:	f000 f868 	bl	8003954 <__malloc_lock>
 8003884:	f8d8 3000 	ldr.w	r3, [r8]
 8003888:	461c      	mov	r4, r3
 800388a:	bb5c      	cbnz	r4, 80038e4 <_malloc_r+0x90>
 800388c:	4629      	mov	r1, r5
 800388e:	4638      	mov	r0, r7
 8003890:	f7ff ffc0 	bl	8003814 <sbrk_aligned>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	4604      	mov	r4, r0
 8003898:	d155      	bne.n	8003946 <_malloc_r+0xf2>
 800389a:	f8d8 4000 	ldr.w	r4, [r8]
 800389e:	4626      	mov	r6, r4
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	d145      	bne.n	8003930 <_malloc_r+0xdc>
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d048      	beq.n	800393a <_malloc_r+0xe6>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	4631      	mov	r1, r6
 80038ac:	4638      	mov	r0, r7
 80038ae:	eb04 0903 	add.w	r9, r4, r3
 80038b2:	f000 f98d 	bl	8003bd0 <_sbrk_r>
 80038b6:	4581      	cmp	r9, r0
 80038b8:	d13f      	bne.n	800393a <_malloc_r+0xe6>
 80038ba:	6821      	ldr	r1, [r4, #0]
 80038bc:	1a6d      	subs	r5, r5, r1
 80038be:	4629      	mov	r1, r5
 80038c0:	4638      	mov	r0, r7
 80038c2:	f7ff ffa7 	bl	8003814 <sbrk_aligned>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d037      	beq.n	800393a <_malloc_r+0xe6>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	442b      	add	r3, r5
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	f8d8 3000 	ldr.w	r3, [r8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d038      	beq.n	800394a <_malloc_r+0xf6>
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	42a2      	cmp	r2, r4
 80038dc:	d12b      	bne.n	8003936 <_malloc_r+0xe2>
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e00f      	b.n	8003904 <_malloc_r+0xb0>
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	1b52      	subs	r2, r2, r5
 80038e8:	d41f      	bmi.n	800392a <_malloc_r+0xd6>
 80038ea:	2a0b      	cmp	r2, #11
 80038ec:	d917      	bls.n	800391e <_malloc_r+0xca>
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	bf18      	it	ne
 80038f6:	6059      	strne	r1, [r3, #4]
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	bf08      	it	eq
 80038fc:	f8c8 1000 	streq.w	r1, [r8]
 8003900:	5162      	str	r2, [r4, r5]
 8003902:	604b      	str	r3, [r1, #4]
 8003904:	4638      	mov	r0, r7
 8003906:	f104 060b 	add.w	r6, r4, #11
 800390a:	f000 f829 	bl	8003960 <__malloc_unlock>
 800390e:	f026 0607 	bic.w	r6, r6, #7
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	1af2      	subs	r2, r6, r3
 8003916:	d0ae      	beq.n	8003876 <_malloc_r+0x22>
 8003918:	1b9b      	subs	r3, r3, r6
 800391a:	50a3      	str	r3, [r4, r2]
 800391c:	e7ab      	b.n	8003876 <_malloc_r+0x22>
 800391e:	42a3      	cmp	r3, r4
 8003920:	6862      	ldr	r2, [r4, #4]
 8003922:	d1dd      	bne.n	80038e0 <_malloc_r+0x8c>
 8003924:	f8c8 2000 	str.w	r2, [r8]
 8003928:	e7ec      	b.n	8003904 <_malloc_r+0xb0>
 800392a:	4623      	mov	r3, r4
 800392c:	6864      	ldr	r4, [r4, #4]
 800392e:	e7ac      	b.n	800388a <_malloc_r+0x36>
 8003930:	4634      	mov	r4, r6
 8003932:	6876      	ldr	r6, [r6, #4]
 8003934:	e7b4      	b.n	80038a0 <_malloc_r+0x4c>
 8003936:	4613      	mov	r3, r2
 8003938:	e7cc      	b.n	80038d4 <_malloc_r+0x80>
 800393a:	230c      	movs	r3, #12
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4638      	mov	r0, r7
 8003940:	f000 f80e 	bl	8003960 <__malloc_unlock>
 8003944:	e797      	b.n	8003876 <_malloc_r+0x22>
 8003946:	6025      	str	r5, [r4, #0]
 8003948:	e7dc      	b.n	8003904 <_malloc_r+0xb0>
 800394a:	605b      	str	r3, [r3, #4]
 800394c:	deff      	udf	#255	; 0xff
 800394e:	bf00      	nop
 8003950:	200002e8 	.word	0x200002e8

08003954 <__malloc_lock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_lock+0x8>)
 8003956:	f7ff bf0f 	b.w	8003778 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	200002e4 	.word	0x200002e4

08003960 <__malloc_unlock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_unlock+0x8>)
 8003962:	f7ff bf0a 	b.w	800377a <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	200002e4 	.word	0x200002e4

0800396c <__sflush_r>:
 800396c:	898a      	ldrh	r2, [r1, #12]
 800396e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	0710      	lsls	r0, r2, #28
 8003976:	460c      	mov	r4, r1
 8003978:	d458      	bmi.n	8003a2c <__sflush_r+0xc0>
 800397a:	684b      	ldr	r3, [r1, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	dc05      	bgt.n	800398c <__sflush_r+0x20>
 8003980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	dc02      	bgt.n	800398c <__sflush_r+0x20>
 8003986:	2000      	movs	r0, #0
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800398c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800398e:	2e00      	cmp	r6, #0
 8003990:	d0f9      	beq.n	8003986 <__sflush_r+0x1a>
 8003992:	2300      	movs	r3, #0
 8003994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	6a21      	ldr	r1, [r4, #32]
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	d032      	beq.n	8003a06 <__sflush_r+0x9a>
 80039a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	075a      	lsls	r2, r3, #29
 80039a6:	d505      	bpl.n	80039b4 <__sflush_r+0x48>
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	1ac0      	subs	r0, r0, r3
 80039ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ae:	b10b      	cbz	r3, 80039b4 <__sflush_r+0x48>
 80039b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b2:	1ac0      	subs	r0, r0, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	4602      	mov	r2, r0
 80039b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ba:	6a21      	ldr	r1, [r4, #32]
 80039bc:	4628      	mov	r0, r5
 80039be:	47b0      	blx	r6
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	d106      	bne.n	80039d4 <__sflush_r+0x68>
 80039c6:	6829      	ldr	r1, [r5, #0]
 80039c8:	291d      	cmp	r1, #29
 80039ca:	d82b      	bhi.n	8003a24 <__sflush_r+0xb8>
 80039cc:	4a29      	ldr	r2, [pc, #164]	; (8003a74 <__sflush_r+0x108>)
 80039ce:	410a      	asrs	r2, r1
 80039d0:	07d6      	lsls	r6, r2, #31
 80039d2:	d427      	bmi.n	8003a24 <__sflush_r+0xb8>
 80039d4:	2200      	movs	r2, #0
 80039d6:	6062      	str	r2, [r4, #4]
 80039d8:	04d9      	lsls	r1, r3, #19
 80039da:	6922      	ldr	r2, [r4, #16]
 80039dc:	6022      	str	r2, [r4, #0]
 80039de:	d504      	bpl.n	80039ea <__sflush_r+0x7e>
 80039e0:	1c42      	adds	r2, r0, #1
 80039e2:	d101      	bne.n	80039e8 <__sflush_r+0x7c>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b903      	cbnz	r3, 80039ea <__sflush_r+0x7e>
 80039e8:	6560      	str	r0, [r4, #84]	; 0x54
 80039ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ec:	602f      	str	r7, [r5, #0]
 80039ee:	2900      	cmp	r1, #0
 80039f0:	d0c9      	beq.n	8003986 <__sflush_r+0x1a>
 80039f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f6:	4299      	cmp	r1, r3
 80039f8:	d002      	beq.n	8003a00 <__sflush_r+0x94>
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7ff febe 	bl	800377c <_free_r>
 8003a00:	2000      	movs	r0, #0
 8003a02:	6360      	str	r0, [r4, #52]	; 0x34
 8003a04:	e7c0      	b.n	8003988 <__sflush_r+0x1c>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b0      	blx	r6
 8003a0c:	1c41      	adds	r1, r0, #1
 8003a0e:	d1c8      	bne.n	80039a2 <__sflush_r+0x36>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0c5      	beq.n	80039a2 <__sflush_r+0x36>
 8003a16:	2b1d      	cmp	r3, #29
 8003a18:	d001      	beq.n	8003a1e <__sflush_r+0xb2>
 8003a1a:	2b16      	cmp	r3, #22
 8003a1c:	d101      	bne.n	8003a22 <__sflush_r+0xb6>
 8003a1e:	602f      	str	r7, [r5, #0]
 8003a20:	e7b1      	b.n	8003986 <__sflush_r+0x1a>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	e7ad      	b.n	8003988 <__sflush_r+0x1c>
 8003a2c:	690f      	ldr	r7, [r1, #16]
 8003a2e:	2f00      	cmp	r7, #0
 8003a30:	d0a9      	beq.n	8003986 <__sflush_r+0x1a>
 8003a32:	0793      	lsls	r3, r2, #30
 8003a34:	680e      	ldr	r6, [r1, #0]
 8003a36:	bf08      	it	eq
 8003a38:	694b      	ldreq	r3, [r1, #20]
 8003a3a:	600f      	str	r7, [r1, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2300      	movne	r3, #0
 8003a40:	eba6 0807 	sub.w	r8, r6, r7
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	f1b8 0f00 	cmp.w	r8, #0
 8003a4a:	dd9c      	ble.n	8003986 <__sflush_r+0x1a>
 8003a4c:	6a21      	ldr	r1, [r4, #32]
 8003a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a50:	4643      	mov	r3, r8
 8003a52:	463a      	mov	r2, r7
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b0      	blx	r6
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	dc06      	bgt.n	8003a6a <__sflush_r+0xfe>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e78e      	b.n	8003988 <__sflush_r+0x1c>
 8003a6a:	4407      	add	r7, r0
 8003a6c:	eba8 0800 	sub.w	r8, r8, r0
 8003a70:	e7e9      	b.n	8003a46 <__sflush_r+0xda>
 8003a72:	bf00      	nop
 8003a74:	dfbffffe 	.word	0xdfbffffe

08003a78 <_fflush_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	690b      	ldr	r3, [r1, #16]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	b913      	cbnz	r3, 8003a88 <_fflush_r+0x10>
 8003a82:	2500      	movs	r5, #0
 8003a84:	4628      	mov	r0, r5
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	b118      	cbz	r0, 8003a92 <_fflush_r+0x1a>
 8003a8a:	6a03      	ldr	r3, [r0, #32]
 8003a8c:	b90b      	cbnz	r3, 8003a92 <_fflush_r+0x1a>
 8003a8e:	f7ff fc7d 	bl	800338c <__sinit>
 8003a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f3      	beq.n	8003a82 <_fflush_r+0xa>
 8003a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a9c:	07d0      	lsls	r0, r2, #31
 8003a9e:	d404      	bmi.n	8003aaa <_fflush_r+0x32>
 8003aa0:	0599      	lsls	r1, r3, #22
 8003aa2:	d402      	bmi.n	8003aaa <_fflush_r+0x32>
 8003aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa6:	f7ff fe67 	bl	8003778 <__retarget_lock_acquire_recursive>
 8003aaa:	4628      	mov	r0, r5
 8003aac:	4621      	mov	r1, r4
 8003aae:	f7ff ff5d 	bl	800396c <__sflush_r>
 8003ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab4:	07da      	lsls	r2, r3, #31
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	d4e4      	bmi.n	8003a84 <_fflush_r+0xc>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	059b      	lsls	r3, r3, #22
 8003abe:	d4e1      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac2:	f7ff fe5a 	bl	800377a <__retarget_lock_release_recursive>
 8003ac6:	e7dd      	b.n	8003a84 <_fflush_r+0xc>

08003ac8 <__swhatbuf_r>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	460c      	mov	r4, r1
 8003acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	b096      	sub	sp, #88	; 0x58
 8003ad4:	4615      	mov	r5, r2
 8003ad6:	461e      	mov	r6, r3
 8003ad8:	da0d      	bge.n	8003af6 <__swhatbuf_r+0x2e>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	bf0c      	ite	eq
 8003ae6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003aea:	2340      	movne	r3, #64	; 0x40
 8003aec:	2000      	movs	r0, #0
 8003aee:	6031      	str	r1, [r6, #0]
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	b016      	add	sp, #88	; 0x58
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
 8003af6:	466a      	mov	r2, sp
 8003af8:	f000 f848 	bl	8003b8c <_fstat_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	dbec      	blt.n	8003ada <__swhatbuf_r+0x12>
 8003b00:	9901      	ldr	r1, [sp, #4]
 8003b02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b0a:	4259      	negs	r1, r3
 8003b0c:	4159      	adcs	r1, r3
 8003b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b12:	e7eb      	b.n	8003aec <__swhatbuf_r+0x24>

08003b14 <__smakebuf_r>:
 8003b14:	898b      	ldrh	r3, [r1, #12]
 8003b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b18:	079d      	lsls	r5, r3, #30
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	d507      	bpl.n	8003b30 <__smakebuf_r+0x1c>
 8003b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6163      	str	r3, [r4, #20]
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	ab01      	add	r3, sp, #4
 8003b32:	466a      	mov	r2, sp
 8003b34:	f7ff ffc8 	bl	8003ac8 <__swhatbuf_r>
 8003b38:	9900      	ldr	r1, [sp, #0]
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7ff fe89 	bl	8003854 <_malloc_r>
 8003b42:	b948      	cbnz	r0, 8003b58 <__smakebuf_r+0x44>
 8003b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b48:	059a      	lsls	r2, r3, #22
 8003b4a:	d4ef      	bmi.n	8003b2c <__smakebuf_r+0x18>
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	e7e3      	b.n	8003b20 <__smakebuf_r+0xc>
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	6020      	str	r0, [r4, #0]
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	9b00      	ldr	r3, [sp, #0]
 8003b64:	6163      	str	r3, [r4, #20]
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	6120      	str	r0, [r4, #16]
 8003b6a:	b15b      	cbz	r3, 8003b84 <__smakebuf_r+0x70>
 8003b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f81d 	bl	8003bb0 <_isatty_r>
 8003b76:	b128      	cbz	r0, 8003b84 <__smakebuf_r+0x70>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	81a3      	strh	r3, [r4, #12]
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	431d      	orrs	r5, r3
 8003b88:	81a5      	strh	r5, [r4, #12]
 8003b8a:	e7cf      	b.n	8003b2c <__smakebuf_r+0x18>

08003b8c <_fstat_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4d07      	ldr	r5, [pc, #28]	; (8003bac <_fstat_r+0x20>)
 8003b90:	2300      	movs	r3, #0
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	602b      	str	r3, [r5, #0]
 8003b9a:	f7fc fdde 	bl	800075a <_fstat>
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	d102      	bne.n	8003ba8 <_fstat_r+0x1c>
 8003ba2:	682b      	ldr	r3, [r5, #0]
 8003ba4:	b103      	cbz	r3, 8003ba8 <_fstat_r+0x1c>
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
 8003baa:	bf00      	nop
 8003bac:	200002e0 	.word	0x200002e0

08003bb0 <_isatty_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d06      	ldr	r5, [pc, #24]	; (8003bcc <_isatty_r+0x1c>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	f7fc fddd 	bl	800077a <_isatty>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_isatty_r+0x1a>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_isatty_r+0x1a>
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	200002e0 	.word	0x200002e0

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	; (8003bec <_sbrk_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fc fde6 	bl	80007ac <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	200002e0 	.word	0x200002e0

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
